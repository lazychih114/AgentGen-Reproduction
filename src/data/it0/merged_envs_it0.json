[
    {
        "problems": [
            "(define (problem tsp-10)\n(:domain tsp)\n(:objects 1 2 3 4 5 6 7 8 9 10)\n(:init\n(at 1)\n)\n(:goal\n(and\n(visited 1)\n(visited 2)\n(visited 3)\n(visited 4)\n(visited 5)\n(visited 6)\n(visited 7)\n(visited 8)\n(visited 9)\n(visited 10)\n)\n)\n)",
            "\n\n\n(define (problem tsp-3)\n(:domain tsp)\n(:objects p1 p2 p3 )\n(:init\n(at p1)\n)\n(:goal\n(and\n(visited p1)\n(visited p2)\n(visited p3)\n)\n)\n)\n\n\n",
            "(define (problem tsp-2)\n(:domain tsp)\n(:objects p1 p2)\n(:init\n(at p1)\n)\n(:goal\n(and\n(visited p1)\n(visited p2)\n)\n)\n)",
            "(define (problem tsp-5)\n(:domain tsp)\n(:objects a b c d e)\n(:init\n(at a)\n)\n(:goal\n(and\n(visited a)\n(visited b)\n(visited c)\n(visited d)\n(visited e)\n)\n)\n)",
            "(define (problem tsp-4)\n(:domain tsp)\n(:objects a b c d)\n(:init\n(at a)\n)\n(:goal\n(and\n(visited a)\n(visited b)\n(visited c)\n(visited d)\n)\n)\n)"
        ],
        "domain": "(define (domain tsp)\n  (:predicates\n     (at ?x)\n     (visited ?x))\n\n  (:action move\n\t:parameters (?x ?y)\n\t:precondition (and (at ?x))\n\t:effect (and (at ?y) (visited ?y) (not (at ?x)))))\n",
        "description": "Your task is to navigate through a series of locations, ensuring that each location is visited exactly once. This is akin to solving a simplified version of the Traveling Salesperson Problem (TSP) where the goal is to find the shortest possible route that visits each location once and returns to the starting point.\n\nThe actions defined in this domain include:\n- move <location1> <location2>: This action allows you to move from one location to another. The precondition for this action is that you are currently at the first location. The effect of this action is that you will then be at the second location, the second location will be marked as visited, and you will no longer be at the first location.\n\nYou have the following restrictions on your actions:\n- You can only move to a location if you are currently at another specific location.\n- Once you move to a new location, that location is marked as visited.\n- You should aim to visit all locations without revisiting any.",
        "domain_name": "tsp_operator_actions",
        "nl_interface": {
            "at": "Currently at {arg1}.",
            "visited": "{arg1} has been visited.",
            "move": "Move from {arg1} to {arg2}."
        },
        "nl_interface_debug": [
            {
                "nl": "{\n    \"at\": \"Currently at {arg1}.\",\n    \"visited\": \"{arg1} has been visited.\",\n    \"move\": \"Move from {arg1} to {arg2}.\"\n}",
                "gpt_response": "```python\n{\n    \"at\": \"Currently at {arg1}.\",\n    \"visited\": \"{arg1} has been visited.\",\n    \"move\": \"Move from {arg1} to {arg2}.\"\n}\n```"
            }
        ]
    },
    {
        "problems": [
            "(define (problem 6) (:domain spanner) (:objects \n     bob - man\n spanner1 spanner2 - spanner\n     nut1 nut2 - nut\n     location1 location2 location3 - location\n     shed gate - location\n    ) (:init \n    (at bob shed)\n    (at spanner1 location3)\n    (useable spanner1)\n    (at spanner2 location3)\n    (useable spanner2)\n    (loose nut1)\n    (at nut1 gate)\n    (loose nut2)\n    (at nut2 gate)\n    (link shed location1)\n    (link location3 gate)\n    (link location1 location2)\n    (link location2 location3)\n) (:goal\n  (and\n   (tightened nut1)\n))",
            "(define (problem 8) (:domain spanner) (:objects \n     bob - man\n spanner1 spanner2 - spanner\n     nut1 nut2 - nut\n     location1 location2 location3 - location\n     shed gate - location\n    ) (:init \n    (at bob shed)\n    (at spanner1 location1)\n    (useable spanner1)\n    (at spanner2 location3)\n    (useable spanner2)\n    (loose nut1)\n    (at nut1 gate)\n    (loose nut2)\n    (at nut2 gate)\n    (link shed location1)\n    (link location3 gate)\n    (link location1 location2)\n    (link location2 location3)\n) (:goal\n  (and\n   (tightened nut1)\n   (tightened nut2)\n)))",
            "(define (problem 10) (:domain spanner) (:objects \n     alice - man\n spannerA spannerB spannerC - spanner\n     nutX - nut\n     locationX - location\n     garage door - location\n    ) (:init \n    (at alice garage)\n    (at spannerA locationX)\n    (useable spannerA)\n    (at spannerB locationX)\n    (useable spannerB)\n    (at spannerC locationX)\n    (useable spannerC)\n    (loose nutX)\n    (at nutX door)\n    (link garage locationX)\n    (link locationX door)\n) (:goal\n  (and\n   (tightened nutX)\n)))",
            "(define (problem 9) (:domain spanner) (:objects \n     bob - man\n spanner1 spanner2 - spanner\n     nut1 nut2 - nut\n     location1 location2 location3 - location\n     shed gate - location\n    ) (:init \n    (at bob shed)\n    (at spanner1 location1)\n    (useable spanner1)\n    (at spanner2 location3)\n    (useable spanner2)\n    (loose nut1)\n    (at nut1 gate)\n    (loose nut2)\n    (at nut2 gate)\n    (link shed location1)\n    (link location3 gate)\n    (link location1 location2)\n    (link location2 location3)\n) (:goal\n  (and\n   (tightened nut1)\n))",
            "(define (problem 2) (:domain spanner) (:objects \n     bob - man\n spanner1 spanner2 - spanner\n     nut1 - nut\n     location1 - location\n     shed gate - location\n    ) (:init \n    (at bob shed)\n    (at spanner1 location1)\n    (useable spanner1)\n    (at spanner2 location1)\n    (useable spanner2)\n    (loose nut1)\n    (at nut1 gate)\n    (link shed location1)\n    (link location1 gate)\n) (:goal\n  (and\n   (tightened nut1)\n)))\n",
            "(define (problem 0) (:domain spanner) (:objects \n     bob - man\n spanner1 spanner2 - spanner\n     nut1 - nut\n     location1 location2 - location\n     shed gate - location\n    ) (:init \n    (at bob shed)\n    (at spanner1 location2)\n    (useable spanner1)\n    (at spanner2 location2)\n    (useable spanner2)\n    (loose nut1)\n    (at nut1 gate)\n    (link shed location1)\n    (link location2 gate)\n    (link location1 location2)\n) (:goal\n  (and\n   (tightened nut1)\n)))\n",
            "(define (problem 5) (:domain spanner) (:objects \n     bob - man\n spanner1 spanner2 - spanner\n     nut1 nut2 - nut\n     location1 location2 location3 - location\n     shed gate - location\n    ) (:init \n    (at bob shed)\n    (at spanner1 location3)\n    (useable spanner1)\n    (at spanner2 location3)\n    (useable spanner2)\n    (loose nut1)\n    (at nut1 gate)\n    (loose nut2)\n    (at nut2 gate)\n    (link shed location1)\n    (link location3 gate)\n    (link location1 location2)\n    (link location2 location3)\n) (:goal\n  (and\n   (tightened nut1)\n   (tightened nut2)\n)))\n",
            "(define (problem 8) (:domain spanner) (:objects \n     bob - man\n spanner1 spanner2 - spanner\n     nut1 nut2 - nut\n     location1 location2 - location\n     shed gate - location\n    ) (:init \n    (at bob shed)\n    (at spanner1 location1)\n    (useable spanner1)\n    (at spanner2 location2)\n    (useable spanner2)\n    (loose nut1)\n    (at nut1 gate)\n    (loose nut2)\n    (at nut2 gate)\n    (link shed location1)\n    (link location2 gate)\n    (link location1 location2)\n) (:goal\n  (and\n   (tightened nut1)\n   (tightened nut2)\n)))",
            "(define (problem 7) (:domain spanner) (:objects \n     john - man\n spanner2 - spanner\n     nut2 - nut\n     room1 room2 - location\n     garage door - location\n    ) (:init \n    (at john room1)\n    (at spanner2 room1)\n    (useable spanner2)\n    (loose nut2)\n    (at nut2 door)\n    (link room1 garage)\n    (link room2 door)\n    (link garage room2)\n) (:goal\n  (and\n   (tightened nut2)\n)))",
            "(define (problem 4) (:domain spanner) (:objects \n     bob - man\n spanner1 - spanner\n     nut1 - nut\n     location1 - location\n     shed gate - location\n    ) (:init \n    (at bob shed)\n    (at spanner1 location1)\n    (useable spanner1)\n    (loose nut1)\n    (at nut1 gate)\n    (link shed location1)\n    (link location1 gate)\n) (:goal\n  (and\n   (tightened nut1)\n)))\n",
            "(define (problem 7) (:domain spanner) (:objects \n     bob - man\n spanner1 spanner2 - spanner\n     nut1 nut2 - nut\n     location1 location2 - location\n     shed gate - location\n    ) (:init \n    (at bob shed)\n    (at spanner1 location1)\n    (useable spanner1)\n    (at spanner2 location2)\n    (useable spanner2)\n    (loose nut1)\n    (at nut1 gate)\n    (loose nut2)\n    (at nut2 gate)\n    (link shed location1)\n    (link location2 gate)\n    (link location1 location2)\n) (:goal\n  (and\n   (tightened nut1)\n   (tightened nut2)\n)))",
            "(define (problem 3) (:domain spanner) (:objects \n     alice - man\n spanner3 spanner4 - spanner\n     nut2 - nut\n     location2 - location\n     house door - location\n    ) (:init \n    (at alice house)\n    (at spanner3 location2)\n    (useable spanner3)\n    (at spanner4 location2)\n    (useable spanner4)\n    (loose nut2)\n    (at nut2 door)\n    (link house location2)\n    (link location2 door)\n) (:goal\n  (and\n   (tightened nut2)\n)))",
            "(define (problem 6) (:domain spanner) (:objects \n     bob - man\n spanner1 - spanner\n     nut1 - nut\n     location1 location2 - location\n     shed gate - location\n    ) (:init \n    (at bob shed)\n    (at spanner1 location1)\n    (useable spanner1)\n    (loose nut1)\n    (at nut1 gate)\n    (link shed location1)\n    (link location2 gate)\n    (link location1 location2)\n) (:goal\n  (and\n   (tightened nut1)\n)))",
            "(define (problem 1) (:domain spanner) (:objects \n     bob - man\n spanner1 - spanner\n     nut1 - nut\n     location1 location2 - location\n     shed gate - location\n    ) (:init \n    (at bob shed)\n    (at spanner1 location1)\n    (useable spanner1)\n    (loose nut1)\n    (at nut1 gate)\n    (link shed location1)\n    (link location2 gate)\n    (link location1 location2)\n) (:goal\n  (and\n   (tightened nut1)\n)))\n",
            "(define (problem 4) (:domain spanner) (:objects \n     bob - man\n spanner1 spanner2 spanner3 - spanner\n     nut1 nut2 - nut\n     location1 location2 location3 - location\n     shed gate - location\n    ) (:init \n    (at bob shed)\n    (at spanner1 location3)\n    (useable spanner1)\n    (at spanner2 location3)\n    (useable spanner2)\n    (at spanner3 location3)\n    (useable spanner3)\n    (loose nut1)\n    (at nut1 gate)\n    (loose nut2)\n    (at nut2 gate)\n    (link shed location1)\n    (link location3 gate)\n    (link location1 location2)\n    (link location2 location3)\n) (:goal\n  (and\n   (tightened nut1)\n))",
            "(define (problem 3) (:domain spanner) (:objects \n     bob - man\n spanner1 spanner2 spanner3 - spanner\n     nut1 nut2 - nut\n     location1 location2 location3 - location\n     shed gate - location\n    ) (:init \n    (at bob shed)\n    (at spanner1 location3)\n    (useable spanner1)\n    (at spanner2 location3)\n    (useable spanner2)\n    (at spanner3 location3)\n    (useable spanner3)\n    (loose nut1)\n    (at nut1 gate)\n    (loose nut2)\n    (at nut2 gate)\n    (link shed location1)\n    (link location3 gate)\n    (link location1 location2)\n    (link location2 location3)\n) (:goal\n  (and\n   (tightened nut1)\n   (tightened nut2)\n)))\n",
            "(define (problem 9) (:domain spanner) (:objects \n     bob - man\n spanner1 spanner2 spanner3 - spanner\n     nut1 - nut\n     location1 - location\n     shed gate - location\n    ) (:init \n    (at bob shed)\n    (at spanner1 location1)\n    (useable spanner1)\n    (at spanner2 location1)\n    (useable spanner2)\n    (at spanner3 location1)\n    (useable spanner3)\n    (loose nut1)\n    (at nut1 gate)\n    (link shed location1)\n    (link location1 gate)\n) (:goal\n  (and\n   (tightened nut1)\n)))"
        ],
        "domain": "(define (domain spanner)                    \n(:requirements :typing :strips)                \n(:types \n\tlocation locatable - object\n\tman nut spanner - locatable\t\n)                                           \n                                                                               \n(:predicates \n\t(at ?m - locatable ?l - location)\n\t(carrying ?m - man ?s - spanner)\n\t(useable ?s - spanner)\n\t(link ?l1 - location ?l2 - location)\n\t(tightened ?n - nut)\n\t(loose ?n - nut))                                                                                           \n\n(:action walk \n        :parameters (?start - location ?end - location ?m - man)\n        :precondition (and (at ?m ?start) \n                           (link ?start ?end))                                                          \n        :effect (and (not (at ?m ?start)) (at ?m ?end)))\n\n(:action pickup_spanner \n        :parameters (?l - location ?s - spanner ?m - man)\n        :precondition (and (at ?m ?l) \n                           (at ?s ?l))\n        :effect (and (not (at ?s ?l))\n                     (carrying ?m ?s)))\n\n(:action tighten_nut \n        :parameters (?l - location ?s - spanner ?m - man ?n - nut)\n        :precondition (and (at ?m ?l) \n\t\t      \t   (at ?n ?l)\n\t\t\t   (carrying ?m ?s)\n\t\t\t   (useable ?s)\n\t\t\t   (loose ?n))\n        :effect (and (not (loose ?n))(not (useable ?s)) (tightened ?n)))\n)\n",
        "description": "You are a maintenance worker tasked with tightening loose nuts in various locations using a spanner. Your environment consists of different locations, a spanner, and nuts that need to be tightened. The spanner can be carried from one location to another, and it is used to tighten nuts. However, once a nut is tightened, the spanner becomes unusable for the rest of the task.\n\nThe actions defined in this domain include:\n- **walk <start_location> <end_location> <man>**: This action allows the man to move from one location to another if there is a link between the start location and the end location. The effect of this action is that the man is no longer at the start location but is now at the end location.\n- **pickup_spanner <location> <spanner> <man>**: This action allows the man to pick up a spanner at his current location. The precondition for this action is that both the man and the spanner are at the same location. The effect of this action is that the spanner is no longer at that location, and the man is now carrying the spanner.\n- **tighten_nut <location> <spanner> <man> <nut>**: This action allows the man to tighten a loose nut at his current location using a spanner he is carrying. The preconditions for this action are that the man, the nut, and the spanner are all at the same location, the spanner is usable, and the nut is loose. The effect of this action is that the nut is no longer loose but tightened, and the spanner becomes unusable.\n\nYou have the following restrictions on your actions:\n- You can only move from one location to another if there is a direct link between those locations.\n- You can only pick up a spanner if you are at the same location as the spanner.\n- You can only tighten a nut if you are at the same location as the nut, you are carrying a usable spanner, and the nut is loose. After tightening a nut, the spanner becomes unusable for the rest of the task.",
        "domain_name": "spannerlearning",
        "nl_interface": {
            "at": "{arg1} is at {arg2}.",
            "carrying": "{arg1} is carrying {arg2}.",
            "useable": "{arg1} is useable.",
            "link": "There is a link between {arg1} and {arg2}.",
            "tightened": "{arg1} is tightened.",
            "loose": "{arg1} is loose.",
            "walk": "{arg3} walks from {arg1} to {arg2}.",
            "pickup_spanner": "{arg3} picks up the spanner {arg2} at {arg1}.",
            "tighten_nut": "{arg3} tightens the nut {arg4} at {arg1} with the spanner {arg2}."
        },
        "nl_interface_debug": [
            {
                "nl": "{\n    \"at\": \"{arg1} is at {arg2}.\",\n    \"carrying\": \"{arg1} is carrying {arg2}.\",\n    \"useable\": \"{arg1} is useable.\",\n    \"link\": \"There is a link between {arg1} and {arg2}.\",\n    \"tightened\": \"{arg1} is tightened.\",\n    \"loose\": \"{arg1} is loose.\",\n    \"walk\": \"{arg3} walks from {arg1} to {arg2}.\",\n    \"pickup_spanner\": \"{arg3} picks up the spanner {arg2} at {arg1}.\",\n    \"tighten_nut\": \"{arg3} tightens the nut {arg4} at {arg1} with the spanner {arg2}.\"\n}",
                "gpt_response": "```python\n{\n    \"at\": \"{arg1} is at {arg2}.\",\n    \"carrying\": \"{arg1} is carrying {arg2}.\",\n    \"useable\": \"{arg1} is useable.\",\n    \"link\": \"There is a link between {arg1} and {arg2}.\",\n    \"tightened\": \"{arg1} is tightened.\",\n    \"loose\": \"{arg1} is loose.\",\n    \"walk\": \"{arg3} walks from {arg1} to {arg2}.\",\n    \"pickup_spanner\": \"{arg3} picks up the spanner {arg2} at {arg1}.\",\n    \"tighten_nut\": \"{arg3} tightens the nut {arg4} at {arg1} with the spanner {arg2}.\"\n}\n```"
            }
        ]
    },
    {
        "problems": [
            "(define (problem depotprob7512) (:domain Depot)\n(:objects\n\tdepot0 - Depot\n\tdistributor0 distributor1 - Distributor\n\ttruck0 truck1 - Truck\n\tpallet0 pallet1 pallet2 - Pallet\n\tcrate0 crate1 crate2 crate3 - Crate\n\thoist0 hoist1 hoist2 - Hoist)\n(:init\n\t(at pallet0 depot0)\n\t(clear crate0)\n\t(at pallet1 distributor0)\n\t(clear crate3)\n\t(at pallet2 distributor1)\n\t(clear crate2)\n\t(at truck0 depot0)\n\t(at truck1 depot0)\n\t(at hoist0 depot0)\n\t(available hoist0)\n\t(at hoist1 distributor0)\n\t(available hoist1)\n\t(at hoist2 distributor1)\n\t(available hoist2)\n\t(at crate0 depot0)\n\t(on crate0 pallet0)\n\t(at crate1 distributor1)\n\t(on crate1 pallet2)\n\t(at crate2 distributor1)\n\t(on crate2 crate1)\n\t(at crate3 distributor0)\n\t(on crate3 pallet1)\n)\n\n(:goal (and\n\t\t(on crate0 pallet2)\n\t\t(on crate1 crate3)\n\t\t(on crate2 pallet0)\n\t\t(on crate3 pallet1)\n\t)\n))",
            "(define (problem depotprob2022) (:domain Depot)\n(:objects\n\tdepot0 - Depot\n\tdistributor0 distributor1 - Distributor\n\ttruck0 truck1 - Truck\n\tpallet0 pallet1 pallet2 - Pallet\n\tcrate0 crate1 crate2 crate3 crate4 crate5 - Crate\n\thoist0 hoist1 hoist2 - Hoist)\n(:init\n\t(at pallet0 depot0)\n\t(clear crate1)\n\t(at pallet1 distributor0)\n\t(clear crate4)\n\t(at pallet2 distributor1)\n\t(clear crate5)\n\t(at truck0 depot0)\n\t(at truck1 distributor0)\n\t(at hoist0 depot0)\n\t(available hoist0)\n\t(at hoist1 distributor0)\n\t(available hoist1)\n\t(at hoist2 distributor1)\n\t(available hoist2)\n\t(at crate0 distributor0)\n\t(on crate0 pallet1)\n\t(at crate1 depot0)\n\t(on crate1 pallet0)\n\t(at crate2 distributor1)\n\t(on crate2 pallet2)\n\t(at crate3 distributor0)\n\t(on crate3 crate0)\n\t(at crate4 distributor0)\n\t(on crate4 crate3)\n\t(at crate5 distributor1)\n\t(on crate5 crate2)\n)\n\n(:goal (and\n\t\t(on crate0 crate1)\n\t\t(on crate1 pallet2)\n\t\t(on crate2 pallet0)\n\t\t(on crate3 crate2)\n\t\t(on crate4 pallet1)\n\t\t(on crate5 crate0)\n\t)\n))",
            "(define (problem depotprob5678) (:domain Depot)\n(:objects\n\tdepot0 - Depot\n\tdistributor0 distributor1 - Distributor\n\ttruck0 truck1 - Truck\n\tpallet0 pallet1 pallet2 pallet3 pallet4 pallet5 - Pallet\n\tcrate0 crate1 crate2 crate3 crate4 crate5 - Crate\n\thoist0 hoist1 hoist2 - Hoist)\n(:init\n\t(at pallet0 depot0)\n\t(clear crate5)\n\t(at pallet1 distributor0)\n\t(clear pallet1)\n\t(at pallet2 distributor1)\n\t(clear crate3)\n\t(at pallet3 distributor0)\n\t(clear pallet3)\n\t(at pallet4 distributor0)\n\t(clear crate4)\n\t(at pallet5 distributor1)\n\t(clear crate1)\n\t(at truck0 distributor1)\n\t(at truck1 depot0)\n\t(at hoist0 depot0)\n\t(available hoist0)\n\t(at hoist1 distributor0)\n\t(available hoist1)\n\t(at hoist2 distributor1)\n\t(available hoist2)\n\t(at crate0 distributor0)\n\t(on crate0 pallet4)\n\t(at crate1 distributor1)\n\t(on crate1 pallet5)\n\t(at crate2 distributor1)\n\t(on crate2 pallet2)\n\t(at crate3 distributor1)\n\t(on crate3 crate2)\n\t(at crate4 distributor0)\n\t(on crate4 crate0)\n\t(at crate5 depot0)\n\t(on crate5 pallet0)\n)\n\n(:goal (and\n\t\t(on crate0 pallet3)\n\t\t(on crate1 crate4)\n\t\t(on crate3 pallet1)\n\t)\n))",
            "(define (problem depotprob7512) (:domain Depot)\n(:objects\n\tdepot0 - Depot\n\tdistributor0 distributor1 - Distributor\n\ttruck0 truck1 - Truck\n\tpallet0 pallet1 pallet2 - Pallet\n\tcrate0 crate1 crate2 crate3 - Crate\n\thoist0 hoist1 hoist2 - Hoist)\n(:init\n\t(at pallet0 depot0)\n\t(clear crate0)\n\t(at pallet1 distributor0)\n\t(clear crate3)\n\t(at pallet2 distributor1)\n\t(clear crate2)\n\t(at truck0 depot0)\n\t(at truck1 depot0)\n\t(at hoist0 depot0)\n\t(available hoist0)\n\t(at hoist1 distributor0)\n\t(available hoist1)\n\t(at hoist2 distributor1)\n\t(available hoist2)\n\t(at crate0 depot0)\n\t(on crate0 pallet0)\n\t(at crate1 distributor1)\n\t(on crate1 pallet2)\n\t(at crate2 distributor1)\n\t(on crate2 crate1)\n\t(at crate3 distributor0)\n\t(on crate3 pallet1)\n)\n\n(:goal (and\n\t\t(on crate0 pallet2)\n\t\t(on crate1 crate3)\n\t\t(on crate2 pallet0)\n\t\t(on crate3 pallet1)\n\t)\n))\n",
            "(define (problem depotprob2022) (:domain Depot)\n(:objects\n\tdepot0 - Depot\n\tdistributor0 distributor1 - Distributor\n\ttruck0 truck1 - Truck\n\tpallet0 pallet1 pallet2 - Pallet\n\tcrate0 crate1 - Crate\n\thoist0 hoist1 hoist2 - Hoist)\n(:init\n\t(at pallet0 depot0)\n\t(clear crate1)\n\t(at pallet1 distributor0)\n\t(clear crate0)\n\t(at pallet2 distributor1)\n\t(clear pallet2)\n\t(at truck0 distributor1)\n\t(at truck1 depot0)\n\t(at hoist0 depot0)\n\t(available hoist0)\n\t(at hoist1 distributor0)\n\t(available hoist1)\n\t(at hoist2 distributor1)\n\t(available hoist2)\n\t(at crate0 distributor0)\n\t(on crate0 pallet1)\n\t(at crate1 depot0)\n\t(on crate1 pallet0)\n)\n\n(:goal (and\n\t\t(on crate0 pallet2)\n\t)\n))",
            "(define (problem depotprob1234) (:domain Depot)\n(:objects\n\tdepot0 - Depot\n\tdistributor0 distributor1 - Distributor\n\ttruck0 truck1 - Truck\n\tpallet0 pallet1 pallet2 pallet3 pallet4 pallet5 - Pallet\n\tcrate0 crate1 crate2 crate3 crate4 crate5 - Crate\n\thoist0 hoist1 hoist2 - Hoist)\n(:init\n\t(at pallet0 depot0)\n\t(clear crate5)\n\t(at pallet1 distributor0)\n\t(clear pallet1)\n\t(at pallet2 distributor1)\n\t(clear crate3)\n\t(at pallet3 distributor0)\n\t(clear pallet3)\n\t(at pallet4 distributor0)\n\t(clear crate4)\n\t(at pallet5 distributor1)\n\t(clear crate1)\n\t(at truck0 distributor1)\n\t(at truck1 depot0)\n\t(at hoist0 depot0)\n\t(available hoist0)\n\t(at hoist1 distributor0)\n\t(available hoist1)\n\t(at hoist2 distributor1)\n\t(available hoist2)\n\t(at crate0 distributor0)\n\t(on crate0 pallet4)\n\t(at crate1 distributor1)\n\t(on crate1 pallet5)\n\t(at crate2 distributor1)\n\t(on crate2 pallet2)\n\t(at crate3 distributor1)\n\t(on crate3 crate2)\n\t(at crate4 distributor0)\n\t(on crate4 crate0)\n\t(at crate5 depot0)\n\t(on crate5 pallet0)\n)\n\n(:goal (and\n\t\t(on crate0 pallet3)\n\t\t(on crate1 crate4)\n\t\t(on crate3 pallet1)\n\t\t(on crate4 pallet5)\n\t\t(on crate5 crate1)\n\t)\n))\n",
            "(define (problem depotprob1935) (:domain Depot)\n(:objects\n\tdepot0 - Depot\n\tdistributor0 distributor1 - Distributor\n\ttruck0 truck1 - Truck\n\tpallet0 pallet1 pallet2 - Pallet\n\tcrate0 crate1 crate2 crate3 crate4 crate5 - Crate\n\thoist0 hoist1 hoist2 - Hoist)\n(:init\n\t(at pallet0 depot0)\n\t(clear crate1)\n\t(at pallet1 distributor0)\n\t(clear crate4)\n\t(at pallet2 distributor1)\n\t(clear crate5)\n\t(at truck0 depot0)\n\t(at truck1 distributor0)\n\t(at hoist0 depot0)\n\t(available hoist0)\n\t(at hoist1 distributor0)\n\t(available hoist1)\n\t(at hoist2 distributor1)\n\t(available hoist2)\n\t(at crate0 distributor0)\n\t(on crate0 pallet1)\n\t(at crate1 depot0)\n\t(on crate1 pallet0)\n\t(at crate2 distributor1)\n\t(on crate2 pallet2)\n\t(at crate3 distributor0)\n\t(on crate3 crate0)\n\t(at crate4 distributor0)\n\t(on crate4 crate3)\n\t(at crate5 distributor1)\n\t(on crate5 crate2)\n)\n\n(:goal (and\n\t\t(on crate0 crate1)\n\t\t(on crate1 pallet2)\n\t\t(on crate2 pallet0)\n\t\t(on crate3 crate2)\n\t\t(on crate4 pallet1)\n\t\t(on crate5 crate0)\n\t)\n))\n",
            "(define (problem depotprob1234) (:domain Depot)\n(:objects\n\tdepot0 depot1 depot2 - Depot\n\tdistributor0 distributor1 distributor2 - Distributor\n\ttruck0 truck1 - Truck\n\tpallet0 pallet1 pallet2 pallet3 pallet4 pallet5 - Pallet\n\tcrate0 crate1 crate2 crate3 crate4 crate5 - Crate\n\thoist0 hoist1 hoist2 hoist3 hoist4 hoist5 - Hoist)\n(:init\n\t(at pallet0 depot0)\n\t(clear crate1)\n\t(at pallet1 depot1)\n\t(clear crate0)\n\t(at pallet2 depot2)\n\t(clear crate4)\n\t(at pallet3 distributor0)\n\t(clear crate5)\n\t(at pallet4 distributor1)\n\t(clear pallet4)\n\t(at pallet5 distributor2)\n\t(clear crate3)\n\t(at truck0 depot1)\n\t(at truck1 depot2)\n\t(at hoist0 depot0)\n\t(available hoist0)\n\t(at hoist1 depot1)\n\t(available hoist1)\n\t(at hoist2 depot2)\n\t(available hoist2)\n\t(at hoist3 distributor0)\n\t(available hoist3)\n\t(at hoist4 distributor1)\n\t(available hoist4)\n\t(at hoist5 distributor2)\n\t(available hoist5)\n\t(at crate0 depot1)\n\t(on crate0 pallet1)\n\t(at crate1 depot0)\n\t(on crate1 pallet0)\n\t(at crate2 distributor2)\n\t(on crate2 pallet5)\n\t(at crate3 distributor2)\n\t(on crate3 crate2)\n\t(at crate4 depot2)\n\t(on crate4 pallet2)\n\t(at crate5 distributor0)\n\t(on crate5 pallet3)\n)\n\n(:goal (and\n\t\t(on crate0 crate4)\n\t\t(on crate2 pallet3)\n\t\t(on crate3 pallet0)\n\t)\n))",
            "(define (problem depotprob1818) (:domain Depot)\n(:objects\n\tdepot0 - Depot\n\tdistributor0 distributor1 - Distributor\n\ttruck0 truck1 - Truck\n\tpallet0 pallet1 pallet2 - Pallet\n\tcrate0 crate1 - Crate\n\thoist0 hoist1 hoist2 - Hoist)\n(:init\n\t(at pallet0 depot0)\n\t(clear crate1)\n\t(at pallet1 distributor0)\n\t(clear crate0)\n\t(at pallet2 distributor1)\n\t(clear pallet2)\n\t(at truck0 distributor1)\n\t(at truck1 depot0)\n\t(at hoist0 depot0)\n\t(available hoist0)\n\t(at hoist1 distributor0)\n\t(available hoist1)\n\t(at hoist2 distributor1)\n\t(available hoist2)\n\t(at crate0 distributor0)\n\t(on crate0 pallet1)\n\t(at crate1 depot0)\n\t(on crate1 pallet0)\n)\n\n(:goal (and\n\t\t(on crate0 pallet2)\n\t\t(on crate1 pallet1)\n\t)\n))\n"
        ],
        "domain": "(define (domain Depot)\n(:requirements :typing)\n(:types place locatable - object\n        depot distributor - place\n        truck hoist surface - locatable\n        pallet crate - surface)\n\n(:predicates (at ?x - locatable ?y - place) \n             (on ?x - crate ?y - surface)\n             (in ?x - crate ?y - truck)\n             (lifting ?x - hoist ?y - crate)\n             (available ?x - hoist)\n             (clear ?x - surface))\n    \n(:action Drive\n:parameters (?x - truck ?y - place ?z - place) \n:precondition (and (at ?x ?y))\n:effect (and (not (at ?x ?y)) (at ?x ?z)))\n\n(:action Lift\n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (available ?x) (at ?y ?p) (on ?y ?z) (clear ?y))\n:effect (and (not (at ?y ?p)) (lifting ?x ?y) (not (clear ?y)) (not (available ?x)) \n             (clear ?z) (not (on ?y ?z))))\n\n(:action Drop \n:parameters (?x - hoist ?y - crate ?z - surface ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (clear ?z) (lifting ?x ?y))\n:effect (and (available ?x) (not (lifting ?x ?y)) (at ?y ?p) (not (clear ?z)) (clear ?y)\n        (on ?y ?z)))\n\n(:action Load\n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (lifting ?x ?y))\n:effect (and (not (lifting ?x ?y)) (in ?y ?z) (available ?x)))\n\n(:action Unload \n:parameters (?x - hoist ?y - crate ?z - truck ?p - place)\n:precondition (and (at ?x ?p) (at ?z ?p) (available ?x) (in ?y ?z))\n:effect (and (not (in ?y ?z)) (not (available ?x)) (lifting ?x ?y)))\n\n)\n",
        "description": "In the Depot domain, you are managing logistics operations involving trucks, hoists, crates, and pallets across different locations such as depots and distributors. The goal is to efficiently move crates between these locations, ensuring they are loaded onto trucks, lifted by hoists, and placed on surfaces as needed.\n\nThe actions defined in this domain include:\n- **Drive <truck> <from_place> <to_place>**: This action allows a truck to move from one place to another. The precondition for this action is that the truck is currently at the starting place. The effect of this action is that the truck is no longer at the starting place and is now at the destination place.\n- **Lift <hoist> <crate> <surface> <place>**: This action allows a hoist to lift a crate from a surface at a specific place. The preconditions are that the hoist and the crate are at the same place, the hoist is available, the crate is on the surface and the surface is clear. The effects are that the crate is no longer at the place or on the surface, the hoist is lifting the crate, the hoist becomes unavailable, and the surface becomes clear.\n- **Drop <hoist> <crate> <surface> <place>**: This action allows a hoist to drop a crate onto a surface at a specific place. The preconditions are that the hoist is at the place, the surface is at the place and clear, and the hoist is lifting the crate. The effects are that the hoist becomes available, it is no longer lifting the crate, the crate is at the place and on the surface, and the surface is no longer clear but the crate is.\n- **Load <hoist> <crate> <truck> <place>**: This action allows a hoist to load a crate into a truck at a specific place. The preconditions are that the hoist is at the place, the truck is at the place, and the hoist is lifting the crate. The effects are that the hoist is no longer lifting the crate, the crate is in the truck, and the hoist becomes available.\n- **Unload <hoist> <crate> <truck> <place>**: This action allows a hoist to unload a crate from a truck at a specific place. The preconditions are that the hoist and the truck are at the place, the hoist is available, and the crate is in the truck. The effects are that the crate is no longer in the truck, the hoist becomes unavailable as it is now lifting the crate.\n\nYou have the following restrictions on your actions:\n- A truck can only move from one place to another if it is currently at the starting place.\n- A hoist can only lift a crate if it is available, the crate is on a surface and clear, and both the hoist and the crate are at the same place.\n- A hoist can only drop a crate onto a surface if it is lifting the crate, the surface is clear, and both the hoist and the surface are at the same place.\n- A hoist can only load a crate into a truck if it is lifting the crate and both the hoist and the truck are at the same place.\n- A hoist can only unload a crate from a truck if the hoist is available, the crate is in the truck, and both the hoist and the truck are at the same place.\n- Once a crate is lifted, it is no longer on the surface or at the place until it is dropped.\n- Once a crate is loaded into a truck, it is no longer considered to be at the place until it is unloaded.",
        "domain_name": "depot",
        "nl_interface": {
            "at": "{arg1} is at {arg2}.",
            "on": "{arg1} is on {arg2}.",
            "in": "{arg1} is in {arg2}.",
            "lifting": "{arg1} is lifting {arg2}.",
            "available": "{arg1} is available.",
            "clear": "{arg1} is clear.",
            "Drive": "{arg1} drives from {arg2} to {arg3}.",
            "Lift": "{arg1} lifts {arg2} from {arg3} at {arg4}.",
            "Drop": "{arg1} drops {arg2} onto {arg3} at {arg4}.",
            "Load": "{arg1} loads {arg2} into {arg3} at {arg4}.",
            "Unload": "{arg1} unloads {arg2} from {arg3} at {arg4}."
        },
        "nl_interface_debug": [
            {
                "nl": "{\n    \"at\": \"{arg1} is at {arg2}.\",\n    \"on\": \"{arg1} is on {arg2}.\",\n    \"in\": \"{arg1} is in {arg2}.\",\n    \"lifting\": \"{arg1} is lifting {arg2}.\",\n    \"available\": \"{arg1} is available.\",\n    \"clear\": \"{arg1} is clear.\",\n    \"Drive\": \"{arg1} drives from {arg2} to {arg3}.\",\n    \"Lift\": \"{arg1} lifts {arg2} from {arg3} at {arg4}.\",\n    \"Drop\": \"{arg1} drops {arg2} onto {arg3} at {arg4}.\",\n    \"Load\": \"{arg1} loads {arg2} into {arg3} at {arg4}.\",\n    \"Unload\": \"{arg1} unloads {arg2} from {arg3} at {arg4}.\"\n}",
                "gpt_response": "```python\n{\n    \"at\": \"{arg1} is at {arg2}.\",\n    \"on\": \"{arg1} is on {arg2}.\",\n    \"in\": \"{arg1} is in {arg2}.\",\n    \"lifting\": \"{arg1} is lifting {arg2}.\",\n    \"available\": \"{arg1} is available.\",\n    \"clear\": \"{arg1} is clear.\",\n    \"Drive\": \"{arg1} drives from {arg2} to {arg3}.\",\n    \"Lift\": \"{arg1} lifts {arg2} from {arg3} at {arg4}.\",\n    \"Drop\": \"{arg1} drops {arg2} onto {arg3} at {arg4}.\",\n    \"Load\": \"{arg1} loads {arg2} into {arg3} at {arg4}.\",\n    \"Unload\": \"{arg1} unloads {arg2} from {arg3} at {arg4}.\"\n}\n```"
            }
        ]
    },
    {
        "problems": [
            "(define (problem hiking-easy) (:domain hiking)\n  (:objects\n        start - loc\n\tend - loc\n  )\n  (:init \n\t(adjacent start end)\n\t(at start)\n\t(isgoal end)\n\t(ontrail start end)\n  )\n  (:goal (and\n\t(at end)))\n)",
            "(define (problem hiking_easy) (:domain hiking)\n  (:objects\n        start - loc\n\tend - loc\n\thill - loc\n\twater - loc\n  )\n  (:init \n\t(adjacent start end)\n\t(adjacent start hill)\n\t(adjacent end start)\n\t(adjacent end water)\n\t(adjacent hill start)\n\t(adjacent hill water)\n\t(adjacent water end)\n\t(adjacent water hill)\n\t(at start)\n\t(isgoal end)\n\t(ishill hill)\n\t(iswater water)\n\t(ontrail start end)\n  )\n  (:goal (and\n\t(at end)))\n)",
            "(define (problem hiking_difficult) (:domain hiking)\n  (:objects\n        start - loc\n\tend - loc\n\thill - loc\n\twater - loc\n\tcave - loc\n  )\n  (:init \n\t(adjacent start end)\n\t(adjacent start hill)\n\t(adjacent end start)\n\t(adjacent end water)\n\t(adjacent hill start)\n\t(adjacent hill water)\n\t(adjacent water end)\n\t(adjacent water hill)\n\t(adjacent hill cave)\n\t(adjacent cave end)\n\t(at start)\n\t(isgoal end)\n\t(ishill hill)\n\t(iswater water)\n\t(ontrail start end)\n  )\n  (:goal (and\n\t(at end)))\n)",
            "\n(define (problem hiking) (:domain hiking)\n  (:objects\n        r0_c0 - loc\n\tr0_c1 - loc\n\tr0_c2 - loc\n\tr0_c3 - loc\n\tr0_c4 - loc\n\tr0_c5 - loc\n\tr0_c6 - loc\n\tr0_c7 - loc\n\tr0_c8 - loc\n\tr0_c9 - loc\n\tr1_c0 - loc\n\tr1_c1 - loc\n\tr1_c2 - loc\n\tr1_c3 - loc\n\tr1_c4 - loc\n\tr1_c5 - loc\n\tr1_c6 - loc\n\tr1_c7 - loc\n\tr1_c8 - loc\n\tr1_c9 - loc\n\tr2_c0 - loc\n\tr2_c1 - loc\n\tr2_c2 - loc\n\tr2_c3 - loc\n\tr2_c4 - loc\n\tr2_c5 - loc\n\tr2_c6 - loc\n\tr2_c7 - loc\n\tr2_c8 - loc\n\tr2_c9 - loc\n\tr3_c0 - loc\n\tr3_c1 - loc\n\tr3_c2 - loc\n\tr3_c3 - loc\n\tr3_c4 - loc\n\tr3_c5 - loc\n\tr3_c6 - loc\n\tr3_c7 - loc\n\tr3_c8 - loc\n\tr3_c9 - loc\n\tr4_c0 - loc\n\tr4_c1 - loc\n\tr4_c2 - loc\n\tr4_c3 - loc\n\tr4_c4 - loc\n\tr4_c5 - loc\n\tr4_c6 - loc\n\tr4_c7 - loc\n\tr4_c8 - loc\n\tr4_c9 - loc\n\tr5_c0 - loc\n\tr5_c1 - loc\n\tr5_c2 - loc\n\tr5_c3 - loc\n\tr5_c4 - loc\n\tr5_c5 - loc\n\tr5_c6 - loc\n\tr5_c7 - loc\n\tr5_c8 - loc\n\tr5_c9 - loc\n\tr6_c0 - loc\n\tr6_c1 - loc\n\tr6_c2 - loc\n\tr6_c3 - loc\n\tr6_c4 - loc\n\tr6_c5 - loc\n\tr6_c6 - loc\n\tr6_c7 - loc\n\tr6_c8 - loc\n\tr6_c9 - loc\n\tr7_c0 - loc\n\tr7_c1 - loc\n\tr7_c2 - loc\n\tr7_c3 - loc\n\tr7_c4 - loc\n\tr7_c5 - loc\n\tr7_c6 - loc\n\tr7_c7 - loc\n\tr7_c8 - loc\n\tr7_c9 - loc\n  )\n  (:init \n\t(adjacent r0_c0 r0_c1)\n\t(adjacent r0_c0 r1_c0)\n\t(adjacent r0_c1 r0_c0)\n\t(adjacent r0_c1 r0_c2)\n\t(adjacent r0_c1 r1_c1)\n\t(adjacent r0_c2 r0_c1)\n\t(adjacent r0_c2 r0_c3)\n\t(adjacent r0_c2 r1_c2)\n\t(adjacent r0_c3 r0_c2)\n\t(adjacent r0_c3 r0_c4)\n\t(adjacent r0_c3 r1_c3)\n\t(adjacent r0_c4 r0_c3)\n\t(adjacent r0_c4 r0_c5)\n\t(adjacent r0_c4 r1_c4)\n\t(adjacent r0_c5 r0_c4)\n\t(adjacent r0_c5 r0_c6)\n\t(adjacent r0_c5 r1_c5)\n\t(adjacent r0_c6 r0_c5)\n\t(adjacent r0_c6 r0_c7)\n\t(adjacent r0_c6 r1_c6)\n\t(adjacent r0_c7 r0_c6)\n\t(adjacent r0_c7 r0_c8)\n\t(adjacent r0_c7 r1_c7)\n\t(adjacent r0_c8 r0_c7)\n\t(adjacent r0_c8 r0_c9)\n\t(adjacent r0_c8 r1_c8)\n\t(adjacent r0_c9 r0_c8)\n\t(adjacent r0_c9 r1_c9)\n\t(adjacent r1_c0 r0_c0)\n\t(adjacent r1_c0 r1_c1)\n\t(adjacent r1_c0 r2_c0)\n\t(adjacent r1_c1 r0_c1)\n\t(adjacent r1_c1 r1_c0)\n\t(adjacent r1_c1 r1_c2)\n\t(adjacent r1_c1 r2_c1)\n\t(adjacent r1_c2 r0_c2)\n\t(adjacent r1_c2 r1_c1)\n\t(adjacent r1_c2 r1_c3)\n\t(adjacent r1_c2 r2_c2)\n\t(adjacent r1_c3 r0_c3)\n\t(adjacent r1_c3 r1_c2)\n\t(adjacent r1_c3 r1_c4)\n\t(adjacent r1_c3 r2_c3)\n\t(adjacent r1_c4 r0_c4)\n\t(adjacent r1_c4 r1_c3)\n\t(adjacent r1_c4 r1_c5)\n\t(adjacent r1_c4 r2_c4)\n\t(adjacent r1_c5 r0_c5)\n\t(adjacent r1_c5 r1_c4)\n\t(adjacent r1_c5 r1_c6)\n\t(adjacent r1_c5 r2_c5)\n\t(adjacent r1_c6 r0_c6)\n\t(adjacent r1_c6 r1_c5)\n\t(adjacent r1_c6 r1_c7)\n\t(adjacent r1_c6 r2_c6)\n\t(adjacent r1_c7 r0_c7)\n\t(adjacent r1_c7 r1_c6)\n\t(adjacent r1_c7 r1_c8)\n\t(adjacent r1_c7 r2_c7)\n\t(adjacent r1_c8 r0_c8)\n\t(adjacent r1_c8 r1_c7)\n\t(adjacent r1_c8 r1_c9)\n\t(adjacent r1_c8 r2_c8)\n\t(adjacent r1_c9 r0_c9)\n\t(adjacent r1_c9 r1_c8)\n\t(adjacent r1_c9 r2_c9)\n\t(adjacent r2_c0 r1_c0)\n\t(adjacent r2_c0 r2_c1)\n\t(adjacent r2_c0 r3_c0)\n\t(adjacent r2_c1 r1_c1)\n\t(adjacent r2_c1 r2_c0)\n\t(adjacent r2_c1 r2_c2)\n\t(adjacent r2_c1 r3_c1)\n\t(adjacent r2_c2 r1_c2)\n\t(adjacent r2_c2 r2_c1)\n\t(adjacent r2_c2 r2_c3)\n\t(adjacent r2_c2 r3_c2)\n\t(adjacent r2_c3 r1_c3)\n\t(adjacent r2_c3 r2_c2)\n\t(adjacent r2_c3 r2_c4)\n\t(adjacent r2_c3 r3_c3)\n\t(adjacent r2_c4 r1_c4)\n\t(adjacent r2_c4 r2_c3)\n\t(adjacent r2_c4 r2_c5)\n\t(adjacent r2_c4 r3_c4)\n\t(adjacent r2_c5 r1_c5)\n\t(adjacent r2_c5 r2_c4)\n\t(adjacent r2_c5 r2_c6)\n\t(adjacent r2_c5 r3_c5)\n\t(adjacent r2_c6 r1_c6)\n\t(adjacent r2_c6 r2_c5)\n\t(adjacent r2_c6 r2_c7)\n\t(adjacent r2_c6 r3_c6)\n\t(adjacent r2_c7 r1_c7)\n\t(adjacent r2_c7 r2_c6)\n\t(adjacent r2_c7 r2_c8)\n\t(adjacent r2_c7 r3_c7)\n\t(adjacent r2_c8 r1_c8)\n\t(adjacent r2_c8 r2_c7)\n\t(adjacent r2_c8 r2_c9)\n\t(adjacent r2_c8 r3_c8)\n\t(adjacent r2_c9 r1_c9)\n\t(adjacent r2_c9 r2_c8)\n\t(adjacent r2_c9 r3_c9)\n\t(adjacent r3_c0 r2_c0)\n\t(adjacent r3_c0 r3_c1)\n\t(adjacent r3_c0 r4_c0)\n\t(adjacent r3_c1 r2_c1)\n\t(adjacent r3_c1 r3_c0)\n\t(adjacent r3_c1 r3_c2)\n\t(adjacent r3_c1 r4_c1)\n\t(adjacent r3_c2 r2_c2)\n\t(adjacent r3_c2 r3_c1)\n\t(adjacent r3_c2 r3_c3)\n\t(adjacent r3_c2 r4_c2)\n\t(adjacent r3_c3 r2_c3)\n\t(adjacent r3_c3 r3_c2)\n\t(adjacent r3_c3 r3_c4)\n\t(adjacent r3_c3 r4_c3)\n\t(adjacent r3_c4 r2_c4)\n\t(adjacent r3_c4 r3_c3)\n\t(adjacent r3_c4 r3_c5)\n\t(adjacent r3_c4 r4_c4)\n\t(adjacent r3_c5 r2_c5)\n\t(adjacent r3_c5 r3_c4)\n\t(adjacent r3_c5 r3_c6)\n\t(adjacent r3_c5 r4_c5)\n\t(adjacent r3_c6 r2_c6)\n\t(adjacent r3_c6 r3_c5)\n\t(adjacent r3_c6 r3_c7)\n\t(adjacent r3_c6 r4_c6)\n\t(adjacent r3_c7 r2_c7)\n\t(adjacent r3_c7 r3_c6)\n\t(adjacent r3_c7 r3_c8)\n\t(adjacent r3_c7 r4_c7)\n\t(adjacent r3_c8 r2_c8)\n\t(adjacent r3_c8 r3_c7)\n\t(adjacent r3_c8 r3_c9)\n\t(adjacent r3_c8 r4_c8)\n\t(adjacent r3_c9 r2_c9)\n\t(adjacent r3_c9 r3_c8)\n\t(adjacent r3_c9 r4_c9)\n\t(adjacent r4_c0 r3_c0)\n\t(adjacent r4_c0 r4_c1)\n\t(adjacent r4_c0 r5_c0)\n\t(adjacent r4_c1 r3_c1)\n\t(adjacent r4_c1 r4_c0)\n\t(adjacent r4_c1 r4_c2)\n\t(adjacent r4_c1 r5_c1)\n\t(adjacent r4_c2 r3_c2)\n\t(adjacent r4_c2 r4_c1)\n\t(adjacent r4_c2 r4_c3)\n\t(adjacent r4_c2 r5_c2)\n\t(adjacent r4_c3 r3_c3)\n\t(adjacent r4_c3 r4_c2)\n\t(adjacent r4_c3 r4_c4)\n\t(adjacent r4_c3 r5_c3)\n\t(adjacent r4_c4 r3_c4)\n\t(adjacent r4_c4 r4_c3)\n\t(adjacent r4_c4 r4_c5)\n\t(adjacent r4_c4 r5_c4)\n\t(adjacent r4_c5 r3_c5)\n\t(adjacent r4_c5 r4_c4)\n\t(adjacent r4_c5 r4_c6)\n\t(adjacent r4_c5 r5_c5)\n\t(adjacent r4_c6 r3_c6)\n\t(adjacent r4_c6 r4_c5)\n\t(adjacent r4_c6 r4_c7)\n\t(adjacent r4_c6 r5_c6)\n\t(adjacent r4_c7 r3_c7)\n\t(adjacent r4_c7 r4_c6)\n\t(adjacent r4_c7 r4_c8)\n\t(adjacent r4_c7 r5_c7)\n\t(adjacent r4_c8 r3_c8)\n\t(adjacent r4_c8 r4_c7)\n\t(adjacent r4_c8 r4_c9)\n\t(adjacent r4_c8 r5_c8)\n\t(adjacent r4_c9 r3_c9)\n\t(adjacent r4_c9 r4_c8)\n\t(adjacent r4_c9 r5_c9)\n\t(adjacent r5_c0 r4_c0)\n\t(adjacent r5_c0 r5_c1)\n\t(adjacent r5_c0 r6_c0)\n\t(adjacent r5_c1 r4_c1)\n\t(adjacent r5_c1 r5_c0)\n\t(adjacent r5_c1 r5_c2)\n\t(adjacent r5_c1 r6_c1)\n\t(adjacent r5_c2 r4_c2)\n\t(adjacent r5_c2 r5_c1)\n\t(adjacent r5_c2 r5_c3)\n\t(adjacent r5_c2 r6_c2)\n\t(adjacent r5_c3 r4_c3)\n\t(adjacent r5_c3 r5_c2)\n\t(adjacent r5_c3 r5_c4)\n\t(adjacent r5_c3 r6_c3)\n\t(adjacent r5_c4 r4_c4)\n\t(adjacent r5_c4 r5_c3)\n\t(adjacent r5_c4 r5_c5)\n\t(adjacent r5_c4 r6_c4)\n\t(adjacent r5_c5 r4_c5)\n\t(adjacent r5_c5 r5_c4)\n\t(adjacent r5_c5 r5_c6)\n\t(adjacent r5_c5 r6_c5)\n\t(adjacent r5_c6 r4_c6)\n\t(adjacent r5_c6 r5_c5)\n\t(adjacent r5_c6 r5_c7)\n\t(adjacent r5_c6 r6_c6)\n\t(adjacent r5_c7 r4_c7)\n\t(adjacent r5_c7 r5_c6)\n\t(adjacent r5_c7 r5_c8)\n\t(adjacent r5_c7 r6_c7)\n\t(adjacent r5_c8 r4_c8)\n\t(adjacent r5_c8 r5_c7)\n\t(adjacent r5_c8 r5_c9)\n\t(adjacent r5_c8 r6_c8)\n\t(adjacent r5_c9 r4_c9)\n\t(adjacent r5_c9 r5_c8)\n\t(adjacent r5_c9 r6_c9)\n\t(adjacent r6_c0 r5_c0)\n\t(adjacent r6_c0 r6_c1)\n\t(adjacent r6_c0 r7_c0)\n\t(adjacent r6_c1 r5_c1)\n\t(adjacent r6_c1 r6_c0)\n\t(adjacent r6_c1 r6_c2)\n\t(adjacent r6_c1 r7_c1)\n\t(adjacent r6_c2 r5_c2)\n\t(adjacent r6_c2 r6_c1)\n\t(adjacent r6_c2 r6_c3)\n\t(adjacent r6_c2 r7_c2)\n\t(adjacent r6_c3 r5_c3)\n\t(adjacent r6_c3 r6_c2)\n\t(adjacent r6_c3 r6_c4)\n\t(adjacent r6_c3 r7_c3)\n\t(adjacent r6_c4 r5_c4)\n\t(adjacent r6_c4 r6_c3)\n\t(adjacent r6_c4 r6_c5)\n\t(adjacent r6_c4 r7_c4)\n\t(adjacent r6_c5 r5_c5)\n\t(adjacent r6_c5 r6_c4)\n\t(adjacent r6_c5 r6_c6)\n\t(adjacent r6_c5 r7_c5)\n\t(adjacent r6_c6 r5_c6)\n\t(adjacent r6_c6 r6_c5)\n\t(adjacent r6_c6 r6_c7)\n\t(adjacent r6_c6 r7_c6)\n\t(adjacent r6_c7 r5_c7)\n\t(adjacent r6_c7 r6_c6)\n\t(adjacent r6_c7 r6_c8)\n\t(adjacent r6_c7 r7_c7)\n\t(adjacent r6_c8 r5_c8)\n\t(adjacent r6_c8 r6_c7)\n\t(adjacent r6_c8 r6_c9)\n\t(adjacent r6_c8 r7_c8)\n\t(adjacent r6_c9 r5_c9)\n\t(adjacent r6_c9 r6_c8)\n\t(adjacent r6_c9 r7_c9)\n\t(adjacent r7_c0 r6_c0)\n\t(adjacent r7_c0 r7_c1)\n\t(adjacent r7_c1 r6_c1)\n\t(adjacent r7_c1 r7_c0)\n\t(adjacent r7_c1 r7_c2)\n\t(adjacent r7_c2 r6_c2)\n\t(adjacent r7_c2 r7_c1)\n\t(adjacent r7_c2 r7_c3)\n\t(adjacent r7_c3 r6_c3)\n\t(adjacent r7_c3 r7_c2)\n\t(adjacent r7_c3 r7_c4)\n\t(adjacent r7_c4 r6_c4)\n\t(adjacent r7_c4 r7_c3)\n\t(adjacent r7_c4 r7_c5)\n\t(adjacent r7_c5 r6_c5)\n\t(adjacent r7_c5 r7_c4)\n\t(adjacent r7_c5 r7_c6)\n\t(adjacent r7_c6 r6_c6)\n\t(adjacent r7_c6 r7_c5)\n\t(adjacent r7_c6 r7_c7)\n\t(adjacent r7_c7 r6_c7)\n\t(adjacent r7_c7 r7_c6)\n\t(adjacent r7_c7 r7_c8)\n\t(adjacent r7_c8 r6_c8)\n\t(adjacent r7_c8 r7_c7)\n\t(adjacent r7_c8 r7_c9)\n\t(adjacent r7_c9 r6_c9)\n\t(adjacent r7_c9 r7_c8)\n\t(at r7_c1)\n\t(isgoal r4_c9)\n\t(ishill r2_c2)\n\t(ishill r2_c4)\n\t(iswater r0_c6)\n\t(iswater r0_c7)\n\t(iswater r0_c8)\n\t(iswater r0_c9)\n\t(iswater r1_c6)\n\t(iswater r1_c7)\n\t(iswater r1_c8)\n\t(iswater r1_c9)\n\t(iswater r3_c6)\n\t(iswater r3_c7)\n\t(iswater r4_c8)\n\t(iswater r5_c1)\n\t(iswater r5_c4)\n\t(iswater r5_c5)\n\t(iswater r5_c7)\n\t(iswater r5_c8)\n\t(iswater r6_c4)\n\t(iswater r7_c2)\n\t(iswater r7_c7)\n\t(ontrail r2_c0 r2_c1)\n\t(ontrail r2_c1 r2_c2)\n\t(ontrail r2_c2 r2_c3)\n\t(ontrail r2_c3 r2_c4)\n\t(ontrail r2_c4 r2_c5)\n\t(ontrail r2_c5 r2_c6)\n\t(ontrail r2_c6 r2_c7)\n\t(ontrail r2_c7 r2_c8)\n\t(ontrail r2_c8 r2_c9)\n\t(ontrail r2_c9 r3_c9)\n\t(ontrail r3_c0 r2_c0)\n\t(ontrail r3_c9 r4_c9)\n\t(ontrail r4_c0 r3_c0)\n\t(ontrail r5_c0 r4_c0)\n\t(ontrail r6_c0 r5_c0)\n\t(ontrail r7_c0 r6_c0)\n\t(ontrail r7_c1 r7_c0)\n  )\n  (:goal (and\n\t(at r4_c9)))\n)\n",
            "\n(define (problem hiking) (:domain hiking)\n  (:objects\n        r0_c0 - loc\n\tr0_c1 - loc\n\tr0_c2 - loc\n\tr0_c3 - loc\n\tr0_c4 - loc\n\tr0_c5 - loc\n\tr0_c6 - loc\n\tr0_c7 - loc\n\tr0_c8 - loc\n\tr0_c9 - loc\n\tr1_c0 - loc\n\tr1_c1 - loc\n\tr1_c2 - loc\n\tr1_c3 - loc\n\tr1_c4 - loc\n\tr1_c5 - loc\n\tr1_c6 - loc\n\tr1_c7 - loc\n\tr1_c8 - loc\n\tr1_c9 - loc\n\tr2_c0 - loc\n\tr2_c1 - loc\n\tr2_c2 - loc\n\tr2_c3 - loc\n\tr2_c4 - loc\n\tr2_c5 - loc\n\tr2_c6 - loc\n\tr2_c7 - loc\n\tr2_c8 - loc\n\tr2_c9 - loc\n\tr3_c0 - loc\n\tr3_c1 - loc\n\tr3_c2 - loc\n\tr3_c3 - loc\n\tr3_c4 - loc\n\tr3_c5 - loc\n\tr3_c6 - loc\n\tr3_c7 - loc\n\tr3_c8 - loc\n\tr3_c9 - loc\n\tr4_c0 - loc\n\tr4_c1 - loc\n\tr4_c2 - loc\n\tr4_c3 - loc\n\tr4_c4 - loc\n\tr4_c5 - loc\n\tr4_c6 - loc\n\tr4_c7 - loc\n\tr4_c8 - loc\n\tr4_c9 - loc\n\tr5_c0 - loc\n\tr5_c1 - loc\n\tr5_c2 - loc\n\tr5_c3 - loc\n\tr5_c4 - loc\n\tr5_c5 - loc\n\tr5_c6 - loc\n\tr5_c7 - loc\n\tr5_c8 - loc\n\tr5_c9 - loc\n\tr6_c0 - loc\n\tr6_c1 - loc\n\tr6_c2 - loc\n\tr6_c3 - loc\n\tr6_c4 - loc\n\tr6_c5 - loc\n\tr6_c6 - loc\n\tr6_c7 - loc\n\tr6_c8 - loc\n\tr6_c9 - loc\n\tr7_c0 - loc\n\tr7_c1 - loc\n\tr7_c2 - loc\n\tr7_c3 - loc\n\tr7_c4 - loc\n\tr7_c5 - loc\n\tr7_c6 - loc\n\tr7_c7 - loc\n\tr7_c8 - loc\n\tr7_c9 - loc\n  )\n  (:init \n\t(adjacent r0_c0 r0_c1)\n\t(adjacent r0_c0 r1_c0)\n\t(adjacent r0_c1 r0_c0)\n\t(adjacent r0_c1 r0_c2)\n\t(adjacent r0_c1 r1_c1)\n\t(adjacent r0_c2 r0_c1)\n\t(adjacent r0_c2 r0_c3)\n\t(adjacent r0_c2 r1_c2)\n\t(adjacent r0_c3 r0_c2)\n\t(adjacent r0_c3 r0_c4)\n\t(adjacent r0_c3 r1_c3)\n\t(adjacent r0_c4 r0_c3)\n\t(adjacent r0_c4 r0_c5)\n\t(adjacent r0_c4 r1_c4)\n\t(adjacent r0_c5 r0_c4)\n\t(adjacent r0_c5 r0_c6)\n\t(adjacent r0_c5 r1_c5)\n\t(adjacent r0_c6 r0_c5)\n\t(adjacent r0_c6 r0_c7)\n\t(adjacent r0_c6 r1_c6)\n\t(adjacent r0_c7 r0_c6)\n\t(adjacent r0_c7 r0_c8)\n\t(adjacent r0_c7 r1_c7)\n\t(adjacent r0_c8 r0_c7)\n\t(adjacent r0_c8 r0_c9)\n\t(adjacent r0_c8 r1_c8)\n\t(adjacent r0_c9 r0_c8)\n\t(adjacent r0_c9 r1_c9)\n\t(adjacent r1_c0 r0_c0)\n\t(adjacent r1_c0 r1_c1)\n\t(adjacent r1_c0 r2_c0)\n\t(adjacent r1_c1 r0_c1)\n\t(adjacent r1_c1 r1_c0)\n\t(adjacent r1_c1 r1_c2)\n\t(adjacent r1_c1 r2_c1)\n\t(adjacent r1_c2 r0_c2)\n\t(adjacent r1_c2 r1_c1)\n\t(adjacent r1_c2 r1_c3)\n\t(adjacent r1_c2 r2_c2)\n\t(adjacent r1_c3 r0_c3)\n\t(adjacent r1_c3 r1_c2)\n\t(adjacent r1_c3 r1_c4)\n\t(adjacent r1_c3 r2_c3)\n\t(adjacent r1_c4 r0_c4)\n\t(adjacent r1_c4 r1_c3)\n\t(adjacent r1_c4 r1_c5)\n\t(adjacent r1_c4 r2_c4)\n\t(adjacent r1_c5 r0_c5)\n\t(adjacent r1_c5 r1_c4)\n\t(adjacent r1_c5 r1_c6)\n\t(adjacent r1_c5 r2_c5)\n\t(adjacent r1_c6 r0_c6)\n\t(adjacent r1_c6 r1_c5)\n\t(adjacent r1_c6 r1_c7)\n\t(adjacent r1_c6 r2_c6)\n\t(adjacent r1_c7 r0_c7)\n\t(adjacent r1_c7 r1_c6)\n\t(adjacent r1_c7 r1_c8)\n\t(adjacent r1_c7 r2_c7)\n\t(adjacent r1_c8 r0_c8)\n\t(adjacent r1_c8 r1_c7)\n\t(adjacent r1_c8 r1_c9)\n\t(adjacent r1_c8 r2_c8)\n\t(adjacent r1_c9 r0_c9)\n\t(adjacent r1_c9 r1_c8)\n\t(adjacent r1_c9 r2_c9)\n\t(adjacent r2_c0 r1_c0)\n\t(adjacent r2_c0 r2_c1)\n\t(adjacent r2_c0 r3_c0)\n\t(adjacent r2_c1 r1_c1)\n\t(adjacent r2_c1 r2_c0)\n\t(adjacent r2_c1 r2_c2)\n\t(adjacent r2_c1 r3_c1)\n\t(adjacent r2_c2 r1_c2)\n\t(adjacent r2_c2 r2_c1)\n\t(adjacent r2_c2 r2_c3)\n\t(adjacent r2_c2 r3_c2)\n\t(adjacent r2_c3 r1_c3)\n\t(adjacent r2_c3 r2_c2)\n\t(adjacent r2_c3 r2_c4)\n\t(adjacent r2_c3 r3_c3)\n\t(adjacent r2_c4 r1_c4)\n\t(adjacent r2_c4 r2_c3)\n\t(adjacent r2_c4 r2_c5)\n\t(adjacent r2_c4 r3_c4)\n\t(adjacent r2_c5 r1_c5)\n\t(adjacent r2_c5 r2_c4)\n\t(adjacent r2_c5 r2_c6)\n\t(adjacent r2_c5 r3_c5)\n\t(adjacent r2_c6 r1_c6)\n\t(adjacent r2_c6 r2_c5)\n\t(adjacent r2_c6 r2_c7)\n\t(adjacent r2_c6 r3_c6)\n\t(adjacent r2_c7 r1_c7)\n\t(adjacent r2_c7 r2_c6)\n\t(adjacent r2_c7 r2_c8)\n\t(adjacent r2_c7 r3_c7)\n\t(adjacent r2_c8 r1_c8)\n\t(adjacent r2_c8 r2_c7)\n\t(adjacent r2_c8 r2_c9)\n\t(adjacent r2_c8 r3_c8)\n\t(adjacent r2_c9 r1_c9)\n\t(adjacent r2_c9 r2_c8)\n\t(adjacent r2_c9 r3_c9)\n\t(adjacent r3_c0 r2_c0)\n\t(adjacent r3_c0 r3_c1)\n\t(adjacent r3_c0 r4_c0)\n\t(adjacent r3_c1 r2_c1)\n\t(adjacent r3_c1 r3_c0)\n\t(adjacent r3_c1 r3_c2)\n\t(adjacent r3_c1 r4_c1)\n\t(adjacent r3_c2 r2_c2)\n\t(adjacent r3_c2 r3_c1)\n\t(adjacent r3_c2 r3_c3)\n\t(adjacent r3_c2 r4_c2)\n\t(adjacent r3_c3 r2_c3)\n\t(adjacent r3_c3 r3_c2)\n\t(adjacent r3_c3 r3_c4)\n\t(adjacent r3_c3 r4_c3)\n\t(adjacent r3_c4 r2_c4)\n\t(adjacent r3_c4 r3_c3)\n\t(adjacent r3_c4 r3_c5)\n\t(adjacent r3_c4 r4_c4)\n\t(adjacent r3_c5 r2_c5)\n\t(adjacent r3_c5 r3_c4)\n\t(adjacent r3_c5 r3_c6)\n\t(adjacent r3_c5 r4_c5)\n\t(adjacent r3_c6 r2_c6)\n\t(adjacent r3_c6 r3_c5)\n\t(adjacent r3_c6 r3_c7)\n\t(adjacent r3_c6 r4_c6)\n\t(adjacent r3_c7 r2_c7)\n\t(adjacent r3_c7 r3_c6)\n\t(adjacent r3_c7 r3_c8)\n\t(adjacent r3_c7 r4_c7)\n\t(adjacent r3_c8 r2_c8)\n\t(adjacent r3_c8 r3_c7)\n\t(adjacent r3_c8 r3_c9)\n\t(adjacent r3_c8 r4_c8)\n\t(adjacent r3_c9 r2_c9)\n\t(adjacent r3_c9 r3_c8)\n\t(adjacent r3_c9 r4_c9)\n\t(adjacent r4_c0 r3_c0)\n\t(adjacent r4_c0 r4_c1)\n\t(adjacent r4_c0 r5_c0)\n\t(adjacent r4_c1 r3_c1)\n\t(adjacent r4_c1 r4_c0)\n\t(adjacent r4_c1 r4_c2)\n\t(adjacent r4_c1 r5_c1)\n\t(adjacent r4_c2 r3_c2)\n\t(adjacent r4_c2 r4_c1)\n\t(adjacent r4_c2 r4_c3)\n\t(adjacent r4_c2 r5_c2)\n\t(adjacent r4_c3 r3_c3)\n\t(adjacent r4_c3 r4_c2)\n\t(adjacent r4_c3 r4_c4)\n\t(adjacent r4_c3 r5_c3)\n\t(adjacent r4_c4 r3_c4)\n\t(adjacent r4_c4 r4_c3)\n\t(adjacent r4_c4 r4_c5)\n\t(adjacent r4_c4 r5_c4)\n\t(adjacent r4_c5 r3_c5)\n\t(adjacent r4_c5 r4_c4)\n\t(adjacent r4_c5 r4_c6)\n\t(adjacent r4_c5 r5_c5)\n\t(adjacent r4_c6 r3_c6)\n\t(adjacent r4_c6 r4_c5)\n\t(adjacent r4_c6 r4_c7)\n\t(adjacent r4_c6 r5_c6)\n\t(adjacent r4_c7 r3_c7)\n\t(adjacent r4_c7 r4_c6)\n\t(adjacent r4_c7 r4_c8)\n\t(adjacent r4_c7 r5_c7)\n\t(adjacent r4_c8 r3_c8)\n\t(adjacent r4_c8 r4_c7)\n\t(adjacent r4_c8 r4_c9)\n\t(adjacent r4_c8 r5_c8)\n\t(adjacent r4_c9 r3_c9)\n\t(adjacent r4_c9 r4_c8)\n\t(adjacent r4_c9 r5_c9)\n\t(adjacent r5_c0 r4_c0)\n\t(adjacent r5_c0 r5_c1)\n\t(adjacent r5_c0 r6_c0)\n\t(adjacent r5_c1 r4_c1)\n\t(adjacent r5_c1 r5_c0)\n\t(adjacent r5_c1 r5_c2)\n\t(adjacent r5_c1 r6_c1)\n\t(adjacent r5_c2 r4_c2)\n\t(adjacent r5_c2 r5_c1)\n\t(adjacent r5_c2 r5_c3)\n\t(adjacent r5_c2 r6_c2)\n\t(adjacent r5_c3 r4_c3)\n\t(adjacent r5_c3 r5_c2)\n\t(adjacent r5_c3 r5_c4)\n\t(adjacent r5_c3 r6_c3)\n\t(adjacent r5_c4 r4_c4)\n\t(adjacent r5_c4 r5_c3)\n\t(adjacent r5_c4 r5_c5)\n\t(adjacent r5_c4 r6_c4)\n\t(adjacent r5_c5 r4_c5)\n\t(adjacent r5_c5 r5_c4)\n\t(adjacent r5_c5 r5_c6)\n\t(adjacent r5_c5 r6_c5)\n\t(adjacent r5_c6 r4_c6)\n\t(adjacent r5_c6 r5_c5)\n\t(adjacent r5_c6 r5_c7)\n\t(adjacent r5_c6 r6_c6)\n\t(adjacent r5_c7 r4_c7)\n\t(adjacent r5_c7 r5_c6)\n\t(adjacent r5_c7 r5_c8)\n\t(adjacent r5_c7 r6_c7)\n\t(adjacent r5_c8 r4_c8)\n\t(adjacent r5_c8 r5_c7)\n\t(adjacent r5_c8 r5_c9)\n\t(adjacent r5_c8 r6_c8)\n\t(adjacent r5_c9 r4_c9)\n\t(adjacent r5_c9 r5_c8)\n\t(adjacent r5_c9 r6_c9)\n\t(adjacent r6_c0 r5_c0)\n\t(adjacent r6_c0 r6_c1)\n\t(adjacent r6_c0 r7_c0)\n\t(adjacent r6_c1 r5_c1)\n\t(adjacent r6_c1 r6_c0)\n\t(adjacent r6_c1 r6_c2)\n\t(adjacent r6_c1 r7_c1)\n\t(adjacent r6_c2 r5_c2)\n\t(adjacent r6_c2 r6_c1)\n\t(adjacent r6_c2 r6_c3)\n\t(adjacent r6_c2 r7_c2)\n\t(adjacent r6_c3 r5_c3)\n\t(adjacent r6_c3 r6_c2)\n\t(adjacent r6_c3 r6_c4)\n\t(adjacent r6_c3 r7_c3)\n\t(adjacent r6_c4 r5_c4)\n\t(adjacent r6_c4 r6_c3)\n\t(adjacent r6_c4 r6_c5)\n\t(adjacent r6_c4 r7_c4)\n\t(adjacent r6_c5 r5_c5)\n\t(adjacent r6_c5 r6_c4)\n\t(adjacent r6_c5 r6_c6)\n\t(adjacent r6_c5 r7_c5)\n\t(adjacent r6_c6 r5_c6)\n\t(adjacent r6_c6 r6_c5)\n\t(adjacent r6_c6 r6_c7)\n\t(adjacent r6_c6 r7_c6)\n\t(adjacent r6_c7 r5_c7)\n\t(adjacent r6_c7 r6_c6)\n\t(adjacent r6_c7 r6_c8)\n\t(adjacent r6_c7 r7_c7)\n\t(adjacent r6_c8 r5_c8)\n\t(adjacent r6_c8 r6_c7)\n\t(adjacent r6_c8 r6_c9)\n\t(adjacent r6_c8 r7_c8)\n\t(adjacent r6_c9 r5_c9)\n\t(adjacent r6_c9 r6_c8)\n\t(adjacent r6_c9 r7_c9)\n\t(adjacent r7_c0 r6_c0)\n\t(adjacent r7_c0 r7_c1)\n\t(adjacent r7_c1 r6_c1)\n\t(adjacent r7_c1 r7_c0)\n\t(adjacent r7_c1 r7_c2)\n\t(adjacent r7_c2 r6_c2)\n\t(adjacent r7_c2 r7_c1)\n\t(adjacent r7_c2 r7_c3)\n\t(adjacent r7_c3 r6_c3)\n\t(adjacent r7_c3 r7_c2)\n\t(adjacent r7_c3 r7_c4)\n\t(adjacent r7_c4 r6_c4)\n\t(adjacent r7_c4 r7_c3)\n\t(adjacent r7_c4 r7_c5)\n\t(adjacent r7_c5 r6_c5)\n\t(adjacent r7_c5 r7_c4)\n\t(adjacent r7_c5 r7_c6)\n\t(adjacent r7_c6 r6_c6)\n\t(adjacent r7_c6 r7_c5)\n\t(adjacent r7_c6 r7_c7)\n\t(adjacent r7_c7 r6_c7)\n\t(adjacent r7_c7 r7_c6)\n\t(adjacent r7_c7 r7_c8)\n\t(adjacent r7_c8 r6_c8)\n\t(adjacent r7_c8 r7_c7)\n\t(adjacent r7_c8 r7_c9)\n\t(adjacent r7_c9 r6_c9)\n\t(adjacent r7_c9 r7_c8)\n\t(at r0_c0)\n\t(isgoal r0_c9)\n\t(ishill r7_c4)\n\t(ishill r7_c7)\n\t(iswater r0_c7)\n\t(iswater r0_c8)\n\t(iswater r1_c0)\n\t(iswater r1_c1)\n\t(iswater r1_c5)\n\t(iswater r1_c6)\n\t(iswater r2_c0)\n\t(iswater r2_c1)\n\t(iswater r2_c6)\n\t(iswater r3_c0)\n\t(iswater r3_c1)\n\t(iswater r4_c0)\n\t(iswater r4_c1)\n\t(iswater r4_c5)\n\t(iswater r4_c6)\n\t(iswater r5_c0)\n\t(iswater r5_c1)\n\t(iswater r5_c5)\n\t(iswater r5_c6)\n\t(iswater r6_c0)\n\t(iswater r6_c1)\n\t(iswater r6_c6)\n\t(iswater r7_c0)\n\t(iswater r7_c1)\n\t(ontrail r0_c0 r0_c1)\n\t(ontrail r0_c1 r0_c2)\n\t(ontrail r0_c2 r0_c3)\n\t(ontrail r0_c3 r1_c3)\n\t(ontrail r1_c3 r2_c3)\n\t(ontrail r1_c9 r0_c9)\n\t(ontrail r2_c3 r3_c3)\n\t(ontrail r2_c9 r1_c9)\n\t(ontrail r3_c3 r4_c3)\n\t(ontrail r3_c9 r2_c9)\n\t(ontrail r4_c3 r5_c3)\n\t(ontrail r4_c9 r3_c9)\n\t(ontrail r5_c3 r6_c3)\n\t(ontrail r5_c9 r4_c9)\n\t(ontrail r6_c3 r7_c3)\n\t(ontrail r6_c9 r5_c9)\n\t(ontrail r7_c3 r7_c4)\n\t(ontrail r7_c4 r7_c5)\n\t(ontrail r7_c5 r7_c6)\n\t(ontrail r7_c6 r7_c7)\n\t(ontrail r7_c7 r7_c8)\n\t(ontrail r7_c8 r7_c9)\n\t(ontrail r7_c9 r6_c9)\n  )\n  (:goal (and\n\t(at r0_c9)))\n)\n",
            "\n(define (problem hiking) (:domain hiking)\n  (:objects\n        r0_c0 - loc\n\tr0_c1 - loc\n\tr0_c2 - loc\n\tr0_c3 - loc\n\tr0_c4 - loc\n\tr0_c5 - loc\n\tr0_c6 - loc\n\tr0_c7 - loc\n\tr0_c8 - loc\n\tr0_c9 - loc\n\tr1_c0 - loc\n\tr1_c1 - loc\n\tr1_c2 - loc\n\tr1_c3 - loc\n\tr1_c4 - loc\n\tr1_c5 - loc\n\tr1_c6 - loc\n\tr1_c7 - loc\n\tr1_c8 - loc\n\tr1_c9 - loc\n\tr2_c0 - loc\n\tr2_c1 - loc\n\tr2_c2 - loc\n\tr2_c3 - loc\n\tr2_c4 - loc\n\tr2_c5 - loc\n\tr2_c6 - loc\n\tr2_c7 - loc\n\tr2_c8 - loc\n\tr2_c9 - loc\n\tr3_c0 - loc\n\tr3_c1 - loc\n\tr3_c2 - loc\n\tr3_c3 - loc\n\tr3_c4 - loc\n\tr3_c5 - loc\n\tr3_c6 - loc\n\tr3_c7 - loc\n\tr3_c8 - loc\n\tr3_c9 - loc\n\tr4_c0 - loc\n\tr4_c1 - loc\n\tr4_c2 - loc\n\tr4_c3 - loc\n\tr4_c4 - loc\n\tr4_c5 - loc\n\tr4_c6 - loc\n\tr4_c7 - loc\n\tr4_c8 - loc\n\tr4_c9 - loc\n\tr5_c0 - loc\n\tr5_c1 - loc\n\tr5_c2 - loc\n\tr5_c3 - loc\n\tr5_c4 - loc\n\tr5_c5 - loc\n\tr5_c6 - loc\n\tr5_c7 - loc\n\tr5_c8 - loc\n\tr5_c9 - loc\n\tr6_c0 - loc\n\tr6_c1 - loc\n\tr6_c2 - loc\n\tr6_c3 - loc\n\tr6_c4 - loc\n\tr6_c5 - loc\n\tr6_c6 - loc\n\tr6_c7 - loc\n\tr6_c8 - loc\n\tr6_c9 - loc\n\tr7_c0 - loc\n\tr7_c1 - loc\n\tr7_c2 - loc\n\tr7_c3 - loc\n\tr7_c4 - loc\n\tr7_c5 - loc\n\tr7_c6 - loc\n\tr7_c7 - loc\n\tr7_c8 - loc\n\tr7_c9 - loc\n\tr8_c0 - loc\n\tr8_c1 - loc\n\tr8_c2 - loc\n\tr8_c3 - loc\n\tr8_c4 - loc\n\tr8_c5 - loc\n\tr8_c6 - loc\n\tr8_c7 - loc\n\tr8_c8 - loc\n\tr8_c9 - loc\n  )\n  (:init \n\t(adjacent r0_c0 r0_c1)\n\t(adjacent r0_c0 r1_c0)\n\t(adjacent r0_c1 r0_c0)\n\t(adjacent r0_c1 r0_c2)\n\t(adjacent r0_c1 r1_c1)\n\t(adjacent r0_c2 r0_c1)\n\t(adjacent r0_c2 r0_c3)\n\t(adjacent r0_c2 r1_c2)\n\t(adjacent r0_c3 r0_c2)\n\t(adjacent r0_c3 r0_c4)\n\t(adjacent r0_c3 r1_c3)\n\t(adjacent r0_c4 r0_c3)\n\t(adjacent r0_c4 r0_c5)\n\t(adjacent r0_c4 r1_c4)\n\t(adjacent r0_c5 r0_c4)\n\t(adjacent r0_c5 r0_c6)\n\t(adjacent r0_c5 r1_c5)\n\t(adjacent r0_c6 r0_c5)\n\t(adjacent r0_c6 r0_c7)\n\t(adjacent r0_c6 r1_c6)\n\t(adjacent r0_c7 r0_c6)\n\t(adjacent r0_c7 r0_c8)\n\t(adjacent r0_c7 r1_c7)\n\t(adjacent r0_c8 r0_c7)\n\t(adjacent r0_c8 r0_c9)\n\t(adjacent r0_c8 r1_c8)\n\t(adjacent r0_c9 r0_c8)\n\t(adjacent r0_c9 r1_c9)\n\t(adjacent r1_c0 r0_c0)\n\t(adjacent r1_c0 r1_c1)\n\t(adjacent r1_c0 r2_c0)\n\t(adjacent r1_c1 r0_c1)\n\t(adjacent r1_c1 r1_c0)\n\t(adjacent r1_c1 r1_c2)\n\t(adjacent r1_c1 r2_c1)\n\t(adjacent r1_c2 r0_c2)\n\t(adjacent r1_c2 r1_c1)\n\t(adjacent r1_c2 r1_c3)\n\t(adjacent r1_c2 r2_c2)\n\t(adjacent r1_c3 r0_c3)\n\t(adjacent r1_c3 r1_c2)\n\t(adjacent r1_c3 r1_c4)\n\t(adjacent r1_c3 r2_c3)\n\t(adjacent r1_c4 r0_c4)\n\t(adjacent r1_c4 r1_c3)\n\t(adjacent r1_c4 r1_c5)\n\t(adjacent r1_c4 r2_c4)\n\t(adjacent r1_c5 r0_c5)\n\t(adjacent r1_c5 r1_c4)\n\t(adjacent r1_c5 r1_c6)\n\t(adjacent r1_c5 r2_c5)\n\t(adjacent r1_c6 r0_c6)\n\t(adjacent r1_c6 r1_c5)\n\t(adjacent r1_c6 r1_c7)\n\t(adjacent r1_c6 r2_c6)\n\t(adjacent r1_c7 r0_c7)\n\t(adjacent r1_c7 r1_c6)\n\t(adjacent r1_c7 r1_c8)\n\t(adjacent r1_c7 r2_c7)\n\t(adjacent r1_c8 r0_c8)\n\t(adjacent r1_c8 r1_c7)\n\t(adjacent r1_c8 r1_c9)\n\t(adjacent r1_c8 r2_c8)\n\t(adjacent r1_c9 r0_c9)\n\t(adjacent r1_c9 r1_c8)\n\t(adjacent r1_c9 r2_c9)\n\t(adjacent r2_c0 r1_c0)\n\t(adjacent r2_c0 r2_c1)\n\t(adjacent r2_c0 r3_c0)\n\t(adjacent r2_c1 r1_c1)\n\t(adjacent r2_c1 r2_c0)\n\t(adjacent r2_c1 r2_c2)\n\t(adjacent r2_c1 r3_c1)\n\t(adjacent r2_c2 r1_c2)\n\t(adjacent r2_c2 r2_c1)\n\t(adjacent r2_c2 r2_c3)\n\t(adjacent r2_c2 r3_c2)\n\t(adjacent r2_c3 r1_c3)\n\t(adjacent r2_c3 r2_c2)\n\t(adjacent r2_c3 r2_c4)\n\t(adjacent r2_c3 r3_c3)\n\t(adjacent r2_c4 r1_c4)\n\t(adjacent r2_c4 r2_c3)\n\t(adjacent r2_c4 r2_c5)\n\t(adjacent r2_c4 r3_c4)\n\t(adjacent r2_c5 r1_c5)\n\t(adjacent r2_c5 r2_c4)\n\t(adjacent r2_c5 r2_c6)\n\t(adjacent r2_c5 r3_c5)\n\t(adjacent r2_c6 r1_c6)\n\t(adjacent r2_c6 r2_c5)\n\t(adjacent r2_c6 r2_c7)\n\t(adjacent r2_c6 r3_c6)\n\t(adjacent r2_c7 r1_c7)\n\t(adjacent r2_c7 r2_c6)\n\t(adjacent r2_c7 r2_c8)\n\t(adjacent r2_c7 r3_c7)\n\t(adjacent r2_c8 r1_c8)\n\t(adjacent r2_c8 r2_c7)\n\t(adjacent r2_c8 r2_c9)\n\t(adjacent r2_c8 r3_c8)\n\t(adjacent r2_c9 r1_c9)\n\t(adjacent r2_c9 r2_c8)\n\t(adjacent r2_c9 r3_c9)\n\t(adjacent r3_c0 r2_c0)\n\t(adjacent r3_c0 r3_c1)\n\t(adjacent r3_c0 r4_c0)\n\t(adjacent r3_c1 r2_c1)\n\t(adjacent r3_c1 r3_c0)\n\t(adjacent r3_c1 r3_c2)\n\t(adjacent r3_c1 r4_c1)\n\t(adjacent r3_c2 r2_c2)\n\t(adjacent r3_c2 r3_c1)\n\t(adjacent r3_c2 r3_c3)\n\t(adjacent r3_c2 r4_c2)\n\t(adjacent r3_c3 r2_c3)\n\t(adjacent r3_c3 r3_c2)\n\t(adjacent r3_c3 r3_c4)\n\t(adjacent r3_c3 r4_c3)\n\t(adjacent r3_c4 r2_c4)\n\t(adjacent r3_c4 r3_c3)\n\t(adjacent r3_c4 r3_c5)\n\t(adjacent r3_c4 r4_c4)\n\t(adjacent r3_c5 r2_c5)\n\t(adjacent r3_c5 r3_c4)\n\t(adjacent r3_c5 r3_c6)\n\t(adjacent r3_c5 r4_c5)\n\t(adjacent r3_c6 r2_c6)\n\t(adjacent r3_c6 r3_c5)\n\t(adjacent r3_c6 r3_c7)\n\t(adjacent r3_c6 r4_c6)\n\t(adjacent r3_c7 r2_c7)\n\t(adjacent r3_c7 r3_c6)\n\t(adjacent r3_c7 r3_c8)\n\t(adjacent r3_c7 r4_c7)\n\t(adjacent r3_c8 r2_c8)\n\t(adjacent r3_c8 r3_c7)\n\t(adjacent r3_c8 r3_c9)\n\t(adjacent r3_c8 r4_c8)\n\t(adjacent r3_c9 r2_c9)\n\t(adjacent r3_c9 r3_c8)\n\t(adjacent r3_c9 r4_c9)\n\t(adjacent r4_c0 r3_c0)\n\t(adjacent r4_c0 r4_c1)\n\t(adjacent r4_c0 r5_c0)\n\t(adjacent r4_c1 r3_c1)\n\t(adjacent r4_c1 r4_c0)\n\t(adjacent r4_c1 r4_c2)\n\t(adjacent r4_c1 r5_c1)\n\t(adjacent r4_c2 r3_c2)\n\t(adjacent r4_c2 r4_c1)\n\t(adjacent r4_c2 r4_c3)\n\t(adjacent r4_c2 r5_c2)\n\t(adjacent r4_c3 r3_c3)\n\t(adjacent r4_c3 r4_c2)\n\t(adjacent r4_c3 r4_c4)\n\t(adjacent r4_c3 r5_c3)\n\t(adjacent r4_c4 r3_c4)\n\t(adjacent r4_c4 r4_c3)\n\t(adjacent r4_c4 r4_c5)\n\t(adjacent r4_c4 r5_c4)\n\t(adjacent r4_c5 r3_c5)\n\t(adjacent r4_c5 r4_c4)\n\t(adjacent r4_c5 r4_c6)\n\t(adjacent r4_c5 r5_c5)\n\t(adjacent r4_c6 r3_c6)\n\t(adjacent r4_c6 r4_c5)\n\t(adjacent r4_c6 r4_c7)\n\t(adjacent r4_c6 r5_c6)\n\t(adjacent r4_c7 r3_c7)\n\t(adjacent r4_c7 r4_c6)\n\t(adjacent r4_c7 r4_c8)\n\t(adjacent r4_c7 r5_c7)\n\t(adjacent r4_c8 r3_c8)\n\t(adjacent r4_c8 r4_c7)\n\t(adjacent r4_c8 r4_c9)\n\t(adjacent r4_c8 r5_c8)\n\t(adjacent r4_c9 r3_c9)\n\t(adjacent r4_c9 r4_c8)\n\t(adjacent r4_c9 r5_c9)\n\t(adjacent r5_c0 r4_c0)\n\t(adjacent r5_c0 r5_c1)\n\t(adjacent r5_c0 r6_c0)\n\t(adjacent r5_c1 r4_c1)\n\t(adjacent r5_c1 r5_c0)\n\t(adjacent r5_c1 r5_c2)\n\t(adjacent r5_c1 r6_c1)\n\t(adjacent r5_c2 r4_c2)\n\t(adjacent r5_c2 r5_c1)\n\t(adjacent r5_c2 r5_c3)\n\t(adjacent r5_c2 r6_c2)\n\t(adjacent r5_c3 r4_c3)\n\t(adjacent r5_c3 r5_c2)\n\t(adjacent r5_c3 r5_c4)\n\t(adjacent r5_c3 r6_c3)\n\t(adjacent r5_c4 r4_c4)\n\t(adjacent r5_c4 r5_c3)\n\t(adjacent r5_c4 r5_c5)\n\t(adjacent r5_c4 r6_c4)\n\t(adjacent r5_c5 r4_c5)\n\t(adjacent r5_c5 r5_c4)\n\t(adjacent r5_c5 r5_c6)\n\t(adjacent r5_c5 r6_c5)\n\t(adjacent r5_c6 r4_c6)\n\t(adjacent r5_c6 r5_c5)\n\t(adjacent r5_c6 r5_c7)\n\t(adjacent r5_c6 r6_c6)\n\t(adjacent r5_c7 r4_c7)\n\t(adjacent r5_c7 r5_c6)\n\t(adjacent r5_c7 r5_c8)\n\t(adjacent r5_c7 r6_c7)\n\t(adjacent r5_c8 r4_c8)\n\t(adjacent r5_c8 r5_c7)\n\t(adjacent r5_c8 r5_c9)\n\t(adjacent r5_c8 r6_c8)\n\t(adjacent r5_c9 r4_c9)\n\t(adjacent r5_c9 r5_c8)\n\t(adjacent r5_c9 r6_c9)\n\t(adjacent r6_c0 r5_c0)\n\t(adjacent r6_c0 r6_c1)\n\t(adjacent r6_c0 r7_c0)\n\t(adjacent r6_c1 r5_c1)\n\t(adjacent r6_c1 r6_c0)\n\t(adjacent r6_c1 r6_c2)\n\t(adjacent r6_c1 r7_c1)\n\t(adjacent r6_c2 r5_c2)\n\t(adjacent r6_c2 r6_c1)\n\t(adjacent r6_c2 r6_c3)\n\t(adjacent r6_c2 r7_c2)\n\t(adjacent r6_c3 r5_c3)\n\t(adjacent r6_c3 r6_c2)\n\t(adjacent r6_c3 r6_c4)\n\t(adjacent r6_c3 r7_c3)\n\t(adjacent r6_c4 r5_c4)\n\t(adjacent r6_c4 r6_c3)\n\t(adjacent r6_c4 r6_c5)\n\t(adjacent r6_c4 r7_c4)\n\t(adjacent r6_c5 r5_c5)\n\t(adjacent r6_c5 r6_c4)\n\t(adjacent r6_c5 r6_c6)\n\t(adjacent r6_c5 r7_c5)\n\t(adjacent r6_c6 r5_c6)\n\t(adjacent r6_c6 r6_c5)\n\t(adjacent r6_c6 r6_c7)\n\t(adjacent r6_c6 r7_c6)\n\t(adjacent r6_c7 r5_c7)\n\t(adjacent r6_c7 r6_c6)\n\t(adjacent r6_c7 r6_c8)\n\t(adjacent r6_c7 r7_c7)\n\t(adjacent r6_c8 r5_c8)\n\t(adjacent r6_c8 r6_c7)\n\t(adjacent r6_c8 r6_c9)\n\t(adjacent r6_c8 r7_c8)\n\t(adjacent r6_c9 r5_c9)\n\t(adjacent r6_c9 r6_c8)\n\t(adjacent r6_c9 r7_c9)\n\t(adjacent r7_c0 r6_c0)\n\t(adjacent r7_c0 r7_c1)\n\t(adjacent r7_c0 r8_c0)\n\t(adjacent r7_c1 r6_c1)\n\t(adjacent r7_c1 r7_c0)\n\t(adjacent r7_c1 r7_c2)\n\t(adjacent r7_c1 r8_c1)\n\t(adjacent r7_c2 r6_c2)\n\t(adjacent r7_c2 r7_c1)\n\t(adjacent r7_c2 r7_c3)\n\t(adjacent r7_c2 r8_c2)\n\t(adjacent r7_c3 r6_c3)\n\t(adjacent r7_c3 r7_c2)\n\t(adjacent r7_c3 r7_c4)\n\t(adjacent r7_c3 r8_c3)\n\t(adjacent r7_c4 r6_c4)\n\t(adjacent r7_c4 r7_c3)\n\t(adjacent r7_c4 r7_c5)\n\t(adjacent r7_c4 r8_c4)\n\t(adjacent r7_c5 r6_c5)\n\t(adjacent r7_c5 r7_c4)\n\t(adjacent r7_c5 r7_c6)\n\t(adjacent r7_c5 r8_c5)\n\t(adjacent r7_c6 r6_c6)\n\t(adjacent r7_c6 r7_c5)\n\t(adjacent r7_c6 r7_c7)\n\t(adjacent r7_c6 r8_c6)\n\t(adjacent r7_c7 r6_c7)\n\t(adjacent r7_c7 r7_c6)\n\t(adjacent r7_c7 r7_c8)\n\t(adjacent r7_c7 r8_c7)\n\t(adjacent r7_c8 r6_c8)\n\t(adjacent r7_c8 r7_c7)\n\t(adjacent r7_c8 r7_c9)\n\t(adjacent r7_c8 r8_c8)\n\t(adjacent r7_c9 r6_c9)\n\t(adjacent r7_c9 r7_c8)\n\t(adjacent r7_c9 r8_c9)\n\t(adjacent r8_c0 r7_c0)\n\t(adjacent r8_c0 r8_c1)\n\t(adjacent r8_c1 r7_c1)\n\t(adjacent r8_c1 r8_c0)\n\t(adjacent r8_c1 r8_c2)\n\t(adjacent r8_c2 r7_c2)\n\t(adjacent r8_c2 r8_c1)\n\t(adjacent r8_c2 r8_c3)\n\t(adjacent r8_c3 r7_c3)\n\t(adjacent r8_c3 r8_c2)\n\t(adjacent r8_c3 r8_c4)\n\t(adjacent r8_c4 r7_c4)\n\t(adjacent r8_c4 r8_c3)\n\t(adjacent r8_c4 r8_c5)\n\t(adjacent r8_c5 r7_c5)\n\t(adjacent r8_c5 r8_c4)\n\t(adjacent r8_c5 r8_c6)\n\t(adjacent r8_c6 r7_c6)\n\t(adjacent r8_c6 r8_c5)\n\t(adjacent r8_c6 r8_c7)\n\t(adjacent r8_c7 r7_c7)\n\t(adjacent r8_c7 r8_c6)\n\t(adjacent r8_c7 r8_c8)\n\t(adjacent r8_c8 r7_c8)\n\t(adjacent r8_c8 r8_c7)\n\t(adjacent r8_c8 r8_c9)\n\t(adjacent r8_c9 r7_c9)\n\t(adjacent r8_c9 r8_c8)\n\t(at r4_c0)\n\t(isgoal r6_c7)\n\t(ishill r7_c1)\n\t(iswater r1_c4)\n\t(iswater r1_c5)\n\t(iswater r2_c4)\n\t(iswater r2_c5)\n\t(iswater r4_c4)\n\t(iswater r4_c5)\n\t(iswater r6_c4)\n\t(iswater r6_c5)\n\t(iswater r7_c4)\n\t(iswater r7_c5)\n\t(ontrail r4_c0 r4_c1)\n\t(ontrail r4_c1 r5_c1)\n\t(ontrail r5_c1 r6_c1)\n\t(ontrail r6_c1 r7_c1)\n\t(ontrail r7_c1 r8_c1)\n\t(ontrail r7_c7 r6_c7)\n\t(ontrail r8_c1 r8_c2)\n\t(ontrail r8_c2 r8_c3)\n\t(ontrail r8_c3 r8_c4)\n\t(ontrail r8_c4 r8_c5)\n\t(ontrail r8_c5 r8_c6)\n\t(ontrail r8_c6 r8_c7)\n\t(ontrail r8_c7 r7_c7)\n  )\n  (:goal (and\n\t(at r6_c7)))\n)\n",
            "(define (problem hiking) (:domain hiking)\n  (:objects\n        loc1 - loc\n\tloc2 - loc\n\tloc3 - loc\n\tloc4 - loc\n\tloc5 - loc\n\tloc6 - loc\n\tloc7 - loc\n\tloc8 - loc\n\tloc9 - loc\n  )\n  (:init \n\t(adjacent loc1 loc2)\n\t(adjacent loc1 loc3)\n\t(adjacent loc2 loc1)\n\t(adjacent loc2 loc4)\n\t(adjacent loc3 loc1)\n\t(adjacent loc3 loc5)\n\t(adjacent loc4 loc2)\n\t(adjacent loc4 loc6)\n\t(adjacent loc5 loc3)\n\t(adjacent loc5 loc7)\n\t(adjacent loc6 loc4)\n\t(adjacent loc6 loc8)\n\t(adjacent loc7 loc5)\n\t(adjacent loc7 loc9)\n\t(adjacent loc8 loc6)\n\t(adjacent loc8 loc9)\n\t(adjacent loc9 loc7)\n\t(at loc1)\n\t(isgoal loc9)\n\t(ishill loc3)\n\t(iswater loc2)\n\t(iswater loc4)\n\t(iswater loc6)\n\t(ontrail loc1 loc2)\n\t(ontrail loc2 loc4)\n\t(ontrail loc3 loc5)\n\t(ontrail loc4 loc6)\n\t(ontrail loc5 loc7)\n\t(ontrail loc6 loc8)\n\t(ontrail loc7 loc9)\n  )\n  (:goal (and\n\t(at loc9)))\n)",
            "\n(define (problem hiking) (:domain hiking)\n  (:objects\n        r0_c0 - loc\n\tr0_c1 - loc\n\tr0_c2 - loc\n\tr0_c3 - loc\n\tr0_c4 - loc\n\tr0_c5 - loc\n\tr0_c6 - loc\n\tr0_c7 - loc\n\tr0_c8 - loc\n\tr0_c9 - loc\n\tr1_c0 - loc\n\tr1_c1 - loc\n\tr1_c2 - loc\n\tr1_c3 - loc\n\tr1_c4 - loc\n\tr1_c5 - loc\n\tr1_c6 - loc\n\tr1_c7 - loc\n\tr1_c8 - loc\n\tr1_c9 - loc\n\tr2_c0 - loc\n\tr2_c1 - loc\n\tr2_c2 - loc\n\tr2_c3 - loc\n\tr2_c4 - loc\n\tr2_c5 - loc\n\tr2_c6 - loc\n\tr2_c7 - loc\n\tr2_c8 - loc\n\tr2_c9 - loc\n\tr3_c0 - loc\n\tr3_c1 - loc\n\tr3_c2 - loc\n\tr3_c3 - loc\n\tr3_c4 - loc\n\tr3_c5 - loc\n\tr3_c6 - loc\n\tr3_c7 - loc\n\tr3_c8 - loc\n\tr3_c9 - loc\n\tr4_c0 - loc\n\tr4_c1 - loc\n\tr4_c2 - loc\n\tr4_c3 - loc\n\tr4_c4 - loc\n\tr4_c5 - loc\n\tr4_c6 - loc\n\tr4_c7 - loc\n\tr4_c8 - loc\n\tr4_c9 - loc\n\tr5_c0 - loc\n\tr5_c1 - loc\n\tr5_c2 - loc\n\tr5_c3 - loc\n\tr5_c4 - loc\n\tr5_c5 - loc\n\tr5_c6 - loc\n\tr5_c7 - loc\n\tr5_c8 - loc\n\tr5_c9 - loc\n\tr6_c0 - loc\n\tr6_c1 - loc\n\tr6_c2 - loc\n\tr6_c3 - loc\n\tr6_c4 - loc\n\tr6_c5 - loc\n\tr6_c6 - loc\n\tr6_c7 - loc\n\tr6_c8 - loc\n\tr6_c9 - loc\n\tr7_c0 - loc\n\tr7_c1 - loc\n\tr7_c2 - loc\n\tr7_c3 - loc\n\tr7_c4 - loc\n\tr7_c5 - loc\n\tr7_c6 - loc\n\tr7_c7 - loc\n\tr7_c8 - loc\n\tr7_c9 - loc\n\tr8_c0 - loc\n\tr8_c1 - loc\n\tr8_c2 - loc\n\tr8_c3 - loc\n\tr8_c4 - loc\n\tr8_c5 - loc\n\tr8_c6 - loc\n\tr8_c7 - loc\n\tr8_c8 - loc\n\tr8_c9 - loc\n  )\n  (:init \n\t(adjacent r0_c0 r0_c1)\n\t(adjacent r0_c0 r1_c0)\n\t(adjacent r0_c1 r0_c0)\n\t(adjacent r0_c1 r0_c2)\n\t(adjacent r0_c1 r1_c1)\n\t(adjacent r0_c2 r0_c1)\n\t(adjacent r0_c2 r0_c3)\n\t(adjacent r0_c2 r1_c2)\n\t(adjacent r0_c3 r0_c2)\n\t(adjacent r0_c3 r0_c4)\n\t(adjacent r0_c3 r1_c3)\n\t(adjacent r0_c4 r0_c3)\n\t(adjacent r0_c4 r0_c5)\n\t(adjacent r0_c4 r1_c4)\n\t(adjacent r0_c5 r0_c4)\n\t(adjacent r0_c5 r0_c6)\n\t(adjacent r0_c5 r1_c5)\n\t(adjacent r0_c6 r0_c5)\n\t(adjacent r0_c6 r0_c7)\n\t(adjacent r0_c6 r1_c6)\n\t(adjacent r0_c7 r0_c6)\n\t(adjacent r0_c7 r0_c8)\n\t(adjacent r0_c7 r1_c7)\n\t(adjacent r0_c8 r0_c7)\n\t(adjacent r0_c8 r0_c9)\n\t(adjacent r0_c8 r1_c8)\n\t(adjacent r0_c9 r0_c8)\n\t(adjacent r0_c9 r1_c9)\n\t(adjacent r1_c0 r0_c0)\n\t(adjacent r1_c0 r1_c1)\n\t(adjacent r1_c0 r2_c0)\n\t(adjacent r1_c1 r0_c1)\n\t(adjacent r1_c1 r1_c0)\n\t(adjacent r1_c1 r1_c2)\n\t(adjacent r1_c1 r2_c1)\n\t(adjacent r1_c2 r0_c2)\n\t(adjacent r1_c2 r1_c1)\n\t(adjacent r1_c2 r1_c3)\n\t(adjacent r1_c2 r2_c2)\n\t(adjacent r1_c3 r0_c3)\n\t(adjacent r1_c3 r1_c2)\n\t(adjacent r1_c3 r1_c4)\n\t(adjacent r1_c3 r2_c3)\n\t(adjacent r1_c4 r0_c4)\n\t(adjacent r1_c4 r1_c3)\n\t(adjacent r1_c4 r1_c5)\n\t(adjacent r1_c4 r2_c4)\n\t(adjacent r1_c5 r0_c5)\n\t(adjacent r1_c5 r1_c4)\n\t(adjacent r1_c5 r1_c6)\n\t(adjacent r1_c5 r2_c5)\n\t(adjacent r1_c6 r0_c6)\n\t(adjacent r1_c6 r1_c5)\n\t(adjacent r1_c6 r1_c7)\n\t(adjacent r1_c6 r2_c6)\n\t(adjacent r1_c7 r0_c7)\n\t(adjacent r1_c7 r1_c6)\n\t(adjacent r1_c7 r1_c8)\n\t(adjacent r1_c7 r2_c7)\n\t(adjacent r1_c8 r0_c8)\n\t(adjacent r1_c8 r1_c7)\n\t(adjacent r1_c8 r1_c9)\n\t(adjacent r1_c8 r2_c8)\n\t(adjacent r1_c9 r0_c9)\n\t(adjacent r1_c9 r1_c8)\n\t(adjacent r1_c9 r2_c9)\n\t(adjacent r2_c0 r1_c0)\n\t(adjacent r2_c0 r2_c1)\n\t(adjacent r2_c0 r3_c0)\n\t(adjacent r2_c1 r1_c1)\n\t(adjacent r2_c1 r2_c0)\n\t(adjacent r2_c1 r2_c2)\n\t(adjacent r2_c1 r3_c1)\n\t(adjacent r2_c2 r1_c2)\n\t(adjacent r2_c2 r2_c1)\n\t(adjacent r2_c2 r2_c3)\n\t(adjacent r2_c2 r3_c2)\n\t(adjacent r2_c3 r1_c3)\n\t(adjacent r2_c3 r2_c2)\n\t(adjacent r2_c3 r2_c4)\n\t(adjacent r2_c3 r3_c3)\n\t(adjacent r2_c4 r1_c4)\n\t(adjacent r2_c4 r2_c3)\n\t(adjacent r2_c4 r2_c5)\n\t(adjacent r2_c4 r3_c4)\n\t(adjacent r2_c5 r1_c5)\n\t(adjacent r2_c5 r2_c4)\n\t(adjacent r2_c5 r2_c6)\n\t(adjacent r2_c5 r3_c5)\n\t(adjacent r2_c6 r1_c6)\n\t(adjacent r2_c6 r2_c5)\n\t(adjacent r2_c6 r2_c7)\n\t(adjacent r2_c6 r3_c6)\n\t(adjacent r2_c7 r1_c7)\n\t(adjacent r2_c7 r2_c6)\n\t(adjacent r2_c7 r2_c8)\n\t(adjacent r2_c7 r3_c7)\n\t(adjacent r2_c8 r1_c8)\n\t(adjacent r2_c8 r2_c7)\n\t(adjacent r2_c8 r2_c9)\n\t(adjacent r2_c8 r3_c8)\n\t(adjacent r2_c9 r1_c9)\n\t(adjacent r2_c9 r2_c8)\n\t(adjacent r2_c9 r3_c9)\n\t(adjacent r3_c0 r2_c0)\n\t(adjacent r3_c0 r3_c1)\n\t(adjacent r3_c0 r4_c0)\n\t(adjacent r3_c1 r2_c1)\n\t(adjacent r3_c1 r3_c0)\n\t(adjacent r3_c1 r3_c2)\n\t(adjacent r3_c1 r4_c1)\n\t(adjacent r3_c2 r2_c2)\n\t(adjacent r3_c2 r3_c1)\n\t(adjacent r3_c2 r3_c3)\n\t(adjacent r3_c2 r4_c2)\n\t(adjacent r3_c3 r2_c3)\n\t(adjacent r3_c3 r3_c2)\n\t(adjacent r3_c3 r3_c4)\n\t(adjacent r3_c3 r4_c3)\n\t(adjacent r3_c4 r2_c4)\n\t(adjacent r3_c4 r3_c3)\n\t(adjacent r3_c4 r3_c5)\n\t(adjacent r3_c4 r4_c4)\n\t(adjacent r3_c5 r2_c5)\n\t(adjacent r3_c5 r3_c4)\n\t(adjacent r3_c5 r3_c6)\n\t(adjacent r3_c5 r4_c5)\n\t(adjacent r3_c6 r2_c6)\n\t(adjacent r3_c6 r3_c5)\n\t(adjacent r3_c6 r3_c7)\n\t(adjacent r3_c6 r4_c6)\n\t(adjacent r3_c7 r2_c7)\n\t(adjacent r3_c7 r3_c6)\n\t(adjacent r3_c7 r3_c8)\n\t(adjacent r3_c7 r4_c7)\n\t(adjacent r3_c8 r2_c8)\n\t(adjacent r3_c8 r3_c7)\n\t(adjacent r3_c8 r3_c9)\n\t(adjacent r3_c8 r4_c8)\n\t(adjacent r3_c9 r2_c9)\n\t(adjacent r3_c9 r3_c8)\n\t(adjacent r3_c9 r4_c9)\n\t(adjacent r4_c0 r3_c0)\n\t(adjacent r4_c0 r4_c1)\n\t(adjacent r4_c0 r5_c0)\n\t(adjacent r4_c1 r3_c1)\n\t(adjacent r4_c1 r4_c0)\n\t(adjacent r4_c1 r4_c2)\n\t(adjacent r4_c1 r5_c1)\n\t(adjacent r4_c2 r3_c2)\n\t(adjacent r4_c2 r4_c1)\n\t(adjacent r4_c2 r4_c3)\n\t(adjacent r4_c2 r5_c2)\n\t(adjacent r4_c3 r3_c3)\n\t(adjacent r4_c3 r4_c2)\n\t(adjacent r4_c3 r4_c4)\n\t(adjacent r4_c3 r5_c3)\n\t(adjacent r4_c4 r3_c4)\n\t(adjacent r4_c4 r4_c3)\n\t(adjacent r4_c4 r4_c5)\n\t(adjacent r4_c4 r5_c4)\n\t(adjacent r4_c5 r3_c5)\n\t(adjacent r4_c5 r4_c4)\n\t(adjacent r4_c5 r4_c6)\n\t(adjacent r4_c5 r5_c5)\n\t(adjacent r4_c6 r3_c6)\n\t(adjacent r4_c6 r4_c5)\n\t(adjacent r4_c6 r4_c7)\n\t(adjacent r4_c6 r5_c6)\n\t(adjacent r4_c7 r3_c7)\n\t(adjacent r4_c7 r4_c6)\n\t(adjacent r4_c7 r4_c8)\n\t(adjacent r4_c7 r5_c7)\n\t(adjacent r4_c8 r3_c8)\n\t(adjacent r4_c8 r4_c7)\n\t(adjacent r4_c8 r4_c9)\n\t(adjacent r4_c8 r5_c8)\n\t(adjacent r4_c9 r3_c9)\n\t(adjacent r4_c9 r4_c8)\n\t(adjacent r4_c9 r5_c9)\n\t(adjacent r5_c0 r4_c0)\n\t(adjacent r5_c0 r5_c1)\n\t(adjacent r5_c0 r6_c0)\n\t(adjacent r5_c1 r4_c1)\n\t(adjacent r5_c1 r5_c0)\n\t(adjacent r5_c1 r5_c2)\n\t(adjacent r5_c1 r6_c1)\n\t(adjacent r5_c2 r4_c2)\n\t(adjacent r5_c2 r5_c1)\n\t(adjacent r5_c2 r5_c3)\n\t(adjacent r5_c2 r6_c2)\n\t(adjacent r5_c3 r4_c3)\n\t(adjacent r5_c3 r5_c2)\n\t(adjacent r5_c3 r5_c4)\n\t(adjacent r5_c3 r6_c3)\n\t(adjacent r5_c4 r4_c4)\n\t(adjacent r5_c4 r5_c3)\n\t(adjacent r5_c4 r5_c5)\n\t(adjacent r5_c4 r6_c4)\n\t(adjacent r5_c5 r4_c5)\n\t(adjacent r5_c5 r5_c4)\n\t(adjacent r5_c5 r5_c6)\n\t(adjacent r5_c5 r6_c5)\n\t(adjacent r5_c6 r4_c6)\n\t(adjacent r5_c6 r5_c5)\n\t(adjacent r5_c6 r5_c7)\n\t(adjacent r5_c6 r6_c6)\n\t(adjacent r5_c7 r4_c7)\n\t(adjacent r5_c7 r5_c6)\n\t(adjacent r5_c7 r5_c8)\n\t(adjacent r5_c7 r6_c7)\n\t(adjacent r5_c8 r4_c8)\n\t(adjacent r5_c8 r5_c7)\n\t(adjacent r5_c8 r5_c9)\n\t(adjacent r5_c8 r6_c8)\n\t(adjacent r5_c9 r4_c9)\n\t(adjacent r5_c9 r5_c8)\n\t(adjacent r5_c9 r6_c9)\n\t(adjacent r6_c0 r5_c0)\n\t(adjacent r6_c0 r6_c1)\n\t(adjacent r6_c0 r7_c0)\n\t(adjacent r6_c1 r5_c1)\n\t(adjacent r6_c1 r6_c0)\n\t(adjacent r6_c1 r6_c2)\n\t(adjacent r6_c1 r7_c1)\n\t(adjacent r6_c2 r5_c2)\n\t(adjacent r6_c2 r6_c1)\n\t(adjacent r6_c2 r6_c3)\n\t(adjacent r6_c2 r7_c2)\n\t(adjacent r6_c3 r5_c3)\n\t(adjacent r6_c3 r6_c2)\n\t(adjacent r6_c3 r6_c4)\n\t(adjacent r6_c3 r7_c3)\n\t(adjacent r6_c4 r5_c4)\n\t(adjacent r6_c4 r6_c3)\n\t(adjacent r6_c4 r6_c5)\n\t(adjacent r6_c4 r7_c4)\n\t(adjacent r6_c5 r5_c5)\n\t(adjacent r6_c5 r6_c4)\n\t(adjacent r6_c5 r6_c6)\n\t(adjacent r6_c5 r7_c5)\n\t(adjacent r6_c6 r5_c6)\n\t(adjacent r6_c6 r6_c5)\n\t(adjacent r6_c6 r6_c7)\n\t(adjacent r6_c6 r7_c6)\n\t(adjacent r6_c7 r5_c7)\n\t(adjacent r6_c7 r6_c6)\n\t(adjacent r6_c7 r6_c8)\n\t(adjacent r6_c7 r7_c7)\n\t(adjacent r6_c8 r5_c8)\n\t(adjacent r6_c8 r6_c7)\n\t(adjacent r6_c8 r6_c9)\n\t(adjacent r6_c8 r7_c8)\n\t(adjacent r6_c9 r5_c9)\n\t(adjacent r6_c9 r6_c8)\n\t(adjacent r6_c9 r7_c9)\n\t(adjacent r7_c0 r6_c0)\n\t(adjacent r7_c0 r7_c1)\n\t(adjacent r7_c0 r8_c0)\n\t(adjacent r7_c1 r6_c1)\n\t(adjacent r7_c1 r7_c0)\n\t(adjacent r7_c1 r7_c2)\n\t(adjacent r7_c1 r8_c1)\n\t(adjacent r7_c2 r6_c2)\n\t(adjacent r7_c2 r7_c1)\n\t(adjacent r7_c2 r7_c3)\n\t(adjacent r7_c2 r8_c2)\n\t(adjacent r7_c3 r6_c3)\n\t(adjacent r7_c3 r7_c2)\n\t(adjacent r7_c3 r7_c4)\n\t(adjacent r7_c3 r8_c3)\n\t(adjacent r7_c4 r6_c4)\n\t(adjacent r7_c4 r7_c3)\n\t(adjacent r7_c4 r7_c5)\n\t(adjacent r7_c4 r8_c4)\n\t(adjacent r7_c5 r6_c5)\n\t(adjacent r7_c5 r7_c4)\n\t(adjacent r7_c5 r7_c6)\n\t(adjacent r7_c5 r8_c5)\n\t(adjacent r7_c6 r6_c6)\n\t(adjacent r7_c6 r7_c5)\n\t(adjacent r7_c6 r7_c7)\n\t(adjacent r7_c6 r8_c6)\n\t(adjacent r7_c7 r6_c7)\n\t(adjacent r7_c7 r7_c6)\n\t(adjacent r7_c7 r7_c8)\n\t(adjacent r7_c7 r8_c7)\n\t(adjacent r7_c8 r6_c8)\n\t(adjacent r7_c8 r7_c7)\n\t(adjacent r7_c8 r7_c9)\n\t(adjacent r7_c8 r8_c8)\n\t(adjacent r7_c9 r6_c9)\n\t(adjacent r7_c9 r7_c8)\n\t(adjacent r7_c9 r8_c9)\n\t(adjacent r8_c0 r7_c0)\n\t(adjacent r8_c0 r8_c1)\n\t(adjacent r8_c1 r7_c1)\n\t(adjacent r8_c1 r8_c0)\n\t(adjacent r8_c1 r8_c2)\n\t(adjacent r8_c2 r7_c2)\n\t(adjacent r8_c2 r8_c1)\n\t(adjacent r8_c2 r8_c3)\n\t(adjacent r8_c3 r7_c3)\n\t(adjacent r8_c3 r8_c2)\n\t(adjacent r8_c3 r8_c4)\n\t(adjacent r8_c4 r7_c4)\n\t(adjacent r8_c4 r8_c3)\n\t(adjacent r8_c4 r8_c5)\n\t(adjacent r8_c5 r7_c5)\n\t(adjacent r8_c5 r8_c4)\n\t(adjacent r8_c5 r8_c6)\n\t(adjacent r8_c6 r7_c6)\n\t(adjacent r8_c6 r8_c5)\n\t(adjacent r8_c6 r8_c7)\n\t(adjacent r8_c7 r7_c7)\n\t(adjacent r8_c7 r8_c6)\n\t(adjacent r8_c7 r8_c8)\n\t(adjacent r8_c8 r7_c8)\n\t(adjacent r8_c8 r8_c7)\n\t(adjacent r8_c8 r8_c9)\n\t(adjacent r8_c9 r7_c9)\n\t(adjacent r8_c9 r8_c8)\n\t(at r4_c0)\n\t(isgoal r2_c7)\n\t(ishill r1_c1)\n\t(iswater r1_c4)\n\t(iswater r1_c5)\n\t(iswater r2_c4)\n\t(iswater r2_c5)\n\t(iswater r4_c4)\n\t(iswater r4_c5)\n\t(iswater r6_c4)\n\t(iswater r6_c5)\n\t(iswater r7_c4)\n\t(iswater r7_c5)\n\t(ontrail r0_c1 r0_c2)\n\t(ontrail r0_c2 r0_c3)\n\t(ontrail r0_c3 r0_c4)\n\t(ontrail r0_c4 r0_c5)\n\t(ontrail r0_c5 r0_c6)\n\t(ontrail r0_c6 r0_c7)\n\t(ontrail r0_c7 r1_c7)\n\t(ontrail r1_c1 r0_c1)\n\t(ontrail r1_c7 r2_c7)\n\t(ontrail r2_c1 r1_c1)\n\t(ontrail r3_c1 r2_c1)\n\t(ontrail r4_c0 r4_c1)\n\t(ontrail r4_c1 r3_c1)\n  )\n  (:goal (and\n\t(at r2_c7)))\n)\n"
        ],
        "domain": "(define (domain hiking)\n  (:requirements :strips :typing)\n  (:types loc)\n\n(:predicates\n  (at ?loc - loc)\n  (isWater ?loc - loc)\n  (isHill ?loc - loc)\n  (isGoal ?loc - loc)\n  (adjacent ?loc1 - loc ?loc2 - loc)\n  (onTrail ?from - loc ?to - loc)\n)\n\n(:action walk\n  :parameters (?from - loc ?to - loc)\n  :precondition (and\n    (not (isHill ?to))\n    (at ?from)\n    (adjacent ?from ?to)\n    (not (isWater ?from)))\n  :effect (and (at ?to) (not (at ?from)))\n)\n\n(:action climb\n  :parameters (?from - loc ?to - loc)\n  :precondition (and\n    (isHill ?to)\n    (at ?from)\n    (adjacent ?from ?to)\n    (not (isWater ?from)))\n  :effect (and (at ?to) (not (at ?from)))\n)\n\n\n)\n",
        "description": "You are embarking on a hiking adventure through various terrains, including hills and water bodies. Your goal is to navigate through these terrains to reach a specific destination, avoiding water hazards and climbing hills when necessary. The environment consists of different locations (loc), with some being hills, some being water, and one being your goal. Paths between locations are defined, and some paths are part of a trail.\n\nThe actions defined in this domain include:\n- walk <from_loc> <to_loc>: This action allows you to walk from one location to another, provided the destination is not a hill, you are currently at the starting location, the two locations are adjacent, and the starting location is not water. The effect of this action is that you will be at the new location, and no longer at the starting location.\n- climb <from_loc> <to_loc>: This action allows you to climb from one location to another if the destination is a hill, you are currently at the starting location, the two locations are adjacent, and the starting location is not water. The effect of this action is that you will be at the new location, and no longer at the starting location.\n\nYou have the following restrictions on your actions:\n- You cannot walk directly into a hill; you must use the climb action for such terrain.\n- You cannot perform any action from a location if it is water.\n- Adjacency between locations is required for any movement action.\n- You cannot be in two locations at once; moving to a new location means leaving the previous one.",
        "domain_name": "hiking",
        "nl_interface": {
            "at": "You are at {arg1}.",
            "isWater": "{arg1} is water.",
            "isHill": "{arg1} is a hill.",
            "isGoal": "{arg1} is the goal.",
            "adjacent": "{arg1} is adjacent to {arg2}.",
            "onTrail": "There is a trail from {arg1} to {arg2}.",
            "walk": "Walk from {arg1} to {arg2}.",
            "climb": "Climb from {arg1} to {arg2}."
        },
        "nl_interface_debug": [
            {
                "nl": "{\n    \"at\": \"You are at {arg1}.\",\n    \"isWater\": \"{arg1} is water.\",\n    \"isHill\": \"{arg1} is a hill.\",\n    \"isGoal\": \"{arg1} is the goal.\",\n    \"adjacent\": \"{arg1} is adjacent to {arg2}.\",\n    \"onTrail\": \"There is a trail from {arg1} to {arg2}.\",\n    \"walk\": \"Walk from {arg1} to {arg2}.\",\n    \"climb\": \"Climb from {arg1} to {arg2}.\"\n}",
                "gpt_response": "```python\n{\n    \"at\": \"You are at {arg1}.\",\n    \"isWater\": \"{arg1} is water.\",\n    \"isHill\": \"{arg1} is a hill.\",\n    \"isGoal\": \"{arg1} is the goal.\",\n    \"adjacent\": \"{arg1} is adjacent to {arg2}.\",\n    \"onTrail\": \"There is a trail from {arg1} to {arg2}.\",\n    \"walk\": \"Walk from {arg1} to {arg2}.\",\n    \"climb\": \"Climb from {arg1} to {arg2}.\"\n}\n```"
            }
        ]
    },
    {
        "problems": [
            "(define (problem baking) \n    (:domain baking)\n\n    (:objects\n      oven-0 - oven\n      oven-1 - oven\n      egg-0 - ingredient\n      egg-1 - ingredient\n      flour-0 - ingredient\n      pan-0 - pan\n      pan-1 - pan\n      new-0 - ingredient\n      new-1 - ingredient\n      soap-0 - soap\n    )\n\n    (:init\n    \n    (isegg egg-0)\n    (isegg egg-1)\n    (isflour flour-0)\n    (hypothetical new-0)\n    (hypothetical new-1)\n    (panisclean pan-0)\n    (panisclean pan-1)\n    (soapconsumed soap-0)\n\n    ; action literals\n    (putegginpan egg-0 pan-0)\n    (putegginpan egg-1 pan-0)\n    (putflourinpan flour-0 pan-0)\n    (mix pan-0)\n    (putpaninoven pan-0 oven-0)\n    (putpaninoven pan-0 oven-1)\n    (removepanfromoven pan-0)\n    (cleanpan pan-0 soap-0)\n    (putegginpan egg-0 pan-1)\n    (putegginpan egg-1 pan-1)\n    (putflourinpan flour-0 pan-1)\n    (mix pan-1)\n    (putpaninoven pan-1 oven-0)\n    (putpaninoven pan-1 oven-1)\n    (removepanfromoven pan-1)\n    (cleanpan pan-1 soap-0)\n    (bakecake new-0 oven-0)\n    (bakecake new-1 oven-0)\n    (bakesouffle new-0 oven-0)\n    (bakesouffle new-1 oven-0)\n    (bakecake new-0 oven-1)\n    (bakecake new-1 oven-1)\n    (bakesouffle new-0 oven-1)\n    (bakesouffle new-1 oven-1)\n    )\n\n    (:goal (and \n        (issouffle new-0) \n        (iscake new-1) \n        (not (ovenisfull oven-0))\n        (not (ovenisfull oven-1))\n        (not (panisclean pan-0))\n        (not (panisclean pan-1))\n    ))\n)",
            "(define (problem baking) \n    (:domain baking)\n\n    (:objects\n      oven-0 - oven\n      oven-1 - oven\n      egg-0 - ingredient\n      egg-1 - ingredient\n      flour-0 - ingredient\n      pan-0 - pan\n      pan-1 - pan\n      new-0 - ingredient\n      new-1 - ingredient\n      soap-0 - soap\n    )\n\n    (:init\n    \n    (isegg egg-0)\n    (isegg egg-1)\n    (isflour flour-0)\n    (hypothetical new-0)\n    (hypothetical new-1)\n    (panisclean pan-0)\n    (panisclean pan-1)\n    (soapconsumed soap-0)\n\n    ; action literals\n    (putegginpan egg-0 pan-0)\n    (putegginpan egg-1 pan-0)\n    (putflourinpan flour-0 pan-0)\n    (mix pan-0)\n    (putpaninoven pan-0 oven-0)\n    (putpaninoven pan-0 oven-1)\n    (removepanfromoven pan-0)\n    (cleanpan pan-0 soap-0)\n    (putegginpan egg-0 pan-1)\n    (putegginpan egg-1 pan-1)\n    (putflourinpan flour-0 pan-1)\n    (mix pan-1)\n    (putpaninoven pan-1 oven-0)\n    (putpaninoven pan-1 oven-1)\n    (removepanfromoven pan-1)\n    (cleanpan pan-1 soap-0)\n    (bakecake new-0 oven-0)\n    (bakecake new-1 oven-0)\n    (bakesouffle new-0 oven-0)\n    (bakesouffle new-1 oven-0)\n    (bakecake new-0 oven-1)\n    (bakecake new-1 oven-1)\n    (bakesouffle new-0 oven-1)\n    (bakesouffle new-1 oven-1)\n    )\n\n    (:goal (and \n        (issouffle new-0) \n        (issouffle new-1) \n        (not (ovenisfull oven-0))\n        (not (ovenisfull oven-1))\n    ))\n)",
            "(define (problem baking) \n    (:domain baking)\n\n    (:objects\n      oven-0 - oven\n      oven-1 - oven\n      egg-0 - ingredient\n      egg-1 - ingredient\n      flour-0 - ingredient\n      pan-0 - pan\n      pan-1 - pan\n      new-0 - ingredient\n      new-1 - ingredient\n      soap-0 - soap\n    )\n\n    (:init\n    \n    (isegg egg-0)\n    (isegg egg-1)\n    (isflour flour-0)\n    (hypothetical new-0)\n    (hypothetical new-1)\n    (panisclean pan-0)\n    (panisclean pan-1)\n    (soapconsumed soap-0)\n\n    ; action literals\n    (putegginpan egg-0 pan-0)\n    (putegginpan egg-1 pan-0)\n    (putflourinpan flour-0 pan-0)\n    (mix pan-0)\n    (putpaninoven pan-0 oven-0)\n    (putpaninoven pan-0 oven-1)\n    (removepanfromoven pan-0)\n    (cleanpan pan-0 soap-0)\n    (putegginpan egg-0 pan-1)\n    (putegginpan egg-1 pan-1)\n    (putflourinpan flour-0 pan-1)\n    (mix pan-1)\n    (putpaninoven pan-1 oven-0)\n    (putpaninoven pan-1 oven-1)\n    (removepanfromoven pan-1)\n    (cleanpan pan-1 soap-0)\n    (bakecake new-0 oven-0)\n    (bakecake new-1 oven-0)\n    (bakesouffle new-0 oven-0)\n    (bakesouffle new-1 oven-0)\n    (bakecake new-0 oven-1)\n    (bakecake new-1 oven-1)\n    (bakesouffle new-0 oven-1)\n    (bakesouffle new-1 oven-1)\n    )\n\n    (:goal (and \n        (issouffle new-0) \n        (iscake new-1) \n        (not (ovenisfull oven-0))\n        (not (ovenisfull oven-1))\n    ))\n)\n    ",
            "(define (problem baking) \n    (:domain baking)\n\n    (:objects\n      oven-0 - oven\n      egg-0 - ingredient\n      flour-0 - ingredient\n      soap-0 - soap\n      pan-0 - pan\n      new-0 - ingredient\n    )\n\n    (:init\n    \n    (isegg egg-0)\n    (isflour flour-0)\n    (hypothetical new-0)\n    (panisclean pan-0)\n\n    ; action literals\n    (putegginpan egg-0 pan-0)\n    (putflourinpan flour-0 pan-0)\n    (mix pan-0)\n    (putpaninoven pan-0 oven-0)\n    (removepanfromoven pan-0)\n    (bakecake new-0 oven-0)\n    (bakesouffle new-0 oven-0)\n    (cleanpan pan-0 soap-0)\n\n    )\n\n    (:goal (and (issouffle new-0) ))\n)",
            "(define (problem baking) \n    (:domain baking)\n\n    (:objects\n      oven-0 - oven\n      oven-1 - oven\n      egg-0 - ingredient\n      egg-1 - ingredient\n      flour-0 - ingredient\n      pan-0 - pan\n      pan-1 - pan\n      new-0 - ingredient\n      new-1 - ingredient\n      soap-0 - soap\n    )\n\n    (:init\n    \n    (isegg egg-0)\n    (isegg egg-1)\n    (isflour flour-0)\n    (hypothetical new-0)\n    (hypothetical new-1)\n    (panisclean pan-0)\n    (panisclean pan-1)\n    (soapconsumed soap-0)\n\n    ; action literals\n    (putegginpan egg-0 pan-0)\n    (putegginpan egg-1 pan-0)\n    (putflourinpan flour-0 pan-0)\n    (mix pan-0)\n    (putpaninoven pan-0 oven-0)\n    (putpaninoven pan-0 oven-1)\n    (removepanfromoven pan-0)\n    (cleanpan pan-0 soap-0)\n    (putegginpan egg-0 pan-1)\n    (putegginpan egg-1 pan-1)\n    (putflourinpan flour-0 pan-1)\n    (mix pan-1)\n    (putpaninoven pan-1 oven-0)\n    (putpaninoven pan-1 oven-1)\n    (removepanfromoven pan-1)\n    (cleanpan pan-1 soap-0)\n    (bakecake new-0 oven-0)\n    (bakecake new-1 oven-0)\n    (bakesouffle new-0 oven-0)\n    (bakesouffle new-1 oven-0)\n    (bakecake new-0 oven-1)\n    (bakecake new-1 oven-1)\n    (bakesouffle new-0 oven-1)\n    (bakesouffle new-1 oven-1)\n    )\n\n    (:goal (and \n        (issouffle new-0) \n        (iscake new-1) \n        (not (ovenisfull oven-0))\n        (not (ovenisfull oven-1))\n    ))\n)",
            "(define (problem baking) \n    (:domain baking)\n\n    (:objects\n      oven-0 - oven\n      egg-0 - ingredient\n      egg-1 - ingredient\n      flour-0 - ingredient\n      flour-1 - ingredient\n      pan-0 - pan\n      new-0 - ingredient\n      new-1 - ingredient\n      soap-0 - soap\n    )\n\n    (:init\n    \n    (isegg egg-0)\n    (isegg egg-1)\n    (isflour flour-0)\n    (isflour flour-1)\n    (hypothetical new-0)\n    (hypothetical new-1)\n    (panisclean pan-0)\n\n    ; action literals\n    (putegginpan egg-0 pan-0)\n    (putegginpan egg-1 pan-0)\n    (putflourinpan flour-0 pan-0)\n    (putflourinpan flour-1 pan-0)\n    (mix pan-0)\n    (putpaninoven pan-0 oven-0)\n    (removepanfromoven pan-0)\n    (cleanpan pan-0 soap-0)\n    (bakecake new-0 oven-0)\n    (bakecake new-1 oven-0)\n    (bakesouffle new-0 oven-0)\n    (bakesouffle new-1 oven-0)\n    )\n\n    (:goal (and \n        (iscake new-0) \n    ))\n)",
            "(define (problem baking) \n    (:domain baking)\n\n    (:objects\n      oven-0 - oven\n      oven-1 - oven\n      egg-0 - ingredient\n      egg-1 - ingredient\n      flour-0 - ingredient\n      pan-0 - pan\n      pan-1 - pan\n      new-0 - ingredient\n      new-1 - ingredient\n      soap-0 - soap\n    )\n\n    (:init\n    \n    (isegg egg-0)\n    (isegg egg-1)\n    (isflour flour-0)\n    (hypothetical new-0)\n    (hypothetical new-1)\n    (panisclean pan-0)\n    (panisclean pan-1)\n    (soapconsumed soap-0)\n\n    ; action literals\n    (putegginpan egg-0 pan-0)\n    (putegginpan egg-1 pan-0)\n    (putflourinpan flour-0 pan-0)\n    (mix pan-0)\n    (putpaninoven pan-0 oven-0)\n    (putpaninoven pan-0 oven-1)\n    (removepanfromoven pan-0)\n    (cleanpan pan-0 soap-0)\n    (putegginpan egg-0 pan-1)\n    (putegginpan egg-1 pan-1)\n    (putflourinpan flour-0 pan-1)\n    (mix pan-1)\n    (putpaninoven pan-1 oven-0)\n    (putpaninoven pan-1 oven-1)\n    (removepanfromoven pan-1)\n    (cleanpan pan-1 soap-0)\n    (bakecake new-0 oven-0)\n    (bakecake new-1 oven-0)\n    (bakesouffle new-0 oven-0)\n    (bakesouffle new-1 oven-0)\n    (bakecake new-0 oven-1)\n    (bakecake new-1 oven-1)\n    (bakesouffle new-0 oven-1)\n    (bakesouffle new-1 oven-1)\n    )\n\n    (:goal (and \n        (issouffle new-0) \n        (issouffle new-1) \n        (not (ovenisfull oven-0))\n        (not (ovenisfull oven-1))\n        (not (ismixed pan-0))\n        (not (ismixed pan-1))\n    ))\n)",
            "(define (problem baking) \n    (:domain baking)\n\n    (:objects\n      oven-0 - oven\n      oven-1 - oven\n      egg-0 - ingredient\n      egg-1 - ingredient\n      flour-0 - ingredient\n      pan-0 - pan\n      pan-1 - pan\n      new-0 - ingredient\n      new-1 - ingredient\n      soap-0 - soap\n    )\n\n    (:init\n    \n    (isegg egg-0)\n    (isegg egg-1)\n    (isflour flour-0)\n    (hypothetical new-0)\n    (hypothetical new-1)\n    (panisclean pan-0)\n    (panisclean pan-1)\n    (soapconsumed soap-0)\n\n    ; action literals\n    (putegginpan egg-0 pan-0)\n    (putegginpan egg-1 pan-0)\n    (putflourinpan flour-0 pan-0)\n    (mix pan-0)\n    (putpaninoven pan-0 oven-0)\n    (putpaninoven pan-0 oven-1)\n    (removepanfromoven pan-0)\n    (cleanpan pan-0 soap-0)\n    (putegginpan egg-0 pan-1)\n    (putegginpan egg-1 pan-1)\n    (putflourinpan flour-0 pan-1)\n    (mix pan-1)\n    (putpaninoven pan-1 oven-0)\n    (putpaninoven pan-1 oven-1)\n    (removepanfromoven pan-1)\n    (cleanpan pan-1 soap-0)\n    (bakecake new-0 oven-0)\n    (bakecake new-1 oven-0)\n    (bakesouffle new-0 oven-0)\n    (bakesouffle new-1 oven-0)\n    (bakecake new-0 oven-1)\n    (bakecake new-1 oven-1)\n    (bakesouffle new-0 oven-1)\n    (bakesouffle new-1 oven-1)\n    )\n\n    (:goal (and \n        (issouffle new-1) \n        (iscake new-0) \n        (not (ovenisfull oven-0))\n        (not (ovenisfull oven-1))\n    ))\n)",
            "(define (problem baking) \n    (:domain baking)\n\n    (:objects\n      oven-0 - oven\n      egg-0 - ingredient\n      egg-1 - ingredient\n      flour-0 - ingredient\n      soap-0 - soap\n      pan-0 - pan\n      new-0 - ingredient\n      new-1 - ingredient\n    )\n\n    (:init\n    \n    (isegg egg-0)\n    (isegg egg-1)\n    (isflour flour-0)\n    (hypothetical new-0)\n    (hypothetical new-1)\n    (panisclean pan-0)\n\n    ; action literals\n    (putegginpan egg-0 pan-0)\n    (putegginpan egg-1 pan-0)\n    (putflourinpan flour-0 pan-0)\n    (mix pan-0)\n    (putpaninoven pan-0 oven-0)\n    (removepanfromoven pan-0)\n    (bakecake new-0 oven-0)\n    (bakecake new-1 oven-0)\n    (bakesouffle new-0 oven-0)\n    (bakesouffle new-1 oven-0)\n    (cleanpan pan-0 soap-0)\n\n    )\n\n    (:goal (and (issouffle new-0) (iscake new-1) ))\n)\n    ",
            "(define (problem baking) \n    (:domain baking)\n\n    (:objects\n      oven-0 - oven\n      egg-0 - ingredient\n      flour-0 - ingredient\n      soap-0 - soap\n      pan-0 - pan\n      new-0 - ingredient\n    )\n\n    (:init\n    \n    (isegg egg-0)\n    (isflour flour-0)\n    (hypothetical new-0)\n    (panisclean pan-0)\n\n    ; action literals\n    (putegginpan egg-0 pan-0)\n    (putflourinpan flour-0 pan-0)\n    (mix pan-0)\n    (putpaninoven pan-0 oven-0)\n    (removepanfromoven pan-0)\n    (bakecake new-0 oven-0)\n    (bakesouffle new-0 oven-0)\n    (cleanpan pan-0 soap-0)\n\n    )\n\n    (:goal (and (iscake new-0) ))\n)\n    ",
            "(define (problem baking) \n    (:domain baking)\n\n    (:objects\n      oven-0 - oven\n      egg-0 - ingredient\n      egg-1 - ingredient\n      flour-0 - ingredient\n      flour-1 - ingredient\n      pan-0 - pan\n      new-0 - ingredient\n      new-1 - ingredient\n      soap-0 - soap\n    )\n\n    (:init\n    \n    (isegg egg-0)\n    (isegg egg-1)\n    (isflour flour-0)\n    (isflour flour-1)\n    (hypothetical new-0)\n    (hypothetical new-1)\n    (panisclean pan-0)\n\n    ; action literals\n    (putegginpan egg-0 pan-0)\n    (putegginpan egg-1 pan-0)\n    (putflourinpan flour-0 pan-0)\n    (putflourinpan flour-1 pan-0)\n    (mix pan-0)\n    (putpaninoven pan-0 oven-0)\n    (removepanfromoven pan-0)\n    (cleanpan pan-0 soap-0)\n    (bakecake new-0 oven-0)\n    (bakecake new-1 oven-0)\n    (bakesouffle new-0 oven-0)\n    (bakesouffle new-1 oven-0)\n    )\n\n    (:goal (and \n        (iscake new-0) \n        (iscake new-1) \n    ))\n)\n    "
        ],
        "domain": "(define (domain baking)\n    (:requirements :typing )\n    (:types ingredient pan oven soap)\n    (:predicates\n        (isegg ?egg - ingredient)\n        (isflour ?flour - ingredient)\n        (panhasegg ?pan - pan)\n        (panhasflour ?pan - pan)\n        (panisclean ?pan - pan)\n        (paninoven ?pan - pan)\n        (inpan ?x - ingredient ?pan - pan)\n        (inoven ?pan - pan ?oven - oven)\n        (ovenisfull ?oven - oven)\n        (hypothetical ?new - ingredient)\n        (ismixed ?pan - pan)\n        (iscake ?new - ingredient)\n        (issouffle ?new - ingredient)\n        (soapconsumed ?soap - soap)\n        (putegginpan ?egg - ingredient ?pan - pan)\n        (putflourinpan ?flour - ingredient ?pan - pan)\n        (mix ?pan - pan)\n        (putpaninoven ?pan - pan ?oven - oven)\n        (removepanfromoven ?pan - pan)\n        (bakecake ?new - ingredient ?oven - oven)\n        (bakesouffle ?new - ingredient ?oven - oven)\n        (cleanpan ?pan - pan ?soap - soap)\n    )\n\n    ; (:actions putegginpan putflourinpan mix putpaninoven removepanfromoven bakecake bakesouffle cleanpan)\n\n    (:action putegginpan\n    :parameters (?egg - ingredient ?pan - pan)\n    :precondition (and (putegginpan ?egg ?pan)\n                       (isegg ?egg)\n                       (not (panhasegg ?pan))\n                       (not (ismixed ?pan))\n                       (panisclean ?pan)\n                       (not (paninoven ?pan))\n                  )\n    :effect (and (panhasegg ?pan)\n                 (inpan ?egg ?pan)\n            )\n    )\n\n    (:action putflourinpan\n    :parameters (?flour - ingredient ?pan - pan)\n    :precondition (and (putflourinpan ?flour ?pan)\n                       (isflour ?flour)\n                       (not (panhasflour ?pan))\n                       (not (ismixed ?pan))\n                       (panisclean ?pan)\n                       (not (paninoven ?pan))\n                  )\n    :effect (and (panhasflour ?pan)\n                 (inpan ?flour ?pan)\n            )\n    )\n\n    (:action mix\n    :parameters (?egg - ingredient ?flour - ingredient ?pan - pan)\n    :precondition (and (mix ?pan)\n                       (inpan ?egg ?pan)\n                       (inpan ?flour ?pan)\n                       (isegg ?egg)\n                       (isflour ?flour)\n                       (not (paninoven ?pan))\n                  )\n    :effect (and (ismixed ?pan)\n                 (not (isegg ?egg))\n                 (not (isflour ?flour))\n                 (not (inpan ?egg ?pan))\n                 (not (inpan ?flour ?pan))\n                 (not (panhasegg ?pan))\n                 (not (panhasflour ?pan))\n            )\n    )\n\n    (:action putpaninoven\n    :parameters (?pan - pan ?oven - oven)\n    :precondition (and (putpaninoven ?pan ?oven)\n                       (not (ovenisfull ?oven))\n                       (not (paninoven ?pan))\n                  )\n    :effect (and (ovenisfull ?oven)\n                 (inoven ?pan ?oven)\n                 (paninoven ?pan)\n            )\n    )\n\n    (:action removepanfromoven\n    :parameters (?pan - pan ?oven - oven)\n    :precondition (and (removepanfromoven ?pan)\n                       (inoven ?pan ?oven)\n                  )\n    :effect (and (not (ovenisfull ?oven))\n                 (not (inoven ?pan ?oven))\n                 (not (paninoven ?pan))\n            )\n    )\n\n    (:action bakecake\n    :parameters (?oven - oven ?pan - pan ?new - ingredient)\n    :precondition (and (bakecake ?new ?oven)\n                       (ismixed ?pan)\n                       (inoven ?pan ?oven)\n                       (hypothetical ?new)\n                  )\n    :effect (and (not (ismixed ?pan))\n                 (not (panisclean ?pan))\n                 (not (hypothetical ?new))\n                 (iscake ?new)\n            )\n    )\n\n    (:action bakesouffle\n    :parameters (?oven - oven ?egg - ingredient ?pan - pan ?new - ingredient)\n    :precondition (and (bakesouffle ?new ?oven)\n                       (inpan ?egg ?pan)\n                       (isegg ?egg)\n                       (not (panhasflour ?pan))\n                       (inoven ?pan ?oven)\n                       (hypothetical ?new)\n                  )\n    :effect (and (not (isegg ?egg))\n                 (not (inpan ?egg ?pan))\n                 (not (panhasegg ?pan))\n                 (not (panisclean ?pan))\n                 (not (hypothetical ?new))\n                 (issouffle ?new)\n            )\n    )\n\n    (:action cleanpan\n    :parameters (?pan - pan ?soap - soap)\n    :precondition (and (cleanpan ?pan ?soap)\n                       (not (soapconsumed ?soap))\n                       (not (paninoven ?pan))\n                  )\n    :effect (and (panisclean ?pan)\n                 (soapconsumed ?soap)\n            )\n    )\n\n)\n        ",
        "description": "You are a chef robot tasked with baking cakes and souffl\u00e9s. Your kitchen is equipped with ingredients like eggs and flour, pans, an oven, and soap for cleaning. Your goal is to mix the right ingredients in a clean pan, bake them in the oven, and clean up afterward to prepare for the next baking task. Here are the actions you can perform:\n\nThe actions defined in this domain include:\n- putegginpan <egg> <pan>: This action allows you to put an egg in a pan. The preconditions are that the egg is an egg, the pan does not already have an egg, the pan is not mixed, the pan is clean, and the pan is not in the oven. The effect is that the pan now has an egg, and the egg is in the pan.\n- putflourinpan <flour> <pan>: This action allows you to put flour in a pan. The preconditions are that the flour is flour, the pan does not already have flour, the pan is not mixed, the pan is clean, and the pan is not in the oven. The effect is that the pan now has flour, and the flour is in the pan.\n- mix <egg> <flour> <pan>: This action allows you to mix the contents of a pan. The preconditions are that the pan contains an egg and flour, both the egg and flour are in the pan, and the pan is not in the oven. The effect is that the pan is mixed, and neither the egg nor the flour are considered to be in the pan anymore, nor does the pan have egg or flour.\n- putpaninoven <pan> <oven>: This action allows you to put a pan in the oven. The preconditions are that the oven is not full and the pan is not already in the oven. The effect is that the oven becomes full, the pan is in the oven, and the pan is considered to be in the oven.\n- removepanfromoven <pan> <oven>: This action allows you to remove a pan from the oven. The precondition is that the pan is in the oven. The effect is that the oven is not full, the pan is not in the oven, and the pan is considered not to be in the oven.\n- bakecake <oven> <pan> <new ingredient>: This action allows you to bake a cake. The preconditions are that the pan is mixed, the pan is in the oven, and the new ingredient is hypothetical. The effect is that the pan is not mixed, the pan is not clean, the new ingredient is no longer hypothetical, and the new ingredient is a cake.\n- bakesouffle <oven> <egg> <pan> <new ingredient>: This action allows you to bake a souffl\u00e9. The preconditions are that an egg is in the pan, the egg is an egg, the pan does not have flour, the pan is in the oven, and the new ingredient is hypothetical. The effect is that the egg is no longer considered an egg, the egg is not in the pan, the pan does not have an egg, the pan is not clean, the new ingredient is no longer hypothetical, and the new ingredient is a souffl\u00e9.\n- cleanpan <pan> <soap>: This action allows you to clean a pan. The preconditions are that the soap is not consumed and the pan is not in the oven. The effect is that the pan is clean, and the soap is consumed.\n\nYou have the following restrictions on your actions:\n- You can only put an egg or flour in a pan if it is clean and not already mixed or in the oven.\n- You can only mix the contents of a pan if it contains both an egg and flour and is not in the oven.\n- You can only put a pan in the oven if the oven is not full and the pan is not already in the oven.\n- You can only remove a pan from the oven if it is currently in the oven.\n- You can only bake a cake or souffl\u00e9 if the pan is in the oven and the ingredients are correctly prepared.\n- You can only clean a pan if it is not in the oven and you have soap that is not consumed.\n\nOnce you perform an action, the state of the kitchen changes according to the effects of that action, preparing you for the next step in your baking task.",
        "domain_name": "baking",
        "nl_interface": {
            "isegg": "{arg1} is an egg.",
            "isflour": "{arg1} is flour.",
            "panhasegg": "The pan {arg1} has an egg.",
            "panhasflour": "The pan {arg1} has flour.",
            "panisclean": "The pan {arg1} is clean.",
            "paninoven": "The pan {arg1} is in the oven.",
            "inpan": "{arg1} is in the pan {arg2}.",
            "inoven": "The pan {arg1} is in the oven {arg2}.",
            "ovenisfull": "The oven {arg1} is full.",
            "hypothetical": "{arg1} is a hypothetical ingredient.",
            "ismixed": "The pan {arg1} is mixed.",
            "iscake": "{arg1} is a cake.",
            "issouffle": "{arg1} is a souffl\u00e9.",
            "soapconsumed": "The soap {arg1} is consumed.",
            "putegginpan": "Put the egg {arg1} in the pan {arg2}.",
            "putflourinpan": "Put the flour {arg1} in the pan {arg2}.",
            "mix": "Mix the egg {arg1} and flour {arg2} in the pan {arg3}.",
            "putpaninoven": "Put the pan {arg1} in the oven {arg2}.",
            "removepanfromoven": "Remove the pan {arg1} from the oven {arg2}.",
            "bakecake": "Bake a cake with the new ingredient {arg1} in the oven {arg2} using the pan {arg3}.",
            "bakesouffle": "Bake a souffl\u00e9 with the new ingredient {arg1} in the oven {arg2} using the egg {arg3} and the pan {arg4}.",
            "cleanpan": "Clean the pan {arg1} with the soap {arg2}."
        },
        "nl_interface_debug": [
            {
                "nl": "{\n    \"isegg\": \"{arg1} is an egg.\",\n    \"isflour\": \"{arg1} is flour.\",\n    \"panhasegg\": \"The pan {arg1} has an egg.\",\n    \"panhasflour\": \"The pan {arg1} has flour.\",\n    \"panisclean\": \"The pan {arg1} is clean.\",\n    \"paninoven\": \"The pan {arg1} is in the oven.\",\n    \"inpan\": \"{arg1} is in the pan {arg2}.\",\n    \"inoven\": \"The pan {arg1} is in the oven {arg2}.\",\n    \"ovenisfull\": \"The oven {arg1} is full.\",\n    \"hypothetical\": \"{arg1} is a hypothetical ingredient.\",\n    \"ismixed\": \"The pan {arg1} is mixed.\",\n    \"iscake\": \"{arg1} is a cake.\",\n    \"issouffle\": \"{arg1} is a souffl\u00e9.\",\n    \"soapconsumed\": \"The soap {arg1} is consumed.\",\n    \"putegginpan\": \"Put the egg {arg1} in the pan {arg2}.\",\n    \"putflourinpan\": \"Put the flour {arg1} in the pan {arg2}.\",\n    \"mix\": \"Mix the egg {arg1} and flour {arg2} in the pan {arg3}.\",\n    \"putpaninoven\": \"Put the pan {arg1} in the oven {arg2}.\",\n    \"removepanfromoven\": \"Remove the pan {arg1} from the oven {arg2}.\",\n    \"bakecake\": \"Bake a cake with the new ingredient {arg1} in the oven {arg2} using the pan {arg3}.\",\n    \"bakesouffle\": \"Bake a souffl\u00e9 with the new ingredient {arg1} in the oven {arg2} using the egg {arg3} and the pan {arg4}.\",\n    \"cleanpan\": \"Clean the pan {arg1} with the soap {arg2}.\"\n}",
                "gpt_response": "```python\n{\n    \"isegg\": \"{arg1} is an egg.\",\n    \"isflour\": \"{arg1} is flour.\",\n    \"panhasegg\": \"The pan {arg1} has an egg.\",\n    \"panhasflour\": \"The pan {arg1} has flour.\",\n    \"panisclean\": \"The pan {arg1} is clean.\",\n    \"paninoven\": \"The pan {arg1} is in the oven.\",\n    \"inpan\": \"{arg1} is in the pan {arg2}.\",\n    \"inoven\": \"The pan {arg1} is in the oven {arg2}.\",\n    \"ovenisfull\": \"The oven {arg1} is full.\",\n    \"hypothetical\": \"{arg1} is a hypothetical ingredient.\",\n    \"ismixed\": \"The pan {arg1} is mixed.\",\n    \"iscake\": \"{arg1} is a cake.\",\n    \"issouffle\": \"{arg1} is a souffl\u00e9.\",\n    \"soapconsumed\": \"The soap {arg1} is consumed.\",\n    \"putegginpan\": \"Put the egg {arg1} in the pan {arg2}.\",\n    \"putflourinpan\": \"Put the flour {arg1} in the pan {arg2}.\",\n    \"mix\": \"Mix the egg {arg1} and flour {arg2} in the pan {arg3}.\",\n    \"putpaninoven\": \"Put the pan {arg1} in the oven {arg2}.\",\n    \"removepanfromoven\": \"Remove the pan {arg1} from the oven {arg2}.\",\n    \"bakecake\": \"Bake a cake with the new ingredient {arg1} in the oven {arg2} using the pan {arg3}.\",\n    \"bakesouffle\": \"Bake a souffl\u00e9 with the new ingredient {arg1} in the oven {arg2} using the egg {arg3} and the pan {arg4}.\",\n    \"cleanpan\": \"Clean the pan {arg1} with the soap {arg2}.\"\n}\n```"
            }
        ]
    },
    {
        "problems": [
            "(define (problem hanoi3)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 d1 d2 d3 d4 d5 d6)\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2) (smaller peg1 d3) (smaller peg1 d4)\n   (smaller peg1 d5) (smaller peg1 d6)\n   (smaller peg2 d1) (smaller peg2 d2) (smaller peg2 d3) (smaller peg2 d4)\n   (smaller peg2 d5) (smaller peg2 d6)\n   (smaller peg3 d1) (smaller peg3 d2) (smaller peg3 d3) (smaller peg3 d4)\n   (smaller peg3 d5) (smaller peg3 d6)\n   (smaller d2 d1) (smaller d3 d1) (smaller d3 d2) (smaller d4 d1)\n   (smaller d4 d2) (smaller d4 d3) (smaller d5 d1) (smaller d5 d2)\n   (smaller d5 d3) (smaller d5 d4) (smaller d6 d1) (smaller d6 d2)\n   (smaller d6 d3) (smaller d6 d4) (smaller d6 d5)\n   (clear peg2) (clear peg3) (clear d1)\n   (on d6 peg1) (on d5 d6) (on d4 d5) (on d3 d4) (on d2 d3) (on d1 d2)\n  )\n  (:goal (and (on d6 peg3) (on d5 d6) (on d4 d5) (on d3 d4) (on d2 d3)\n\t      (on d1 d2)))\n  )",
            "(define (problem hanoi2)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 d1 d2 d3)\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2) (smaller peg1 d3)\n   (smaller peg2 d1) (smaller peg2 d2) (smaller peg2 d3)\n   (smaller peg3 d1) (smaller peg3 d2) (smaller peg3 d3)\n   (smaller d2 d1) (smaller d3 d1) (smaller d3 d2)\n   (clear peg2) (clear peg3) (clear d1)\n   (on d3 peg1) (on d2 d3) (on d1 d2)\n  )\n  (:goal (and (on d3 peg3) (on d2 d3) (on d1 d2)))\n)",
            "(define (problem hanoi3)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 d1 d2 d3 d4) ; Simplified problem with fewer discs\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2) (smaller peg1 d3) (smaller peg1 d4)\n   (smaller peg2 d1) (smaller peg2 d2) (smaller peg2 d3) (smaller peg2 d4)\n   (smaller peg3 d1) (smaller peg3 d2) (smaller peg3 d3) (smaller peg3 d4)\n   (smaller d2 d1) (smaller d3 d1) (smaller d3 d2) (smaller d4 d1)\n   (smaller d4 d2) (smaller d4 d3)\n   (clear peg2) (clear peg3) (clear d1)\n   (on d4 peg1) (on d3 d4) (on d2 d3) (on d1 d2)\n  )\n  (:goal (and (on d4 peg3) (on d3 d4) (on d2 d3) (on d1 d2)))\n)",
            "(define (problem hanoi2)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 d1 d2 d3 d4 d5) ; Added one more disc d5 for complexity\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2) (smaller peg1 d3) (smaller peg1 d4) (smaller peg1 d5)\n   (smaller peg2 d1) (smaller peg2 d2) (smaller peg2 d3) (smaller peg2 d4) (smaller peg2 d5)\n   (smaller peg3 d1) (smaller peg3 d2) (smaller peg3 d3) (smaller peg3 d4) (smaller peg3 d5)\n   (smaller d2 d1) (smaller d3 d1) (smaller d3 d2) (smaller d4 d1) (smaller d4 d2)\n   (smaller d4 d3) (smaller d5 d1) (smaller d5 d2) (smaller d5 d3) (smaller d5 d4)\n   (clear peg2) (clear peg3) (clear d1)\n   (on d5 peg1) (on d4 d5) (on d3 d4) (on d2 d3) (on d1 d2) ; d5 added to the stack\n  )\n  (:goal (and (on d5 peg3) (on d4 d5) (on d3 d4) (on d2 d3) (on d1 d2))) ; More complex goal with d5\n  )",
            "(define (problem hanoi1)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 d1 d2 d3 d4)\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2) (smaller peg1 d3) (smaller peg1 d4)\n   (smaller peg2 d1) (smaller peg2 d2) (smaller peg2 d3) (smaller peg2 d4)\n   (smaller peg3 d1) (smaller peg3 d2) (smaller peg3 d3) (smaller peg3 d4)\n   (smaller d2 d1) (smaller d3 d1) (smaller d4 d1)\n   (smaller d3 d2) (smaller d4 d2)\n   (smaller d4 d3)\n   (clear peg2) (clear peg3) (clear d1)\n   (on d4 peg1) (on d3 d4) (on d2 d3) (on d1 d2)\n  )\n  (:goal (and (on d4 peg3) (on d3 d4) (on d2 d3) (on d1 d2)))\n)",
            "(define (problem hanoi1)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 d1 d2)\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2)\n   (smaller peg2 d1) (smaller peg2 d2)\n   (smaller peg3 d1) (smaller peg3 d2)\n   (smaller d2 d1)\n   (clear peg2) (clear peg3) (clear d1)\n   (on d2 peg1) (on d1 d2)\n  )\n  (:goal (and (on d2 peg2) (on d1 d2)))\n  )",
            "(define (problem hanoi2)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 d1)\n  (:init\n   (smaller peg1 d1)\n   (smaller peg2 d1)\n   (smaller peg3 d1)\n   (clear d1)\n   (on d1 peg1)\n   (clear peg2)\n   (clear peg3)\n  )\n  (:goal (and (on d1 peg3)))\n)",
            "(define (problem hanoi0)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 d1 d2 d3)\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2) (smaller peg1 d3)\n   (smaller peg2 d1) (smaller peg2 d2) (smaller peg2 d3)\n   (smaller peg3 d1) (smaller peg3 d2) (smaller peg3 d3)\n   (smaller d2 d1) (smaller d3 d1) (smaller d3 d2)\n   (clear peg2) (clear peg3) (clear d1)\n   (on d3 peg1) (on d2 d3) (on d1 d2)\n  )\n  (:goal (and (on d3 peg3) (on d2 d3) (on d1 d2)))\n  )",
            "(define (problem hanoi2)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 peg4 d1 d2 d3 d4)\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2) (smaller peg1 d3) (smaller peg1 d4)\n   (smaller peg2 d1) (smaller peg2 d2) (smaller peg2 d3) (smaller peg2 d4)\n   (smaller peg3 d1) (smaller peg3 d2) (smaller peg3 d3) (smaller peg3 d4)\n   (smaller peg4 d1) (smaller peg4 d2) (smaller peg4 d3) (smaller peg4 d4)\n   (smaller d4 d1) (smaller d4 d2) (smaller d4 d3)\n   (smaller d3 d1) (smaller d3 d2)\n   (smaller d2 d1)\n   (clear peg2) (clear peg3) (clear peg4) (clear d1)\n   (on d4 peg1) (on d3 d4) (on d2 d3) (on d1 d2)\n  )\n  (:goal (and (on d4 peg4) (on d3 d4) (on d2 d3) (on d1 d2)))\n)",
            "(define (problem hanoi2)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 d1 d2 d3 d4 d5)\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2) (smaller peg1 d3)\n   (smaller peg1 d4) (smaller peg1 d5)\n   (smaller peg2 d1) (smaller peg2 d2) (smaller peg2 d3)\n   (smaller peg2 d4) (smaller peg2 d5)\n   (smaller peg3 d1) (smaller peg3 d2) (smaller peg3 d3)\n   (smaller peg3 d4) (smaller peg3 d5)\n   (smaller d2 d1) (smaller d3 d1) (smaller d3 d2) (smaller d4 d1)\n   (smaller d4 d2) (smaller d4 d3) (smaller d5 d1) (smaller d5 d2)\n   (smaller d5 d3) (smaller d5 d4)\n   (clear peg2) (clear peg3) (clear d1)\n   (on d5 peg1) (on d4 d5) (on d3 d4) (on d2 d3) (on d1 d2)\n  )\n  (:goal (and (on d5 peg3) (on d4 d5) (on d3 d4) (on d2 d3) (on d1 d2)))\n  )",
            "(define (problem hanoi_simple)\n  (:domain hanoi)\n  (:objects peg1 peg2 d1)\n  (:init\n   (smaller peg1 d1)\n   (smaller peg2 d1)\n   (clear peg2) (clear d1)\n   (on d1 peg1)\n  )\n  (:goal (and (on d1 peg2)))\n  )",
            "(define (problem hanoi3)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 d1 d2 d3 d4 d5 d6 d7)\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2) (smaller peg1 d3) (smaller peg1 d4)\n   (smaller peg1 d5) (smaller peg1 d6) (smaller peg1 d7)\n   (smaller peg2 d1) (smaller peg2 d2) (smaller peg2 d3) (smaller peg2 d4)\n   (smaller peg2 d5) (smaller peg2 d6) (smaller peg2 d7)\n   (smaller peg3 d1) (smaller peg3 d2) (smaller peg3 d3) (smaller peg3 d4)\n   (smaller peg3 d5) (smaller peg3 d6) (smaller peg3 d7)\n   (smaller d2 d1) (smaller d3 d1) (smaller d3 d2) (smaller d4 d1)\n   (smaller d4 d2) (smaller d4 d3) (smaller d5 d1) (smaller d5 d2)\n   (smaller d5 d3) (smaller d5 d4) (smaller d6 d1) (smaller d6 d2)\n   (smaller d6 d3) (smaller d6 d4) (smaller d6 d5) (smaller d7 d1)\n   (smaller d7 d2) (smaller d7 d3) (smaller d7 d4) (smaller d7 d5)\n   (smaller d7 d6)\n   (clear peg2) (clear peg3) (clear d1)\n   (on d7 peg1) (on d6 d7) (on d5 d6) (on d4 d5) (on d3 d4) (on d2 d3) (on d1 d2)\n  )\n  (:goal (and (on d7 peg3) (on d6 d7) (on d5 d6) (on d4 d5) (on d3 d4) (on d2 d3) (on d1 d2)))\n  )",
            "(define (problem hanoi4)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 d1 d2 d3 d4 d5 d6 d7 d8)\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2) (smaller peg1 d3) (smaller peg1 d4) (smaller peg1 d5) (smaller peg1 d6) (smaller peg1 d7) (smaller peg1 d8)\n   (smaller peg2 d1) (smaller peg2 d2) (smaller peg2 d3) (smaller peg2 d4) (smaller peg2 d5) (smaller peg2 d6) (smaller peg2 d7) (smaller peg2 d8)\n   (smaller peg3 d1) (smaller peg3 d2) (smaller peg3 d3) (smaller peg3 d4) (smaller peg3 d5) (smaller peg3 d6) (smaller peg3 d7) (smaller peg3 d8)\n   (smaller d2 d1) (smaller d3 d1) (smaller d3 d2) (smaller d4 d1) (smaller d4 d2) (smaller d4 d3)\n   (smaller d5 d1) (smaller d5 d2) (smaller d5 d3) (smaller d5 d4) (smaller d6 d1) (smaller d6 d2)\n   (smaller d6 d3) (smaller d6 d4) (smaller d6 d5) (smaller d7 d1) (smaller d7 d2) (smaller d7 d3)\n   (smaller d7 d4) (smaller d7 d5) (smaller d7 d6) (smaller d8 d1) (smaller d8 d2) (smaller d8 d3)\n   (smaller d8 d4) (smaller d8 d5) (smaller d8 d6) (smaller d8 d7)\n   (clear peg2) (clear peg3) (clear d1)\n   (on d8 peg1) (on d7 d8) (on d6 d7) (on d5 d6) (on d4 d5) (on d3 d4) (on d2 d3) (on d1 d2)\n  )\n  (:goal (and (on d8 peg3) (on d7 d8) (on d6 d7) (on d5 d6) (on d4 d5) (on d3 d4) (on d2 d3) (on d1 d2)))\n)",
            "(define (problem hanoi3)\n  (:domain hanoi)\n  (:objects peg1 peg2 d1 d2)\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2)\n   (smaller peg2 d1) (smaller peg2 d2)\n   (smaller d2 d1)\n   (clear d1) (clear d2)\n   (on d1 peg1) (on d2 peg2)\n  )\n  (:goal (and (on d1 d2)))\n  )",
            "(define (problem hanoi4)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 d1 d2 d3 d4 d5 d6 d7) ; Added one more disc d7 for complexity\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2) (smaller peg1 d3) (smaller peg1 d4)\n   (smaller peg1 d5) (smaller peg1 d6) (smaller peg1 d7)\n   (smaller peg2 d1) (smaller peg2 d2) (smaller peg2 d3) (smaller peg2 d4)\n   (smaller peg2 d5) (smaller peg2 d6) (smaller peg2 d7)\n   (smaller peg3 d1) (smaller peg3 d2) (smaller peg3 d3) (smaller peg3 d4)\n   (smaller peg3 d5) (smaller peg3 d6) (smaller peg3 d7)\n   (smaller d2 d1) (smaller d3 d1) (smaller d3 d2) (smaller d4 d1)\n   (smaller d4 d2) (smaller d4 d3) (smaller d5 d1) (smaller d5 d2)\n   (smaller d5 d3) (smaller d5 d4) (smaller d6 d1) (smaller d6 d2)\n   (smaller d6 d3) (smaller d6 d4) (smaller d6 d5) (smaller d7 d1)\n   (smaller d7 d2) (smaller d7 d3) (smaller d7 d4) (smaller d7 d5)\n   (smaller d7 d6)\n   (clear peg2) (clear peg3) (clear d1)\n   (on d7 peg1) (on d6 d7) (on d5 d6) (on d4 d5) (on d3 d4) (on d2 d3) (on d1 d2)\n  )\n  (:goal (and (on d7 peg3) (on d6 d7) (on d5 d6) (on d4 d5) (on d3 d4) (on d2 d3)\n\t      (on d1 d2)))\n)",
            "(define (problem hanoi_simplified)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 d1 d2)\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2)\n   (smaller peg2 d1) (smaller peg2 d2)\n   (smaller peg3 d1) (smaller peg3 d2)\n   (smaller d2 d1)\n   (clear peg2) (clear peg3) (clear d1)\n   (on d2 peg1) (on d1 d2)\n  )\n  (:goal (and (on d2 peg3) (on d1 d2)))\n  )",
            "(define (problem hanoi3)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 d1 d2 d3 d4 d5 d6 d7)\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2) (smaller peg1 d3) (smaller peg1 d4) (smaller peg1 d5) (smaller peg1 d6) (smaller peg1 d7)\n   (smaller peg2 d1) (smaller peg2 d2) (smaller peg2 d3) (smaller peg2 d4) (smaller peg2 d5) (smaller peg2 d6) (smaller peg2 d7)\n   (smaller peg3 d1) (smaller peg3 d2) (smaller peg3 d3) (smaller peg3 d4) (smaller peg3 d5) (smaller peg3 d6) (smaller peg3 d7)\n   (smaller d2 d1) (smaller d3 d1) (smaller d3 d2) (smaller d4 d1) (smaller d4 d2) (smaller d4 d3)\n   (smaller d5 d1) (smaller d5 d2) (smaller d5 d3) (smaller d5 d4) (smaller d6 d1) (smaller d6 d2)\n   (smaller d6 d3) (smaller d6 d4) (smaller d6 d5) (smaller d7 d1) (smaller d7 d2) (smaller d7 d3)\n   (smaller d7 d4) (smaller d7 d5) (smaller d7 d6)\n   (clear peg2) (clear peg3) (clear d1)\n   (on d7 peg1) (on d6 d7) (on d5 d6) (on d4 d5) (on d3 d4) (on d2 d3) (on d1 d2)\n  )\n  (:goal (and (on d7 peg3) (on d6 d7) (on d5 d6) (on d4 d5) (on d3 d4) (on d2 d3) (on d1 d2)))\n)",
            "(define (problem hanoi1)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 d1 d2 d3 d4)\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2) (smaller peg1 d3) (smaller peg1 d4)\n   (smaller peg2 d1) (smaller peg2 d2) (smaller peg2 d3) (smaller peg2 d4)\n   (smaller peg3 d1) (smaller peg3 d2) (smaller peg3 d3) (smaller peg3 d4)\n   (smaller d2 d1) (smaller d3 d1) (smaller d3 d2) (smaller d4 d1)\n   (smaller d4 d2) (smaller d4 d3)\n   (clear peg2) (clear peg3) (clear d1)\n   (on d4 peg1) (on d3 d4) (on d2 d3) (on d1 d2)\n  )\n  (:goal (and (on d4 peg3) (on d3 d4) (on d2 d3) (on d1 d2)))\n  )",
            "(define (problem hanoi2)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 d1 d2)\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2)\n   (smaller peg2 d1) (smaller peg2 d2)\n   (smaller peg3 d1) (smaller peg3 d2)\n   (smaller d2 d1)\n   (clear peg2) (clear peg3) (clear d1)\n   (on d1 d2) (on d2 peg1)\n  )\n  (:goal (and (on d2 peg3) (on d1 d2)))\n  )",
            "(define (problem hanoi_advanced)\n  (:domain hanoi)\n  (:objects peg1 peg2 peg3 d1 d2 d3 d4)\n  (:init\n   (smaller peg1 d1) (smaller peg1 d2) (smaller peg1 d3) (smaller peg1 d4)\n   (smaller peg2 d1) (smaller peg2 d2) (smaller peg2 d3) (smaller peg2 d4)\n   (smaller peg3 d1) (smaller peg3 d2) (smaller peg3 d3) (smaller peg3 d4)\n   (smaller d4 d1) (smaller d4 d2) (smaller d4 d3)\n   (smaller d3 d1) (smaller d3 d2)\n   (smaller d2 d1)\n   (clear peg2) (clear peg3) (clear d1)\n   (on d4 peg1) (on d3 d4) (on d2 d3) (on d1 d2)\n  )\n  (:goal (and (on d4 peg3) (on d3 d4) (on d2 d3) (on d1 d2)))\n  )"
        ],
        "domain": "(define (domain hanoi)\n  (:requirements :strips)\n  (:predicates\n  (clear ?x)\n  (on ?x ?y)\n  (smaller ?x ?y)\n  )\n\n  (:action move\n    :parameters (?disc ?from ?to)\n    :precondition (and (smaller ?to ?disc) (on ?disc ?from)\n               (clear ?disc) (clear ?to))\n    :effect  (and (clear ?from) (on ?disc ?to) (not (on ?disc ?from))\n          (not (clear ?to))))\n  )\n",
        "description": "Your goal is to solve the Tower of Hanoi puzzle, which involves moving a stack of discs from one peg to another, with the restriction that no disc may be placed on top of a smaller disc. The puzzle is solved when all the discs are moved to the target peg following these rules.\n\nThe actions defined in this domain include:\n- move <disc> <from> <to>: This action allows moving a disc from one peg to another. The preconditions for this action are that the target peg is smaller than the disc being moved, the disc is on the source peg, and both the disc and the target peg are clear (i.e., there is no disc on top of them). The effect of this action is that the source peg becomes clear, the disc is now on the target peg, the disc is no longer on the source peg, and the target peg is no longer clear.\n\nYou have the following restrictions on your actions:\n- A disc can only be moved if it is clear, meaning there is no other disc on top of it.\n- A disc can only be placed on another disc or peg that is larger than itself.\n- A disc can only be moved to a peg that is clear.\n- Once a disc is moved from a peg, that peg becomes clear.\n- Once a disc is placed on a peg, that peg is no longer clear.",
        "domain_name": "hanoi_operator_actions",
        "nl_interface": {
            "clear": "{arg1} is clear.",
            "on": "{arg1} is on {arg2}.",
            "smaller": "{arg1} is smaller than {arg2}.",
            "move": "Move disc {arg1} from {arg2} to {arg3}."
        },
        "nl_interface_debug": [
            {
                "nl": "{\n    \"clear\": \"{arg1} is clear.\",\n    \"on\": \"{arg1} is on {arg2}.\",\n    \"smaller\": \"{arg1} is smaller than {arg2}.\",\n    \"move\": \"Move disc {arg1} from {arg2} to {arg3}.\"\n}",
                "gpt_response": "```python\n{\n    \"clear\": \"{arg1} is clear.\",\n    \"on\": \"{arg1} is on {arg2}.\",\n    \"smaller\": \"{arg1} is smaller than {arg2}.\",\n    \"move\": \"Move disc {arg1} from {arg2} to {arg3}.\"\n}\n```"
            }
        ]
    },
    {
        "problems": [
            "(define (problem advanced_doors) \n    (:domain doors)\n\n    (:objects\n    key-e - key\n\tkey-f - key\n\tkey-g - key\n\tkey-h - key\n\tloc-e-0 - location\n\tloc-e-1 - location\n\tloc-e-2 - location\n\tloc-e-3 - location\n\tloc-f-0 - location\n\tloc-f-1 - location\n\tloc-f-2 - location\n\tloc-f-3 - location\n\tloc-g-0 - location\n\tloc-g-1 - location\n\tloc-g-2 - location\n\tloc-g-3 - location\n\tloc-h-0 - location\n\tloc-h-1 - location\n\tloc-h-2 - location\n\tloc-h-3 - location\n\troom-e - room\n\troom-f - room\n\troom-g - room\n\troom-h - room\n    )\n\n    (:init\n    (at loc-e-0)\n\t(unlocked room-e)\n\t(locinroom loc-e-0 room-e)\n\t(moveto loc-e-0)\n\t(locinroom loc-e-1 room-f)\n\t(moveto loc-e-1)\n\t(locinroom loc-e-2 room-g)\n\t(moveto loc-e-2)\n\t(locinroom loc-e-3 room-h)\n\t(moveto loc-e-3)\n\t(locinroom loc-f-0 room-e)\n\t(moveto loc-f-0)\n\t(locinroom loc-f-1 room-f)\n\t(moveto loc-f-1)\n\t(locinroom loc-f-2 room-g)\n\t(moveto loc-f-2)\n\t(locinroom loc-f-3 room-h)\n\t(moveto loc-f-3)\n\t(locinroom loc-g-0 room-e)\n\t(moveto loc-g-0)\n\t(locinroom loc-g-1 room-f)\n\t(moveto loc-g-1)\n\t(locinroom loc-g-2 room-g)\n\t(moveto loc-g-2)\n\t(locinroom loc-g-3 room-h)\n\t(moveto loc-g-3)\n\t(locinroom loc-h-0 room-e)\n\t(moveto loc-h-0)\n\t(locinroom loc-h-1 room-f)\n\t(moveto loc-h-1)\n\t(locinroom loc-h-2 room-g)\n\t(moveto loc-h-2)\n\t(locinroom loc-h-3 room-h)\n\t(moveto loc-h-3)\n\t(keyforroom key-e room-f)\n\t(keyat key-e loc-f-0)\n\t(pick key-e)\n\t(keyforroom key-f room-g)\n\t(keyat key-f loc-g-1)\n\t(pick key-f)\n\t(keyforroom key-g room-h)\n\t(keyat key-g loc-h-2)\n\t(pick key-g)\n\t(keyforroom key-h room-e)\n\t(keyat key-h loc-e-3)\n\t(pick key-h)\n    )\n\n    (:goal (and (unlocked room-e) (unlocked room-f) (unlocked room-g) (unlocked room-h) (at loc-h-3)))\n)",
            "(define (problem advanced_doors) \n    (:domain doors)\n\n    (:objects\n    key-4 - key\n\tkey-5 - key\n\tkey-6 - key\n\tkey-7 - key\n\tloc-8-0 - location\n\tloc-8-1 - location\n\tloc-8-2 - location\n\tloc-8-3 - location\n\tloc-8-4 - location\n\tloc-8-5 - location\n\tloc-8-6 - location\n\tloc-8-7 - location\n\tloc-8-8 - location\n\tloc-8-9 - location\n\tloc-9-0 - location\n\tloc-9-1 - location\n\tloc-9-2 - location\n\tloc-9-3 - location\n\tloc-9-4 - location\n\tloc-9-5 - location\n\tloc-9-6 - location\n\tloc-9-7 - location\n\tloc-9-8 - location\n\tloc-9-9 - location\n\troom-7 - room\n\troom-8 - room\n\troom-9 - room\n    )\n\n    (:init\n    (at loc-8-0)\n\t(unlocked room-7)\n\t(locinroom loc-8-0 room-7)\n\t(moveto loc-8-0)\n\t(locinroom loc-8-1 room-8)\n\t(moveto loc-8-1)\n\t(locinroom loc-8-2 room-9)\n\t(moveto loc-8-2)\n\t(locinroom loc-8-3 room-7)\n\t(moveto loc-8-3)\n\t(locinroom loc-8-4 room-7)\n\t(moveto loc-8-4)\n\t(locinroom loc-8-5 room-7)\n\t(moveto loc-8-5)\n\t(locinroom loc-8-6 room-7)\n\t(moveto loc-8-6)\n\t(locinroom loc-8-7 room-7)\n\t(moveto loc-8-7)\n\t(locinroom loc-8-8 room-7)\n\t(moveto loc-8-8)\n\t(locinroom loc-8-9 room-7)\n\t(moveto loc-8-9)\n\t(locinroom loc-9-0 room-7)\n\t(moveto loc-9-0)\n\t(locinroom loc-9-1 room-8)\n\t(moveto loc-9-1)\n\t(locinroom loc-9-2 room-9)\n\t(moveto loc-9-2)\n\t(locinroom loc-9-3 room-7)\n\t(moveto loc-9-3)\n\t(locinroom loc-9-4 room-7)\n\t(moveto loc-9-4)\n\t(locinroom loc-9-5 room-7)\n\t(moveto loc-9-5)\n\t(locinroom loc-9-6 room-7)\n\t(moveto loc-9-6)\n\t(locinroom loc-9-7 room-7)\n\t(moveto loc-9-7)\n\t(locinroom loc-9-8 room-7)\n\t(moveto loc-9-8)\n\t(locinroom loc-9-9 room-7)\n\t(moveto loc-9-9)\n\t(keyforroom key-4 room-8)\n\t(keyat key-4 loc-8-3)\n\t(pick key-4)\n\t(keyforroom key-5 room-9)\n\t(keyat key-5 loc-9-1)\n\t(pick key-5)\n\t(keyforroom key-6 room-7)\n\t(keyat key-6 loc-8-1)\n\t(pick key-6)\n\t(keyforroom key-7 room-8)\n\t(keyat key-7 loc-9-3)\n\t(pick key-7)\n    )\n\n    (:goal (and (unlocked room-8) (unlocked room-9) (at loc-9-9)))\n)",
            "(define (problem advanced_doors) \n    (:domain doors)\n\n    (:objects\n    key-6 - key\n\tkey-7 - key\n\tkey-8 - key\n\tkey-9 - key\n\tkey-10 - key\n\tloc-8-0 - location\n\tloc-8-1 - location\n\tloc-8-2 - location\n\tloc-8-3 - location\n\tloc-8-4 - location\n\tloc-8-5 - location\n\tloc-8-6 - location\n\tloc-8-7 - location\n\tloc-8-8 - location\n\tloc-8-9 - location\n\tloc-9-0 - location\n\tloc-9-1 - location\n\tloc-9-2 - location\n\tloc-9-3 - location\n\tloc-9-4 - location\n\tloc-9-5 - location\n\tloc-9-6 - location\n\tloc-9-7 - location\n\tloc-9-8 - location\n\tloc-9-9 - location\n\troom-7 - room\n\troom-8 - room\n\troom-9 - room\n    )\n\n    (:init\n    (at loc-8-0)\n\t(unlocked room-7)\n\t(locinroom loc-8-0 room-7)\n\t(moveto loc-8-0)\n\t(locinroom loc-8-1 room-8)\n\t(moveto loc-8-1)\n\t(locinroom loc-8-2 room-9)\n\t(moveto loc-8-2)\n\t(locinroom loc-8-3 room-7)\n\t(moveto loc-8-3)\n\t(locinroom loc-8-4 room-7)\n\t(moveto loc-8-4)\n\t(locinroom loc-8-5 room-7)\n\t(moveto loc-8-5)\n\t(locinroom loc-8-6 room-7)\n\t(moveto loc-8-6)\n\t(locinroom loc-8-7 room-7)\n\t(moveto loc-8-7)\n\t(locinroom loc-8-8 room-7)\n\t(moveto loc-8-8)\n\t(locinroom loc-8-9 room-7)\n\t(moveto loc-8-9)\n\t(locinroom loc-9-0 room-7)\n\t(moveto loc-9-0)\n\t(locinroom loc-9-1 room-7)\n\t(moveto loc-9-1)\n\t(locinroom loc-9-2 room-7)\n\t(moveto loc-9-2)\n\t(locinroom loc-9-3 room-7)\n\t(moveto loc-9-3)\n\t(locinroom loc-9-4 room-7)\n\t(moveto loc-9-4)\n\t(locinroom loc-9-5 room-7)\n\t(moveto loc-9-5)\n\t(locinroom loc-9-6 room-7)\n\t(moveto loc-9-6)\n\t(locinroom loc-9-7 room-7)\n\t(moveto loc-9-7)\n\t(locinroom loc-9-8 room-7)\n\t(moveto loc-9-8)\n\t(locinroom loc-9-9 room-7)\n\t(moveto loc-9-9)\n\t(keyforroom key-6 room-8)\n\t(keyat key-6 loc-8-2)\n\t(pick key-6)\n\t(keyforroom key-7 room-9)\n\t(keyat key-7 loc-8-1)\n\t(pick key-7)\n\t(keyforroom key-8 room-7)\n\t(keyat key-8 loc-9-5)\n\t(pick key-8)\n\t(keyforroom key-9 room-8)\n\t(keyat key-9 loc-9-2)\n\t(pick key-9)\n\t(keyforroom key-10 room-9)\n\t(keyat key-10 loc-9-1)\n\t(pick key-10)\n    )\n\n    (:goal (and (unlocked room-8) (unlocked room-9) (at loc-9-9)))\n)",
            "(define (problem complex_doors) \n    (:domain doors)\n\n    (:objects\n    key-a - key\n\tkey-b - key\n\tkey-c - key\n\tkey-d - key\n\tloc-a-0 - location\n\tloc-a-1 - location\n\tloc-a-2 - location\n\tloc-a-3 - location\n\tloc-b-0 - location\n\tloc-b-1 - location\n\tloc-b-2 - location\n\tloc-b-3 - location\n\tloc-c-0 - location\n\tloc-c-1 - location\n\tloc-c-2 - location\n\tloc-c-3 - location\n\tloc-d-0 - location\n\tloc-d-1 - location\n\tloc-d-2 - location\n\tloc-d-3 - location\n\troom-a - room\n\troom-b - room\n\troom-c - room\n\troom-d - room\n    )\n\n    (:init\n    (at loc-a-0)\n\t(unlocked room-a)\n\t(locinroom loc-a-0 room-a)\n\t(moveto loc-a-0)\n\t(locinroom loc-a-1 room-b)\n\t(moveto loc-a-1)\n\t(locinroom loc-a-2 room-c)\n\t(moveto loc-a-2)\n\t(locinroom loc-a-3 room-d)\n\t(moveto loc-a-3)\n\t(locinroom loc-b-0 room-a)\n\t(moveto loc-b-0)\n\t(locinroom loc-b-1 room-b)\n\t(moveto loc-b-1)\n\t(locinroom loc-b-2 room-c)\n\t(moveto loc-b-2)\n\t(locinroom loc-b-3 room-d)\n\t(moveto loc-b-3)\n\t(locinroom loc-c-0 room-a)\n\t(moveto loc-c-0)\n\t(locinroom loc-c-1 room-b)\n\t(moveto loc-c-1)\n\t(locinroom loc-c-2 room-c)\n\t(moveto loc-c-2)\n\t(locinroom loc-c-3 room-d)\n\t(moveto loc-c-3)\n\t(locinroom loc-d-0 room-a)\n\t(moveto loc-d-0)\n\t(locinroom loc-d-1 room-b)\n\t(moveto loc-d-1)\n\t(locinroom loc-d-2 room-c)\n\t(moveto loc-d-2)\n\t(locinroom loc-d-3 room-d)\n\t(moveto loc-d-3)\n\t(keyforroom key-a room-b)\n\t(keyat key-a loc-b-0)\n\t(pick key-a)\n\t(keyforroom key-b room-c)\n\t(keyat key-b loc-c-1)\n\t(pick key-b)\n\t(keyforroom key-c room-d)\n\t(keyat key-c loc-d-2)\n\t(pick key-c)\n\t(keyforroom key-d room-a)\n\t(keyat key-d loc-a-3)\n\t(pick key-d)\n    )\n\n    (:goal (and (unlocked room-b) (unlocked room-c) (unlocked room-d) (at loc-d-3)))\n)",
            "(define (problem simple_doors) \n    (:domain doors)\n\n    (:objects\n    key-x - key\n    key-y - key\n    loc-1 - location\n    loc-2 - location\n    room-1 - room\n    room-2 - room\n    )\n\n    (:init\n    (at loc-1)\n    (unlocked room-1)\n    (locinroom loc-1 room-1)\n    (moveto loc-1)\n    (locinroom loc-2 room-2)\n    (moveto loc-2)\n    (keyforroom key-x room-2)\n    (keyat key-x loc-1)\n    (pick key-x)\n    (keyforroom key-y room-1)\n    (keyat key-y loc-2)\n    (pick key-y)\n    )\n\n    (:goal (and (unlocked room-2) (at loc-2)))\n)",
            "(define (problem simple_doors) \n    (:domain doors)\n\n    (:objects\n    key-1 - key\n    key-2 - key\n    loc-1-1 - location\n    loc-1-2 - location\n    loc-1-3 - location\n    room-1 - room\n    room-2 - room\n    )\n\n    (:init\n    (at loc-1-1)\n    (unlocked room-1)\n    (locinroom loc-1-1 room-1)\n    (moveto loc-1-1)\n    (locinroom loc-1-2 room-1)\n    (moveto loc-1-2)\n    (locinroom loc-1-3 room-2)\n    (moveto loc-1-3)\n    (keyforroom key-1 room-2)\n    (keyat key-1 loc-1-2)\n    (pick key-1)\n    )\n\n    (:goal (and (unlocked room-2) (at loc-1-3)))\n)",
            "(define (problem doors) \n    (:domain doors)\n\n    (:objects\n    key-0 - key\n\tkey-1 - key\n\tkey-2 - key\n\tkey-3 - key\n\tkey-4 - key\n\tkey-5 - key\n\tloc-0-0 - location\n\tloc-0-1 - location\n\tloc-0-2 - location\n\tloc-0-3 - location\n\tloc-0-4 - location\n\tloc-0-5 - location\n\tloc-0-6 - location\n\tloc-0-7 - location\n\tloc-0-8 - location\n\tloc-0-9 - location\n\tloc-1-0 - location\n\tloc-1-1 - location\n\tloc-1-2 - location\n\tloc-1-3 - location\n\tloc-1-4 - location\n\tloc-1-5 - location\n\tloc-1-6 - location\n\tloc-1-7 - location\n\tloc-1-8 - location\n\tloc-1-9 - location\n\tloc-2-0 - location\n\tloc-2-1 - location\n\tloc-2-2 - location\n\tloc-2-3 - location\n\tloc-2-4 - location\n\tloc-2-5 - location\n\tloc-2-6 - location\n\tloc-2-7 - location\n\tloc-2-8 - location\n\tloc-2-9 - location\n\tloc-3-0 - location\n\tloc-3-1 - location\n\tloc-3-2 - location\n\tloc-3-3 - location\n\tloc-3-4 - location\n\tloc-3-5 - location\n\tloc-3-6 - location\n\tloc-3-7 - location\n\tloc-3-8 - location\n\tloc-3-9 - location\n\tloc-4-0 - location\n\tloc-4-1 - location\n\tloc-4-2 - location\n\tloc-4-3 - location\n\tloc-4-4 - location\n\tloc-4-5 - location\n\tloc-4-6 - location\n\tloc-4-7 - location\n\tloc-4-8 - location\n\tloc-4-9 - location\n\tloc-5-0 - location\n\tloc-5-1 - location\n\tloc-5-2 - location\n\tloc-5-3 - location\n\tloc-5-4 - location\n\tloc-5-5 - location\n\tloc-5-6 - location\n\tloc-5-7 - location\n\tloc-5-8 - location\n\tloc-5-9 - location\n\tloc-6-0 - location\n\tloc-6-1 - location\n\tloc-6-2 - location\n\tloc-6-3 - location\n\tloc-6-4 - location\n\tloc-6-5 - location\n\tloc-6-6 - location\n\tloc-6-7 - location\n\tloc-6-8 - location\n\tloc-6-9 - location\n\tloc-7-0 - location\n\tloc-7-1 - location\n\tloc-7-2 - location\n\tloc-7-3 - location\n\tloc-7-4 - location\n\tloc-7-5 - location\n\tloc-7-6 - location\n\tloc-7-7 - location\n\tloc-7-8 - location\n\tloc-7-9 - location\n\troom-0 - room\n\troom-1 - room\n\troom-2 - room\n\troom-3 - room\n\troom-4 - room\n\troom-5 - room\n\troom-6 - room\n    )\n\n    (:init\n    (at loc-0-0)\n\t(unlocked room-0)\n\t(locinroom loc-0-0 room-0)\n\t(moveto loc-0-0)\n\t(locinroom loc-0-1 room-1)\n\t(moveto loc-0-1)\n\t(locinroom loc-0-2 room-2)\n\t(moveto loc-0-2)\n\t(locinroom loc-0-3 room-3)\n\t(moveto loc-0-3)\n\t(locinroom loc-0-4 room-0)\n\t(moveto loc-0-4)\n\t(locinroom loc-0-5 room-0)\n\t(moveto loc-0-5)\n\t(locinroom loc-0-6 room-0)\n\t(moveto loc-0-6)\n\t(locinroom loc-0-7 room-0)\n\t(moveto loc-0-7)\n\t(locinroom loc-0-8 room-0)\n\t(moveto loc-0-8)\n\t(locinroom loc-0-9 room-0)\n\t(moveto loc-0-9)\n\t(locinroom loc-1-0 room-0)\n\t(moveto loc-1-0)\n\t(locinroom loc-1-1 room-0)\n\t(moveto loc-1-1)\n\t(locinroom loc-1-2 room-0)\n\t(moveto loc-1-2)\n\t(locinroom loc-1-3 room-0)\n\t(moveto loc-1-3)\n\t(locinroom loc-1-4 room-0)\n\t(moveto loc-1-4)\n\t(locinroom loc-1-5 room-0)\n\t(moveto loc-1-5)\n\t(locinroom loc-1-6 room-0)\n\t(moveto loc-1-6)\n\t(locinroom loc-1-7 room-0)\n\t(moveto loc-1-7)\n\t(locinroom loc-1-8 room-0)\n\t(moveto loc-1-8)\n\t(locinroom loc-1-9 room-0)\n\t(moveto loc-1-9)\n\t(locinroom loc-2-0 room-0)\n\t(moveto loc-2-0)\n\t(locinroom loc-2-1 room-0)\n\t(moveto loc-2-1)\n\t(locinroom loc-2-2 room-0)\n\t(moveto loc-2-2)\n\t(locinroom loc-2-3 room-0)\n\t(moveto loc-2-3)\n\t(locinroom loc-2-4 room-0)\n\t(moveto loc-2-4)\n\t(locinroom loc-2-5 room-0)\n\t(moveto loc-2-5)\n\t(locinroom loc-2-6 room-0)\n\t(moveto loc-2-6)\n\t(locinroom loc-2-7 room-0)\n\t(moveto loc-2-7)\n\t(locinroom loc-2-8 room-0)\n\t(moveto loc-2-8)\n\t(locinroom loc-2-9 room-0)\n\t(moveto loc-2-9)\n\t(locinroom loc-3-0 room-0)\n\t(moveto loc-3-0)\n\t(locinroom loc-3-1 room-0)\n\t(moveto loc-3-1)\n\t(locinroom loc-3-2 room-0)\n\t(moveto loc-3-2)\n\t(locinroom loc-3-3 room-0)\n\t(moveto loc-3-3)\n\t(locinroom loc-3-4 room-0)\n\t(moveto loc-3-4)\n\t(locinroom loc-3-5 room-0)\n\t(moveto loc-3-5)\n\t(locinroom loc-3-6 room-0)\n\t(moveto loc-3-6)\n\t(locinroom loc-3-7 room-0)\n\t(moveto loc-3-7)\n\t(locinroom loc-3-8 room-0)\n\t(moveto loc-3-8)\n\t(locinroom loc-3-9 room-0)\n\t(moveto loc-3-9)\n\t(locinroom loc-4-0 room-0)\n\t(moveto loc-4-0)\n\t(locinroom loc-4-1 room-0)\n\t(moveto loc-4-1)\n\t(locinroom loc-4-2 room-0)\n\t(moveto loc-4-2)\n\t(locinroom loc-4-3 room-0)\n\t(moveto loc-4-3)\n\t(locinroom loc-4-4 room-0)\n\t(moveto loc-4-4)\n\t(locinroom loc-4-5 room-0)\n\t(moveto loc-4-5)\n\t(locinroom loc-4-6 room-0)\n\t(moveto loc-4-6)\n\t(locinroom loc-4-7 room-0)\n\t(moveto loc-4-7)\n\t(locinroom loc-4-8 room-0)\n\t(moveto loc-4-8)\n\t(locinroom loc-4-9 room-0)\n\t(moveto loc-4-9)\n\t(locinroom loc-5-0 room-0)\n\t(moveto loc-5-0)\n\t(locinroom loc-5-1 room-0)\n\t(moveto loc-5-1)\n\t(locinroom loc-5-2 room-0)\n\t(moveto loc-5-2)\n\t(locinroom loc-5-3 room-0)\n\t(moveto loc-5-3)\n\t(locinroom loc-5-4 room-0)\n\t(moveto loc-5-4)\n\t(locinroom loc-5-5 room-0)\n\t(moveto loc-5-5)\n\t(locinroom loc-5-6 room-0)\n\t(moveto loc-5-6)\n\t(locinroom loc-5-7 room-0)\n\t(moveto loc-5-7)\n\t(locinroom loc-5-8 room-0)\n\t(moveto loc-5-8)\n\t(locinroom loc-5-9 room-0)\n\t(moveto loc-5-9)\n\t(locinroom loc-6-0 room-0)\n\t(moveto loc-6-0)\n\t(locinroom loc-6-1 room-0)\n\t(moveto loc-6-1)\n\t(locinroom loc-6-2 room-0)\n\t(moveto loc-6-2)\n\t(locinroom loc-6-3 room-0)\n\t(moveto loc-6-3)\n\t(locinroom loc-6-4 room-0)\n\t(moveto loc-6-4)\n\t(locinroom loc-6-5 room-0)\n\t(moveto loc-6-5)\n\t(locinroom loc-6-6 room-0)\n\t(moveto loc-6-6)\n\t(locinroom loc-6-7 room-0)\n\t(moveto loc-6-7)\n\t(locinroom loc-6-8 room-0)\n\t(moveto loc-6-8)\n\t(locinroom loc-6-9 room-0)\n\t(moveto loc-6-9)\n\t(locinroom loc-7-0 room-0)\n\t(moveto loc-7-0)\n\t(locinroom loc-7-1 room-0)\n\t(moveto loc-7-1)\n\t(locinroom loc-7-2 room-0)\n\t(moveto loc-7-2)\n\t(locinroom loc-7-3 room-0)\n\t(moveto loc-7-3)\n\t(locinroom loc-7-4 room-0)\n\t(moveto loc-7-4)\n\t(locinroom loc-7-5 room-0)\n\t(moveto loc-7-5)\n\t(locinroom loc-7-6 room-0)\n\t(moveto loc-7-6)\n\t(locinroom loc-7-7 room-0)\n\t(moveto loc-7-7)\n\t(locinroom loc-7-8 room-0)\n\t(moveto loc-7-8)\n\t(locinroom loc-7-9 room-0)\n\t(moveto loc-7-9)\n\t(keyforroom key-0 room-1)\n\t(keyat key-0 loc-0-2)\n\t(pick key-0)\n\t(keyforroom key-1 room-2)\n\t(keyat key-1 loc-0-1)\n\t(pick key-1)\n\t(keyforroom key-2 room-3)\n\t(keyat key-2 loc-5-5)\n\t(pick key-2)\n\t(keyforroom key-3 room-4)\n\t(keyat key-3 loc-1-2)\n\t(pick key-3)\n\t(keyforroom key-4 room-5)\n\t(keyat key-4 loc-1-1)\n\t(pick key-4)\n\t(keyforroom key-5 room-6)\n\t(keyat key-5 loc-6-5)\n\t(pick key-5)\n\n    )\n\n    (:goal (and (at loc-0-3)))\n)\n    ",
            "(define (problem advanced_doors) \n    (:domain doors)\n\n    (:objects\n    key-a - key\n\tkey-b - key\n\tkey-c - key\n\tkey-e - key\n\tkey-f - key\n\tloc-a-0 - location\n\tloc-a-1 - location\n\tloc-a-2 - location\n\tloc-a-3 - location\n\tloc-b-0 - location\n\tloc-b-1 - location\n\tloc-b-2 - location\n\tloc-b-3 - location\n\tloc-c-0 - location\n\tloc-c-1 - location\n\tloc-c-2 - location\n\tloc-c-3 - location\n\tloc-e-0 - location\n\tloc-e-1 - location\n\tloc-e-2 - location\n\tloc-e-3 - location\n\tloc-f-0 - location\n\tloc-f-1 - location\n\tloc-f-2 - location\n\tloc-f-3 - location\n\troom-a - room\n\troom-b - room\n\troom-c - room\n\troom-e - room\n\troom-f - room\n    )\n\n    (:init\n    (at loc-a-0)\n\t(unlocked room-a)\n\t(locinroom loc-a-0 room-a)\n\t(moveto loc-a-0)\n\t(locinroom loc-a-1 room-b)\n\t(moveto loc-a-1)\n\t(locinroom loc-a-2 room-c)\n\t(moveto loc-a-2)\n\t(locinroom loc-a-3 room-e)\n\t(moveto loc-a-3)\n\t(locinroom loc-b-0 room-a)\n\t(moveto loc-b-0)\n\t(locinroom loc-b-1 room-b)\n\t(moveto loc-b-1)\n\t(locinroom loc-b-2 room-c)\n\t(moveto loc-b-2)\n\t(locinroom loc-b-3 room-e)\n\t(moveto loc-b-3)\n\t(locinroom loc-c-0 room-a)\n\t(moveto loc-c-0)\n\t(locinroom loc-c-1 room-b)\n\t(moveto loc-c-1)\n\t(locinroom loc-c-2 room-c)\n\t(moveto loc-c-2)\n\t(locinroom loc-c-3 room-e)\n\t(moveto loc-c-3)\n\t(locinroom loc-e-0 room-a)\n\t(moveto loc-e-0)\n\t(locinroom loc-e-1 room-b)\n\t(moveto loc-e-1)\n\t(locinroom loc-e-2 room-c)\n\t(moveto loc-e-2)\n\t(locinroom loc-e-3 room-e)\n\t(moveto loc-e-3)\n\t(locinroom loc-f-0 room-a)\n\t(moveto loc-f-0)\n\t(locinroom loc-f-1 room-b)\n\t(moveto loc-f-1)\n\t(locinroom loc-f-2 room-c)\n\t(moveto loc-f-2)\n\t(locinroom loc-f-3 room-e)\n\t(moveto loc-f-3)\n\t(keyforroom key-a room-b)\n\t(keyat key-a loc-b-0)\n\t(pick key-a)\n\t(keyforroom key-b room-c)\n\t(keyat key-b loc-c-1)\n\t(pick key-b)\n\t(keyforroom key-c room-e)\n\t(keyat key-c loc-e-2)\n\t(pick key-c)\n\t(keyforroom key-e room-f)\n\t(keyat key-e loc-f-1)\n\t(pick key-e)\n\t(keyforroom key-f room-a)\n\t(keyat key-f loc-a-3)\n\t(pick key-f)\n    )\n\n    (:goal (and (unlocked room-b) (unlocked room-c) (unlocked room-e) (unlocked room-f) (at loc-f-3)))\n)",
            "(define (problem complex_doors_problem) \n    (:domain doors)\n\n    (:objects\n    key-4 - key\n\tkey-5 - key\n\tkey-6 - key\n\tkey-7 - key\n\tloc-8-0 - location\n\tloc-8-1 - location\n\tloc-8-2 - location\n\tloc-8-3 - location\n\tloc-8-4 - location\n\tloc-8-5 - location\n\tloc-8-6 - location\n\tloc-8-7 - location\n\tloc-8-8 - location\n\tloc-8-9 - location\n\tloc-9-0 - location\n\tloc-9-1 - location\n\tloc-9-2 - location\n\tloc-9-3 - location\n\tloc-9-4 - location\n\tloc-9-5 - location\n\tloc-9-6 - location\n\tloc-9-7 - location\n\tloc-9-8 - location\n\tloc-9-9 - location\n\troom-7 - room\n\troom-8 - room\n\troom-9 - room\n    )\n\n    (:init\n    (at loc-8-0)\n\t(unlocked room-7)\n\t(locinroom loc-8-0 room-7)\n\t(moveto loc-8-0)\n\t(locinroom loc-8-1 room-8)\n\t(moveto loc-8-1)\n\t(locinroom loc-8-2 room-9)\n\t(moveto loc-8-2)\n\t(locinroom loc-8-3 room-7)\n\t(moveto loc-8-3)\n\t(locinroom loc-8-4 room-7)\n\t(moveto loc-8-4)\n\t(locinroom loc-8-5 room-7)\n\t(moveto loc-8-5)\n\t(locinroom loc-8-6 room-7)\n\t(moveto loc-8-6)\n\t(locinroom loc-8-7 room-7)\n\t(moveto loc-8-7)\n\t(locinroom loc-8-8 room-7)\n\t(moveto loc-8-8)\n\t(locinroom loc-8-9 room-7)\n\t(moveto loc-8-9)\n\t(locinroom loc-9-0 room-7)\n\t(moveto loc-9-0)\n\t(locinroom loc-9-1 room-8)\n\t(moveto loc-9-1)\n\t(locinroom loc-9-2 room-9)\n\t(moveto loc-9-2)\n\t(locinroom loc-9-3 room-7)\n\t(moveto loc-9-3)\n\t(locinroom loc-9-4 room-7)\n\t(moveto loc-9-4)\n\t(locinroom loc-9-5 room-7)\n\t(moveto loc-9-5)\n\t(locinroom loc-9-6 room-7)\n\t(moveto loc-9-6)\n\t(locinroom loc-9-7 room-7)\n\t(moveto loc-9-7)\n\t(locinroom loc-9-8 room-7)\n\t(moveto loc-9-8)\n\t(locinroom loc-9-9 room-7)\n\t(moveto loc-9-9)\n\t(keyforroom key-4 room-8)\n\t(keyat key-4 loc-8-3)\n\t(pick key-4)\n\t(keyforroom key-5 room-9)\n\t(keyat key-5 loc-9-1)\n\t(pick key-5)\n\t(keyforroom key-6 room-7)\n\t(keyat key-6 loc-8-7)\n\t(pick key-6)\n\t(keyforroom key-7 room-8)\n\t(keyat key-7 loc-9-3)\n\t(pick key-7)\n    )\n\n    (:goal (and (unlocked room-8) (unlocked room-9) (at loc-9-2)))\n)"
        ],
        "domain": "(define (domain doors)\n  (:requirements :strips :typing)\n  (:types location room key)\n  (:predicates\n     (at ?loc - location)\n     (unlocked ?room - room)\n     (locinroom ?loc - location ?room - room)\n     (keyat ?key - key ?loc - location)\n     (keyforroom ?key - key ?room - room)\n     (moveto ?loc - location)\n     (pick ?key - key)\n  )\n\n  ; (:actions moveto pick)\n\n  (:action moveto\n    :parameters (?sloc - location ?eloc - location ?eroom - room)\n    :precondition (and (moveto ?eloc)\n                       (at ?sloc)\n                       (unlocked ?eroom)\n                       (locinroom ?eloc ?eroom)\n                  )\n    :effect (and (not (at ?sloc))\n                 (at ?eloc)\n            )\n  )\n\n  (:action pick\n    :parameters (?loc - location ?key - key ?room - room)\n    :precondition (and (pick ?key)\n                       (at ?loc)\n                       (keyat ?key ?loc)\n                       (keyforroom ?key ?room)\n                  )\n    :effect (and (not (keyat ?key ?loc))\n                 (unlocked ?room)\n            )\n  )\n\n)",
        "description": "You are navigating through a building with multiple rooms and doors. Your objective is to move from one location to another and unlock doors using specific keys found within the building. Each room can be unlocked with a specific key that is located somewhere within the building. Your actions involve moving between locations and picking up keys to unlock the rooms.\n\nThe actions defined in this domain include:\n    moveto <start location> <end location> <end room>: This action allows you to move from one location to another within an unlocked room. The precondition for this action is that the destination location is reachable, you are currently at the start location, and the room where the end location is situated is unlocked. The effect of this action is that you are no longer at the start location and are now at the end location.\n    \n    pick <location> <key> <room>: This action allows you to pick up a key at your current location to unlock a specific room. The preconditions for this action are that there is a key at your current location, the key is for the room you intend to unlock, and you are at the location where the key is found. The effect of this action is that the key is no longer at that location, and the room is unlocked.\n\nYou need to carefully plan your moves and the keys you pick up to navigate through the building and unlock the necessary rooms to reach your final destination. Remember, each key is specific to a room, and you must be at the correct location to pick up a key and unlock a room.",
        "domain_name": "doors",
        "nl_interface": {
            "at": "You are at {arg1}.",
            "unlocked": "{arg1} is unlocked.",
            "locinroom": "{arg1} is in {arg2}.",
            "keyat": "The key {arg1} is at {arg2}.",
            "keyforroom": "The key {arg1} is for {arg2}.",
            "moveto": "Move from {arg1} to {arg2} in {arg3}.",
            "pick": "Pick up the key {arg2} at {arg1} to unlock {arg3}."
        },
        "nl_interface_debug": [
            {
                "nl": "{\n    \"at\": \"You are at {arg1}.\",\n    \"unlocked\": \"{arg1} is unlocked.\",\n    \"locinroom\": \"{arg1} is in {arg2}.\",\n    \"keyat\": \"The key {arg1} is at {arg2}.\",\n    \"keyforroom\": \"The key {arg1} is for {arg2}.\",\n    \"moveto\": \"Move from {arg1} to {arg2} in {arg3}.\",\n    \"pick\": \"Pick up the key {arg2} at {arg1} to unlock {arg3}.\"\n}",
                "gpt_response": "```python\n{\n    \"at\": \"You are at {arg1}.\",\n    \"unlocked\": \"{arg1} is unlocked.\",\n    \"locinroom\": \"{arg1} is in {arg2}.\",\n    \"keyat\": \"The key {arg1} is at {arg2}.\",\n    \"keyforroom\": \"The key {arg1} is for {arg2}.\",\n    \"moveto\": \"Move from {arg1} to {arg2} in {arg3}.\",\n    \"pick\": \"Pick up the key {arg2} at {arg1} to unlock {arg3}.\"\n}\n```"
            }
        ]
    },
    {
        "problems": [
            "(define (problem complex-movie-night)\n   (:domain movie-strips)\n   (:objects c5 c4 c3 c2 c1 d3 d2 d1 p3 p2 p1 z2 z1 k2 k1)\n   (:init (chips c5)\n          (chips c4)\n          (chips c3)\n          (chips c2)\n          (chips c1)\n          (dip d3)\n          (dip d2)\n          (dip d1)\n          (pop p3)\n          (pop p2)\n          (pop p1)\n          (cheese z2)\n          (cheese z1)\n          (crackers k2)\n          (crackers k1)\n          (counter-at-two-hours))\n   (:goal (and (movie-rewound)\n               (have-chips)\n               (have-dip)\n               (have-pop)\n               (have-cheese)\n               (have-crackers))))",
            "(define (problem strips-movie-x-2)\n   (:domain movie-strips)\n   (:objects c2 c1 d2 d1 p2 p1 z2 z1 k2 k1)\n   (:init (chips c2)\n          (chips c1)\n          (dip d2)\n          (dip d1)\n          (pop p2)\n          (pop p1)\n          (cheese z2)\n          (cheese z1)\n          (crackers k2)\n          (crackers k1)\n          (counter-at-two-hours))\n   (:goal (and (movie-rewound)\n               (have-chips)\n               (have-dip)\n               (have-pop)\n               (have-cheese)\n               (have-crackers))))",
            "(define (problem strips-movie-night-extended)\n   (:domain movie-strips)\n   (:objects c3 c2 c1 d3 d2 d1 p3 p2 p1 z3 z2 z1 k3 k2 k1)\n   (:init (chips c3)\n          (chips c2)\n          (chips c1)\n          (dip d3)\n          (dip d2)\n          (dip d1)\n          (pop p3)\n          (pop p2)\n          (pop p1)\n          (cheese z3)\n          (cheese z2)\n          (cheese z1)\n          (crackers k3)\n          (crackers k2)\n          (crackers k1)\n          (counter-at-other-than-two-hours))\n   (:goal (and (movie-rewound)\n               (have-chips)\n               (have-dip)\n               (have-pop)\n               (have-cheese)\n               (have-crackers))))",
            "(define (problem strips-movie-night)\n   (:domain movie-strips)\n   (:objects c5 c4 c3 c2 c1 d5 d4 d3 d2 d1 p5 p4 p3 p2 p1 z5 z4 z3 z2 z1 k5 k4 k3 k2 k1)\n   (:init (chips c5)\n          (chips c4)\n          (chips c3)\n          (chips c2)\n          (chips c1)\n          (dip d5)\n          (dip d4)\n          (dip d3)\n          (dip d2)\n          (dip d1)\n          (pop p5)\n          (pop p4)\n          (pop p3)\n          (pop p2)\n          (pop p1)\n          (cheese z5)\n          (cheese z4)\n          (cheese z3)\n          (cheese z2)\n          (cheese z1)\n          (crackers k5)\n          (crackers k4)\n          (crackers k3)\n          (crackers k2)\n          (crackers k1)\n          (counter-at-other-than-two-hours))\n   (:goal (and (movie-rewound)\n               (have-chips)\n               (have-dip)\n               (have-pop)\n               (have-cheese)\n               (have-crackers)\n               (counter-at-zero)\n               (not (counter-at-two-hours)))))",
            "(define (problem simplified-movie-night)\n   (:domain movie-strips)\n   (:objects c1 c2 - chips\n             d1 - dip\n             p1 - pop\n             z1 - cheese\n             k1 - crackers)\n   (:init (chips c1) (chips c2)\n          (dip d1)\n          (pop p1)\n          (cheese z1)\n          (crackers k1)\n          (counter-at-other-than-two-hours))\n   (:goal (and (movie-rewound)\n               (have-chips)\n               (have-dip)\n               (have-pop)\n               (have-cheese)\n               (have-crackers))))",
            "(define (problem enhanced-movie-night)\n   (:domain movie-strips)\n   (:objects c10 c9 c8 c7 c6 c5 c4 c3 c2 c1 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1 z10 z9 z8 z7 z6 z5 z4 z3 z2 z1 k10 k9 k8 k7 k6 k5 k4 k3 k2 k1)\n   (:init (chips c10)\n          (chips c9)\n          (chips c8)\n          (chips c7)\n          (chips c6)\n          (chips c5)\n          (chips c4)\n          (chips c3)\n          (chips c2)\n          (chips c1)\n          (dip d10)\n          (dip d9)\n          (dip d8)\n          (dip d7)\n          (dip d6)\n          (dip d5)\n          (dip d4)\n          (dip d3)\n          (dip d2)\n          (dip d1)\n          (pop p10)\n          (pop p9)\n          (pop p8)\n          (pop p7)\n          (pop p6)\n          (pop p5)\n          (pop p4)\n          (pop p3)\n          (pop p2)\n          (pop p1)\n          (cheese z10)\n          (cheese z9)\n          (cheese z8)\n          (cheese z7)\n          (cheese z6)\n          (cheese z5)\n          (cheese z4)\n          (cheese z3)\n          (cheese z2)\n          (cheese z1)\n          (crackers k10)\n          (crackers k9)\n          (crackers k8)\n          (crackers k7)\n          (crackers k6)\n          (crackers k5)\n          (crackers k4)\n          (crackers k3)\n          (crackers k2)\n          (crackers k1)\n          (counter-at-other-than-two-hours))\n   (:goal (and (movie-rewound)\n               (counter-at-zero)\n               ;; Increase complexity by requiring three of each snack\n               (have-chips) (have-chips) (have-chips)\n               (have-dip) (have-dip) (have-dip)\n               (have-pop) (have-pop) (have-pop)\n               (have-cheese) (have-cheese) (have-cheese)\n               (have-crackers) (have-crackers) (have-crackers))))",
            "(define (problem simplified-movie-night)\n   (:domain movie-strips)\n   (:objects c1 d1 p1 z1 k1)\n   (:init (chips c1)\n          (dip d1)\n          (pop p1)\n          (cheese z1)\n          (crackers k1)\n          (counter-at-two-hours))\n   (:goal (and (movie-rewound)\n               (have-chips)\n               (have-dip)\n               (have-pop)\n               (have-cheese)\n               (have-crackers))))",
            "(define (problem strips-movie-night)\n   (:domain movie-strips)\n   (:objects c1 d1 p1 z1 k1)\n   (:init (chips c1)\n          (dip d1)\n          (pop p1)\n          (cheese z1)\n          (crackers k1)\n          (counter-at-other-than-two-hours))\n   (:goal (and (movie-rewound)\n               (have-chips)\n               (have-dip))))",
            "(define (problem strips-movie-x-4)\n   (:domain movie-strips)\n   (:objects c15 c14 c13 c12 c11 c10 c9 c8 c7 c6 c5 c4 c3 c2 c1\n             d15 d14 d13 d12 d11 d10 d9 d8 d7 d6 d5 d4 d3 d2 d1\n             p15 p14 p13 p12 p11 p10 p9 p8 p7 p6 p5 p4 p3 p2 p1\n             z15 z14 z13 z12 z11 z10 z9 z8 z7 z6 z5 z4 z3 z2 z1\n             k15 k14 k13 k12 k11 k10 k9 k8 k7 k6 k5 k4 k3 k2 k1\n             b15 b14 b13 b12 b11 b10 b9 b8 b7 b6 b5 b4 b3 b2 b1)\n   (:init (chips c15) (chips c14) (chips c13) (chips c12) (chips c11)\n          (chips c10) (chips c9) (chips c8) (chips c7) (chips c6)\n          (chips c5) (chips c4) (chips c3) (chips c2) (chips c1)\n          (dip d15) (dip d14) (dip d13) (dip d12) (dip d11)\n          (dip d10) (dip d9) (dip d8) (dip d7) (dip d6)\n          (dip d5) (dip d4) (dip d3) (dip d2) (dip d1)\n          (pop p15) (pop p14) (pop p13) (pop p12) (pop p11)\n          (pop p10) (pop p9) (pop p8) (pop p7) (pop p6)\n          (pop p5) (pop p4) (pop p3) (pop p2) (pop p1)\n          (cheese z15) (cheese z14) (cheese z13) (cheese z12) (cheese z11)\n          (cheese z10) (cheese z9) (cheese z8) (cheese z7) (cheese z6)\n          (cheese z5) (cheese z4) (cheese z3) (cheese z2) (cheese z1)\n          (crackers k15) (crackers k14) (crackers k13) (crackers k12) (crackers k11)\n          (crackers k10) (crackers k9) (crackers k8) (crackers k7) (crackers k6)\n          (crackers k5) (crackers k4) (crackers k3) (crackers k2) (crackers k1)\n          (counter-at-other-than-two-hours))\n   (:goal (and (movie-rewound)\n               (counter-at-zero)\n               (have-chips)\n               (have-dip)\n               (have-pop)\n               (have-cheese)\n               (have-crackers))))",
            "(define (problem simplified-movie-night)\n   (:domain movie-strips)\n   (:objects c2 c1 d1 p1 z1 k1)\n   (:init (chips c1)\n          (chips c2)\n          (dip d1)\n          (pop p1)\n          (cheese z1)\n          (crackers k1)\n          (counter-at-other-than-two-hours))\n   (:goal (and (movie-rewound)\n               (have-chips))))",
            "(define (problem strips-movie-night)\n   (:domain movie-strips)\n   (:objects c7 c6 c5 c4 c3 c2 c1 d7 d6 d5 d4 d3 d2 d1 p7 p6 p5 p4 p3 p2 p1 z7 z6 z5 z4 z3 z2 z1\n             k7 k6 k5 k4 k3 k2 k1)\n   (:init (chips c7)\n          (chips c6)\n          (chips c5)\n          (chips c4)\n          (chips c3)\n          (chips c2)\n          (chips c1)\n          (dip d7)\n          (dip d6)\n          (dip d5)\n          (dip d4)\n          (dip d3)\n          (dip d2)\n          (dip d1)\n          (pop p7)\n          (pop p6)\n          (pop p5)\n          (pop p4)\n          (pop p3)\n          (pop p2)\n          (pop p1)\n          (cheese z7)\n          (cheese z6)\n          (cheese z5)\n          (cheese z4)\n          (cheese z3)\n          (cheese z2)\n          (cheese z1)\n          (crackers k7)\n          (crackers k6)\n          (crackers k5)\n          (crackers k4)\n          (crackers k3)\n          (crackers k2)\n          (crackers k1)\n          (counter-at-two-hours))\n   (:goal (and (movie-rewound)\n               (counter-at-zero)\n               (have-chips)\n               (have-dip)\n               (have-pop)\n               (have-cheese)\n               (have-crackers)\n               ;; Increase complexity by requiring two of each snack\n               (have-chips)\n               (have-dip)\n               (have-pop)\n               (have-cheese)\n               (have-crackers))))",
            "(define (problem strips-movie-x-2)\n   (:domain movie-strips)\n   (:objects c6 c5 c4 c3 c2 c1 d6 d5 d4 d3 d2 d1 p6 p5 p4 p3 p2 p1 z6 z5 z4 z3 z2 z1\n             k6 k5 k4 k3 k2 k1)\n   (:init (chips c6)\n          (chips c5)\n          (chips c4)\n          (chips c3)\n          (chips c2)\n          (chips c1)\n          (dip d6)\n          (dip d5)\n          (dip d4)\n          (dip d3)\n          (dip d2)\n          (dip d1)\n          (pop p6)\n          (pop p5)\n          (pop p4)\n          (pop p3)\n          (pop p2)\n          (pop p1)\n          (cheese z6)\n          (cheese z5)\n          (cheese z4)\n          (cheese z3)\n          (cheese z2)\n          (cheese z1)\n          (crackers k6)\n          (crackers k5)\n          (crackers k4)\n          (crackers k3)\n          (crackers k2)\n          (crackers k1)\n          (counter-at-other-than-two-hours))\n   (:goal (and (movie-rewound)\n               (counter-at-zero)\n               (have-chips)\n               (have-dip)\n               (have-pop)\n               (have-cheese)\n               (have-crackers))))",
            "(define (problem strips-movie-x-2)\n   (:domain movie-strips)\n   (:objects b3 b2 b1 s3 s2 s1 l3 l2 l1 g3 g2 g1)\n   (:init (chips b3)\n          (chips b2)\n          (chips b1)\n          (dip s3)\n          (dip s2)\n          (dip s1)\n          (pop l3)\n          (pop l2)\n          (pop l1)\n          (cheese g3)\n          (cheese g2)\n          (cheese g1)\n          (counter-at-two-hours))\n   (:goal (and (movie-rewound)\n               (have-chips)\n               (have-dip))))",
            "(define (problem simplified-movie-night)\n   (:domain movie-strips)\n   (:objects c3 c2 c1 d2 d1 p2 p1 z1 k1)\n   (:init (chips c3)\n          (chips c2)\n          (chips c1)\n          (dip d2)\n          (dip d1)\n          (pop p2)\n          (pop p1)\n          (cheese z1)\n          (crackers k1)\n          (counter-at-other-than-two-hours))\n   (:goal (and (movie-rewound)\n               (have-chips)\n               (have-dip)\n               (have-pop)\n               (have-cheese)\n               (have-crackers))))",
            "(define (problem simplified-movie-night)\n   (:domain movie-strips)\n   (:objects c1 d1 p1 z1 k1)\n   (:init (chips c1)\n          (dip d1)\n          (pop p1)\n          (cheese z1)\n          (crackers k1)\n          (counter-at-two-hours))\n   (:goal (and (movie-rewound)\n               (have-chips)\n               (have-dip)\n               (have-pop)\n               (have-cheese)\n               (have-crackers)\n               (counter-at-zero))))",
            "(define (problem strips-movie-simple)\n   (:domain movie-strips)\n   (:objects c2 c1 d1 p1 z1 k1)\n   (:init (chips c2)\n          (chips c1)\n          (dip d1)\n          (pop p1)\n          (cheese z1)\n          (crackers k1)\n          (counter-at-other-than-two-hours))\n   (:goal (and (movie-rewound)\n               (have-chips))))",
            "(define (problem strips-movie-x-2)\n   (:domain movie-strips)\n   (:objects c2 c1 d2 d1 p2 p1 z2 z1 k2 k1)\n   (:init (chips c2)\n          (chips c1)\n          (dip d2)\n          (dip d1)\n          (pop p2)\n          (pop p1)\n          (cheese z2)\n          (cheese z1)\n          (crackers k2)\n          (crackers k1)\n          (counter-at-two-hours))\n   (:goal (and (movie-rewound)\n               (have-chips)\n               (have-dip))))",
            "(define (problem strips-movie-x-1)\n   (:domain movie-strips)\n   (:objects c5 c4 c3 c2 c1 d5 d4 d3 d2 d1 p5 p4 p3 p2 p1 z5 z4 z3 z2 z1 k5 k4 k3 k2\n             k1)\n   (:init (chips c5)\n          (chips c4)\n          (chips c3)\n          (chips c2)\n          (chips c1)\n          (dip d5)\n          (dip d4)\n          (dip d3)\n          (dip d2)\n          (dip d1)\n          (pop p5)\n          (pop p4)\n          (pop p3)\n          (pop p2)\n          (pop p1)\n          (cheese z5)\n          (cheese z4)\n          (cheese z3)\n          (cheese z2)\n          (cheese z1)\n          (crackers k5)\n          (crackers k4)\n          (crackers k3)\n          (crackers k2)\n          (crackers k1)\n          (counter-at-other-than-two-hours))\n   (:goal (and (movie-rewound)\n               (counter-at-zero)\n               (have-chips)\n               (have-dip)\n               (have-pop)\n               (have-cheese)\n               (have-crackers))))",
            "(define (problem easy-movie-night)\n   (:domain movie-strips)\n   (:objects c1 p1)\n   (:init (chips c1)\n          (pop p1)\n          (counter-at-zero))\n   (:goal (and (have-chips)\n               (have-pop))))",
            "(define (problem simplified-movie-night)\n   (:domain movie-strips)\n   (:objects c1 d1 p1)\n   (:init (chips c1)\n          (dip d1)\n          (pop p1)\n          (counter-at-zero))\n   (:goal (and (have-chips)\n               (have-dip)\n               (have-pop))))",
            "(define (problem strips-movie-x-3)\n   (:domain movie-strips)\n   (:objects c10 c9 c8 c7 c6 c5 c4 c3 c2 c1\n             d10 d9 d8 d7 d6 d5 d4 d3 d2 d1\n             p10 p9 p8 p7 p6 p5 p4 p3 p2 p1\n             z10 z9 z8 z7 z6 z5 z4 z3 z2 z1\n             k10 k9 k8 k7 k6 k5 k4 k3 k2 k1\n             b10 b9 b8 b7 b6 b5 b4 b3 b2 b1)\n   (:init (chips c10) (chips c9) (chips c8) (chips c7) (chips c6)\n          (chips c5) (chips c4) (chips c3) (chips c2) (chips c1)\n          (dip d10) (dip d9) (dip d8) (dip d7) (dip d6)\n          (dip d5) (dip d4) (dip d3) (dip d2) (dip d1)\n          (pop p10) (pop p9) (pop p8) (pop p7) (pop p6)\n          (pop p5) (pop p4) (pop p3) (pop p2) (pop p1)\n          (cheese z10) (cheese z9) (cheese z8) (cheese z7) (cheese z6)\n          (cheese z5) (cheese z4) (cheese z3) (cheese z2) (cheese z1)\n          (crackers k10) (crackers k9) (crackers k8) (crackers k7) (crackers k6)\n          (crackers k5) (crackers k4) (crackers k3) (crackers k2) (crackers k1)\n          (counter-at-two-hours))\n   (:goal (and (movie-rewound)\n               (counter-at-zero)\n               (have-chips)\n               (have-dip)\n               (have-pop)\n               (have-cheese)\n               (have-crackers))))",
            "(define (problem strips-movie-night)\n   (:domain movie-strips)\n   (:objects c3 c2 c1 d3 d2 d1 p3 p2 p1 ch3 ch2 ch1 cr3 cr2 cr1)\n   (:init (chips c3)\n          (chips c2)\n          (chips c1)\n          (dip d3)\n          (dip d2)\n          (dip d1)\n          (pop p3)\n          (pop p2)\n          (pop p1)\n          (cheese ch3)\n          (cheese ch2)\n          (cheese ch1)\n          (crackers cr3)\n          (crackers cr2)\n          (crackers cr1)\n          (counter-at-other-than-two-hours))\n   (:goal (and (movie-rewound)\n               (have-chips)\n               (have-dip)\n               (have-pop)\n               (have-cheese)\n               (have-crackers))))"
        ],
        "domain": "(define (domain movie-strips)\n  (:predicates (movie-rewound)\n               (counter-at-two-hours)\n\t       (counter-at-other-than-two-hours)\n               (counter-at-zero)\n               (have-chips)\n               (have-dip)\n               (have-pop)\n               (have-cheese)\n               (have-crackers)\n               (chips ?x)\n               (dip ?x)\n               (pop ?x)\n               (cheese ?x)\n               (crackers ?x))\n  \n  (:action rewind-movie-2\n           :parameters ()\n\t   :precondition (counter-at-two-hours)\n           :effect (movie-rewound))\n  \n  (:action rewind-movie\n           :parameters ()\n\t   :precondition (counter-at-other-than-two-hours)\n           :effect (and (movie-rewound)\n                        ;; Let's assume that the movie is 2 hours long\n                        (not (counter-at-zero))))\n\n  (:action reset-counter\n           :parameters ()\n           :precondition (and)\n           :effect (counter-at-zero))\n\n\n  ;;; Get the food and snacks for the movie\n  (:action get-chips\n\n           :parameters (?x)\n           :precondition (chips ?x)\n           :effect (have-chips))\n  \n  (:action get-dip\n           :parameters (?x)\n           :precondition (dip ?x)\n           :effect (have-dip))\n\n  (:action get-pop\n           :parameters (?x)\n           :precondition (pop ?x)\n           :effect (have-pop))\n  \n  (:action get-cheese\n           :parameters (?x)\n           :precondition (cheese ?x)\n           :effect (have-cheese))\n  \n  (:action get-crackers\n           :parameters (?x)\n           :precondition (crackers ?x)\n           :effect (have-crackers)))\n",
        "description": "Your goal is to prepare for a movie night. This involves rewinding the movie if it's not at the beginning, ensuring the movie counter is set correctly, and gathering all the necessary snacks including chips, dip, pop, cheese, and crackers.\n\nThe actions defined in this domain include:\n- rewind-movie-2: This action rewinds the movie to the beginning if the counter is at two hours. There are no preconditions for this action. The effect of this action is that the movie is rewound.\n- rewind-movie: This action rewinds the movie to the beginning if the counter is at any time other than two hours. There are no preconditions for this action. The effect of this action is that the movie is rewound, and the counter is not at zero.\n- reset-counter: This action resets the movie counter to zero. There are no preconditions for this action. The effect of this action is that the counter is set to zero.\n- get-chips <x>: This action allows you to have chips for the movie night. The precondition for this action is that there are chips available. The effect of this action is that you have chips.\n- get-dip <x>: This action allows you to have dip for the movie night. The precondition for this action is that there is dip available. The effect of this action is that you have dip.\n- get-pop <x>: This action allows you to have pop for the movie night. The precondition for this action is that there is pop available. The effect of this action is that you have pop.\n- get-cheese <x>: This action allows you to have cheese for the movie night. The precondition for this action is that there is cheese available. The effect of this action is that you have cheese.\n- get-crackers <x>: This action allows you to have crackers for the movie night. The precondition for this action is that there are crackers available. The effect of this action is that you have crackers.\n\nYou have the following restrictions on your actions:\n- You can only rewind the movie to the beginning if the counter is at the correct time (either two hours or other than two hours).\n- You can reset the counter at any time, preparing the system to start the movie from the beginning.\n- You can only acquire snacks (chips, dip, pop, cheese, crackers) if they are available. Once you get them, you have them for the movie night.",
        "domain_name": "movie",
        "nl_interface": {
            "movie-rewound": "The movie is rewound.",
            "counter-at-two-hours": "The counter is at two hours.",
            "counter-at-other-than-two-hours": "The counter is at a time other than two hours.",
            "counter-at-zero": "The counter is at zero.",
            "have-chips": "You have chips.",
            "have-dip": "You have dip.",
            "have-pop": "You have pop.",
            "have-cheese": "You have cheese.",
            "have-crackers": "You have crackers.",
            "chips": "There are chips available at {arg1}.",
            "dip": "There is dip available at {arg1}.",
            "pop": "There is pop available at {arg1}.",
            "cheese": "There is cheese available at {arg1}.",
            "crackers": "There are crackers available at {arg1}.",
            "rewind-movie-2": "Rewind the movie to the beginning when the counter is at two hours.",
            "rewind-movie": "Rewind the movie to the beginning when the counter is at a time other than two hours.",
            "reset-counter": "Reset the movie counter to zero.",
            "get-chips": "Get chips from {arg1}.",
            "get-dip": "Get dip from {arg1}.",
            "get-pop": "Get pop from {arg1}.",
            "get-cheese": "Get cheese from {arg1}.",
            "get-crackers": "Get crackers from {arg1}."
        },
        "nl_interface_debug": [
            {
                "nl": "{\n    \"movie-rewound\": \"The movie is rewound.\",\n    \"counter-at-two-hours\": \"The counter is at two hours.\",\n    \"counter-at-other-than-two-hours\": \"The counter is at a time other than two hours.\",\n    \"counter-at-zero\": \"The counter is at zero.\",\n    \"have-chips\": \"You have chips.\",\n    \"have-dip\": \"You have dip.\",\n    \"have-pop\": \"You have pop.\",\n    \"have-cheese\": \"You have cheese.\",\n    \"have-crackers\": \"You have crackers.\",\n    \"chips\": \"There are chips available.\",\n    \"dip\": \"There is dip available.\",\n    \"pop\": \"There is pop available.\",\n    \"cheese\": \"There is cheese available.\",\n    \"crackers\": \"There are crackers available.\",\n    \"rewind-movie-2\": \"Rewind the movie to the beginning when the counter is at two hours.\",\n    \"rewind-movie\": \"Rewind the movie to the beginning when the counter is at a time other than two hours.\",\n    \"reset-counter\": \"Reset the movie counter to zero.\",\n    \"get-chips\": \"Get chips from {arg1}.\",\n    \"get-dip\": \"Get dip from {arg1}.\",\n    \"get-pop\": \"Get pop from {arg1}.\",\n    \"get-cheese\": \"Get cheese from {arg1}.\",\n    \"get-crackers\": \"Get crackers from {arg1}.\"\n}",
                "gpt_response": "```python\n{\n    \"movie-rewound\": \"The movie is rewound.\",\n    \"counter-at-two-hours\": \"The counter is at two hours.\",\n    \"counter-at-other-than-two-hours\": \"The counter is at a time other than two hours.\",\n    \"counter-at-zero\": \"The counter is at zero.\",\n    \"have-chips\": \"You have chips.\",\n    \"have-dip\": \"You have dip.\",\n    \"have-pop\": \"You have pop.\",\n    \"have-cheese\": \"You have cheese.\",\n    \"have-crackers\": \"You have crackers.\",\n    \"chips\": \"There are chips available.\",\n    \"dip\": \"There is dip available.\",\n    \"pop\": \"There is pop available.\",\n    \"cheese\": \"There is cheese available.\",\n    \"crackers\": \"There are crackers available.\",\n    \"rewind-movie-2\": \"Rewind the movie to the beginning when the counter is at two hours.\",\n    \"rewind-movie\": \"Rewind the movie to the beginning when the counter is at a time other than two hours.\",\n    \"reset-counter\": \"Reset the movie counter to zero.\",\n    \"get-chips\": \"Get chips from {arg1}.\",\n    \"get-dip\": \"Get dip from {arg1}.\",\n    \"get-pop\": \"Get pop from {arg1}.\",\n    \"get-cheese\": \"Get cheese from {arg1}.\",\n    \"get-crackers\": \"Get crackers from {arg1}.\"\n}\n```",
                "error_info": "The arity of \"chips\" should be 1, but the arity of \"chips\" in natural language interface \"There are chips available.\" is 0",
                "prompt": "I would like you to create natural language interface for PDDL.\nThe form of the Natural Language Interface is a Python dictionary, wherein\uff1a\n1. The key corresponds to the name of a predicate or action within the domain PDDL. \n2. The value is its equivalent in natural language, with parameters presented in \"{argn}\", where n is the index of its parameters in the PDDL expression.\n3. You must ensure that the number of \"{}\" corresponds precisely to the number of parameters in predicates or actions. \n3. You should very carefully check the order of {argn}.\nYour output must strictly follow the provided example.\n\n\nExample:\nPDDL Domain:\n```pddl\n(define (domain spanner)                    \n(:requirements :typing :strips)                \n(:types \n\tlocation locatable - object\n\tman nut spanner - locatable\t\n)                                           \n                                                                               \n(:predicates \n\t(at ?m - locatable ?l - location)\n\t(carrying ?m - man ?s - spanner)\n\t(useable ?s - spanner)\n\t(link ?l1 - location ?l2 - location)\n\t(tightened ?n - nut)\n\t(loose ?n - nut))                                                                                           \n\n(:action walk \n        :parameters (?start - location ?end - location ?m - man)\n        :precondition (and (at ?m ?start) \n                           (link ?start ?end))                                                          \n        :effect (and (not (at ?m ?start)) (at ?m ?end)))\n\n(:action pickup_spanner \n        :parameters (?l - location ?s - spanner ?m - man)\n        :precondition (and (at ?m ?l) \n                           (at ?s ?l))\n        :effect (and (not (at ?s ?l))\n                     (carrying ?m ?s)))\n\n(:action tighten_nut \n        :parameters (?l - location ?s - spanner ?m - man ?n - nut)\n        :precondition (and (at ?m ?l) \n\t\t      \t   (at ?n ?l)\n\t\t\t   (carrying ?m ?s)\n\t\t\t   (useable ?s)\n\t\t\t   (loose ?n))\n        :effect (and (not (loose ?n))(not (useable ?s)) (tightened ?n)))\n)\n```\nDescription:\nYou are a maintenance worker tasked with tightening loose nuts in various locations using a spanner. Your environment consists of different locations, a spanner, and nuts that need to be tightened. The spanner can be carried from one location to another, and it is used to tighten nuts. However, once a nut is tightened, the spanner becomes unusable for the rest of the task.\n\nThe actions defined in this domain include:\n- walk <start_location> <end_location> <man>: This action allows the man to move from one location to another if there is a link between the start location and the end location. The effect of this action is that the man is no longer at the start location but is now at the end location.\n- pickup_spanner <location> <spanner> <man>: This action allows the man to pick up a spanner at his current location. The precondition for this action is that both the man and the spanner are at the same location. The effect of this action is that the spanner is no longer at that location, and the man is now carrying the spanner.\n- tighten_nut <location> <spanner> <man> <nut>: This action allows the man to tighten a loose nut at his current location using a spanner he is carrying. The preconditions for this action are that the man, the nut, and the spanner are all at the same location, the spanner is usable, and the nut is loose. The effect of this action is that the nut is no longer loose but tightened, and the spanner becomes unusable.\n\nYou have the following restrictions on your actions:\n- You can only move from one location to another if there is a direct link between those locations.\n- You can only pick up a spanner if you are at the same location as the spanner.\n- You can only tighten a nut if you are at the same location as the nut, you are carrying a usable spanner, and the nut is loose. After tightening a nut, the spanner becomes unusable for the rest of the task.\nNatural Language Interface:\n```python\n{\n    \"at\": \"{arg1} is at {arg2}.\",\n    \"carrying\": \"{arg1} is carrying {arg2}.\",\n    \"useable\": \"{arg1} is useable.\",\n    \"link\": \"There is a link between {arg1} and {arg2}.\",\n    \"tightened\": \"{arg1} is tightened.\",\n    \"loose\": \"{arg1} is loose.\",\n    \"walk\": \"{arg3} walks from {arg1} to {arg2}.\",\n    \"pickup_spanner\": \"{arg3} picks up the spanner {arg2} at {arg1}.\",\n    \"tighten_nut\": \"{arg3} tightens the nut {arg4} at {arg1} with the spanner {arg2}.\"\n}\n```\n\nYou need to generate the corresponding natural language interface for the following pddl domain.\n    \nPDDL Domain:\n(define (domain movie-strips)\n  (:predicates (movie-rewound)\n               (counter-at-two-hours)\n\t       (counter-at-other-than-two-hours)\n               (counter-at-zero)\n               (have-chips)\n               (have-dip)\n               (have-pop)\n               (have-cheese)\n               (have-crackers)\n               (chips ?x)\n               (dip ?x)\n               (pop ?x)\n               (cheese ?x)\n               (crackers ?x))\n  \n  (:action rewind-movie-2\n           :parameters ()\n\t   :precondition (counter-at-two-hours)\n           :effect (movie-rewound))\n  \n  (:action rewind-movie\n           :parameters ()\n\t   :precondition (counter-at-other-than-two-hours)\n           :effect (and (movie-rewound)\n                        ;; Let's assume that the movie is 2 hours long\n                        (not (counter-at-zero))))\n\n  (:action reset-counter\n           :parameters ()\n           :precondition (and)\n           :effect (counter-at-zero))\n\n\n  ;;; Get the food and snacks for the movie\n  (:action get-chips\n\n           :parameters (?x)\n           :precondition (chips ?x)\n           :effect (have-chips))\n  \n  (:action get-dip\n           :parameters (?x)\n           :precondition (dip ?x)\n           :effect (have-dip))\n\n  (:action get-pop\n           :parameters (?x)\n           :precondition (pop ?x)\n           :effect (have-pop))\n  \n  (:action get-cheese\n           :parameters (?x)\n           :precondition (cheese ?x)\n           :effect (have-cheese))\n  \n  (:action get-crackers\n           :parameters (?x)\n           :precondition (crackers ?x)\n           :effect (have-crackers)))\n\nDescription:\nYour goal is to prepare for a movie night. This involves rewinding the movie if it's not at the beginning, ensuring the movie counter is set correctly, and gathering all the necessary snacks including chips, dip, pop, cheese, and crackers.\n\nThe actions defined in this domain include:\n- rewind-movie-2: This action rewinds the movie to the beginning if the counter is at two hours. There are no preconditions for this action. The effect of this action is that the movie is rewound.\n- rewind-movie: This action rewinds the movie to the beginning if the counter is at any time other than two hours. There are no preconditions for this action. The effect of this action is that the movie is rewound, and the counter is not at zero.\n- reset-counter: This action resets the movie counter to zero. There are no preconditions for this action. The effect of this action is that the counter is set to zero.\n- get-chips <x>: This action allows you to have chips for the movie night. The precondition for this action is that there are chips available. The effect of this action is that you have chips.\n- get-dip <x>: This action allows you to have dip for the movie night. The precondition for this action is that there is dip available. The effect of this action is that you have dip.\n- get-pop <x>: This action allows you to have pop for the movie night. The precondition for this action is that there is pop available. The effect of this action is that you have pop.\n- get-cheese <x>: This action allows you to have cheese for the movie night. The precondition for this action is that there is cheese available. The effect of this action is that you have cheese.\n- get-crackers <x>: This action allows you to have crackers for the movie night. The precondition for this action is that there are crackers available. The effect of this action is that you have crackers.\n\nYou have the following restrictions on your actions:\n- You can only rewind the movie to the beginning if the counter is at the correct time (either two hours or other than two hours).\n- You can reset the counter at any time, preparing the system to start the movie from the beginning.\n- You can only acquire snacks (chips, dip, pop, cheese, crackers) if they are available. Once you get them, you have them for the movie night.\nNatural Language Interface:\n\nThe generated natural language interface {\n    \"movie-rewound\": \"The movie is rewound.\",\n    \"counter-at-two-hours\": \"The counter is at two hours.\",\n    \"counter-at-other-than-two-hours\": \"The counter is at a time other than two hours.\",\n    \"counter-at-zero\": \"The counter is at zero.\",\n    \"have-chips\": \"You have chips.\",\n    \"have-dip\": \"You have dip.\",\n    \"have-pop\": \"You have pop.\",\n    \"have-cheese\": \"You have cheese.\",\n    \"have-crackers\": \"You have crackers.\",\n    \"chips\": \"There are chips available.\",\n    \"dip\": \"There is dip available.\",\n    \"pop\": \"There is pop available.\",\n    \"cheese\": \"There is cheese available.\",\n    \"crackers\": \"There are crackers available.\",\n    \"rewind-movie-2\": \"Rewind the movie to the beginning when the counter is at two hours.\",\n    \"rewind-movie\": \"Rewind the movie to the beginning when the counter is at a time other than two hours.\",\n    \"reset-counter\": \"Reset the movie counter to zero.\",\n    \"get-chips\": \"Get chips from {arg1}.\",\n    \"get-dip\": \"Get dip from {arg1}.\",\n    \"get-pop\": \"Get pop from {arg1}.\",\n    \"get-cheese\": \"Get cheese from {arg1}.\",\n    \"get-crackers\": \"Get crackers from {arg1}.\"\n} occurs error: The arity of \"chips\" should be 1, but the arity of \"chips\" in natural language interface \"There are chips available.\" is 0. You need to carefully review your answer and output the correct natural language interface. The corrected natural language interface should also be wrapped in ```python```:\n"
            },
            {
                "nl": "{\n    \"movie-rewound\": \"The movie is rewound.\",\n    \"counter-at-two-hours\": \"The counter is at two hours.\",\n    \"counter-at-other-than-two-hours\": \"The counter is at a time other than two hours.\",\n    \"counter-at-zero\": \"The counter is at zero.\",\n    \"have-chips\": \"You have chips.\",\n    \"have-dip\": \"You have dip.\",\n    \"have-pop\": \"You have pop.\",\n    \"have-cheese\": \"You have cheese.\",\n    \"have-crackers\": \"You have crackers.\",\n    \"chips\": \"There are chips available at {arg1}.\",\n    \"dip\": \"There is dip available at {arg1}.\",\n    \"pop\": \"There is pop available at {arg1}.\",\n    \"cheese\": \"There is cheese available at {arg1}.\",\n    \"crackers\": \"There are crackers available at {arg1}.\",\n    \"rewind-movie-2\": \"Rewind the movie to the beginning when the counter is at two hours.\",\n    \"rewind-movie\": \"Rewind the movie to the beginning when the counter is at a time other than two hours.\",\n    \"reset-counter\": \"Reset the movie counter to zero.\",\n    \"get-chips\": \"Get chips from {arg1}.\",\n    \"get-dip\": \"Get dip from {arg1}.\",\n    \"get-pop\": \"Get pop from {arg1}.\",\n    \"get-cheese\": \"Get cheese from {arg1}.\",\n    \"get-crackers\": \"Get crackers from {arg1}.\"\n}",
                "gpt_response": "```python\n{\n    \"movie-rewound\": \"The movie is rewound.\",\n    \"counter-at-two-hours\": \"The counter is at two hours.\",\n    \"counter-at-other-than-two-hours\": \"The counter is at a time other than two hours.\",\n    \"counter-at-zero\": \"The counter is at zero.\",\n    \"have-chips\": \"You have chips.\",\n    \"have-dip\": \"You have dip.\",\n    \"have-pop\": \"You have pop.\",\n    \"have-cheese\": \"You have cheese.\",\n    \"have-crackers\": \"You have crackers.\",\n    \"chips\": \"There are chips available at {arg1}.\",\n    \"dip\": \"There is dip available at {arg1}.\",\n    \"pop\": \"There is pop available at {arg1}.\",\n    \"cheese\": \"There is cheese available at {arg1}.\",\n    \"crackers\": \"There are crackers available at {arg1}.\",\n    \"rewind-movie-2\": \"Rewind the movie to the beginning when the counter is at two hours.\",\n    \"rewind-movie\": \"Rewind the movie to the beginning when the counter is at a time other than two hours.\",\n    \"reset-counter\": \"Reset the movie counter to zero.\",\n    \"get-chips\": \"Get chips from {arg1}.\",\n    \"get-dip\": \"Get dip from {arg1}.\",\n    \"get-pop\": \"Get pop from {arg1}.\",\n    \"get-cheese\": \"Get cheese from {arg1}.\",\n    \"get-crackers\": \"Get crackers from {arg1}.\"\n}\n```"
            }
        ]
    }
]